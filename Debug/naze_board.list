
naze_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069c4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006ad8  08006ad8  00016ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006b48  08006b48  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b48  08006b48  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006b50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f0  2000001c  08006b6c  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000160c  08006b6c  0002160c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f841  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000247b  00000000  00000000  0002f886  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  00031d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000eb0  00000000  00000000  00032cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b5f  00000000  00000000  00033b80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bb8c  00000000  00000000  000496df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075503  00000000  00000000  0005526b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca76e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a0  00000000  00000000  000ca7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000001c 	.word	0x2000001c
 800012c:	00000000 	.word	0x00000000
 8000130:	08006abc 	.word	0x08006abc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000020 	.word	0x20000020
 800014c:	08006abc 	.word	0x08006abc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x28>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x28>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f945 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f004 ff00 	bl	8005f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f95d 	bl	80013ea <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001148:	f000 f925 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000018 	.word	0x20000018
 8001164:	20000004 	.word	0x20000004
 8001168:	20000000 	.word	0x20000000

0800116c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x1c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x20>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_IncTick+0x20>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	20000004 	.word	0x20000004
 800118c:	20001240 	.word	0x20001240

08001190 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  return uwTick;
 8001194:	4b02      	ldr	r3, [pc, #8]	; (80011a0 <HAL_GetTick+0x10>)
 8001196:	681b      	ldr	r3, [r3, #0]
}
 8001198:	4618      	mov	r0, r3
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	20001240 	.word	0x20001240

080011a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011ac:	f7ff fff0 	bl	8001190 <HAL_GetTick>
 80011b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011bc:	d005      	beq.n	80011ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011be:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_Delay+0x40>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	4413      	add	r3, r2
 80011c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ca:	bf00      	nop
 80011cc:	f7ff ffe0 	bl	8001190 <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d8f7      	bhi.n	80011cc <HAL_Delay+0x28>
  {
  }
}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000004 	.word	0x20000004

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	; (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4906      	ldr	r1, [pc, #24]	; (8001280 <__NVIC_EnableIRQ+0x34>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	; (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	; (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	; 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	; 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001360:	f7ff ff90 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	; (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	; (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff2d 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff42 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff35 	bl	800124c <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e043      	b.n	80014a2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <HAL_DMA_Init+0xa8>)
 8001422:	4413      	add	r3, r2
 8001424:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <HAL_DMA_Init+0xac>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	091b      	lsrs	r3, r3, #4
 800142c:	009a      	lsls	r2, r3, #2
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_DMA_Init+0xb0>)
 8001436:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800144e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001452:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001468:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001474:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800147c:	68fa      	ldr	r2, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	bffdfff8 	.word	0xbffdfff8
 80014b0:	cccccccd 	.word	0xcccccccd
 80014b4:	40020000 	.word	0x40020000

080014b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
 80014c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014c6:	2300      	movs	r3, #0
 80014c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_DMA_Start_IT+0x20>
 80014d4:	2302      	movs	r3, #2
 80014d6:	e04a      	b.n	800156e <HAL_DMA_Start_IT+0xb6>
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d13a      	bne.n	8001560 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2202      	movs	r2, #2
 80014ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f022 0201 	bic.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f9ae 	bl	8001870 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	2b00      	cmp	r3, #0
 800151a:	d008      	beq.n	800152e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 020e 	orr.w	r2, r2, #14
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e00f      	b.n	800154e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0204 	bic.w	r2, r2, #4
 800153c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 020a 	orr.w	r2, r2, #10
 800154c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	e005      	b.n	800156c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800156c:	7dfb      	ldrb	r3, [r7, #23]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800158a:	2b02      	cmp	r3, #2
 800158c:	d005      	beq.n	800159a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
 8001598:	e051      	b.n	800163e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 020e 	bic.w	r2, r2, #14
 80015a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0201 	bic.w	r2, r2, #1
 80015b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <HAL_DMA_Abort_IT+0xd0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d029      	beq.n	8001618 <HAL_DMA_Abort_IT+0xa0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_DMA_Abort_IT+0xd4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d022      	beq.n	8001614 <HAL_DMA_Abort_IT+0x9c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <HAL_DMA_Abort_IT+0xd8>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d01a      	beq.n	800160e <HAL_DMA_Abort_IT+0x96>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_DMA_Abort_IT+0xdc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d012      	beq.n	8001608 <HAL_DMA_Abort_IT+0x90>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_DMA_Abort_IT+0xe0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d00a      	beq.n	8001602 <HAL_DMA_Abort_IT+0x8a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1a      	ldr	r2, [pc, #104]	; (800165c <HAL_DMA_Abort_IT+0xe4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <HAL_DMA_Abort_IT+0x84>
 80015f6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015fa:	e00e      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 80015fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001600:	e00b      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001606:	e008      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160c:	e005      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 800160e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001612:	e002      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001614:	2310      	movs	r3, #16
 8001616:	e000      	b.n	800161a <HAL_DMA_Abort_IT+0xa2>
 8001618:	2301      	movs	r3, #1
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_DMA_Abort_IT+0xe8>)
 800161c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	4798      	blx	r3
    } 
  }
  return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3710      	adds	r7, #16
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40020008 	.word	0x40020008
 800164c:	4002001c 	.word	0x4002001c
 8001650:	40020030 	.word	0x40020030
 8001654:	40020044 	.word	0x40020044
 8001658:	40020058 	.word	0x40020058
 800165c:	4002006c 	.word	0x4002006c
 8001660:	40020000 	.word	0x40020000

08001664 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	2204      	movs	r2, #4
 8001682:	409a      	lsls	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d04f      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d04a      	beq.n	800172c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0320 	and.w	r3, r3, #32
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0204 	bic.w	r2, r2, #4
 80016b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a66      	ldr	r2, [pc, #408]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d029      	beq.n	8001712 <HAL_DMA_IRQHandler+0xae>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a65      	ldr	r2, [pc, #404]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d022      	beq.n	800170e <HAL_DMA_IRQHandler+0xaa>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a63      	ldr	r2, [pc, #396]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01a      	beq.n	8001708 <HAL_DMA_IRQHandler+0xa4>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a62      	ldr	r2, [pc, #392]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d012      	beq.n	8001702 <HAL_DMA_IRQHandler+0x9e>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a60      	ldr	r2, [pc, #384]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d00a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x98>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a5f      	ldr	r2, [pc, #380]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d102      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x92>
 80016f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016f4:	e00e      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80016fa:	e00b      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 80016fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001700:	e008      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001702:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001706:	e005      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170c:	e002      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 800170e:	2340      	movs	r3, #64	; 0x40
 8001710:	e000      	b.n	8001714 <HAL_DMA_IRQHandler+0xb0>
 8001712:	2304      	movs	r3, #4
 8001714:	4a55      	ldr	r2, [pc, #340]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 8001716:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 8094 	beq.w	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800172a:	e08e      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2202      	movs	r2, #2
 8001732:	409a      	lsls	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4013      	ands	r3, r2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d056      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d051      	beq.n	80017ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10b      	bne.n	800176c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 020a 	bic.w	r2, r2, #10
 8001762:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2201      	movs	r2, #1
 8001768:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a38      	ldr	r2, [pc, #224]	; (8001854 <HAL_DMA_IRQHandler+0x1f0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d029      	beq.n	80017ca <HAL_DMA_IRQHandler+0x166>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a37      	ldr	r2, [pc, #220]	; (8001858 <HAL_DMA_IRQHandler+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x162>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a35      	ldr	r2, [pc, #212]	; (800185c <HAL_DMA_IRQHandler+0x1f8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d01a      	beq.n	80017c0 <HAL_DMA_IRQHandler+0x15c>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a34      	ldr	r2, [pc, #208]	; (8001860 <HAL_DMA_IRQHandler+0x1fc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d012      	beq.n	80017ba <HAL_DMA_IRQHandler+0x156>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a32      	ldr	r2, [pc, #200]	; (8001864 <HAL_DMA_IRQHandler+0x200>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x150>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a31      	ldr	r2, [pc, #196]	; (8001868 <HAL_DMA_IRQHandler+0x204>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d102      	bne.n	80017ae <HAL_DMA_IRQHandler+0x14a>
 80017a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017ac:	e00e      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b2:	e00b      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017b8:	e008      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017be:	e005      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c4:	e002      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017c6:	2320      	movs	r3, #32
 80017c8:	e000      	b.n	80017cc <HAL_DMA_IRQHandler+0x168>
 80017ca:	2302      	movs	r3, #2
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_DMA_IRQHandler+0x208>)
 80017ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d034      	beq.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017e8:	e02f      	b.n	800184a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2208      	movs	r2, #8
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d028      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 020e 	bic.w	r2, r2, #14
 8001812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2201      	movs	r2, #1
 800182e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
    }
  }
  return;
 800184a:	bf00      	nop
 800184c:	bf00      	nop
}
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40020008 	.word	0x40020008
 8001858:	4002001c 	.word	0x4002001c
 800185c:	40020030 	.word	0x40020030
 8001860:	40020044 	.word	0x40020044
 8001864:	40020058 	.word	0x40020058
 8001868:	4002006c 	.word	0x4002006c
 800186c:	40020000 	.word	0x40020000

08001870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d108      	bne.n	80018b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018ae:	e007      	b.n	80018c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68ba      	ldr	r2, [r7, #8]
 80018b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	60da      	str	r2, [r3, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b08b      	sub	sp, #44	; 0x2c
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018de:	e127      	b.n	8001b30 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e0:	2201      	movs	r2, #1
 80018e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 8116 	bne.w	8001b2a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b12      	cmp	r3, #18
 8001904:	d034      	beq.n	8001970 <HAL_GPIO_Init+0xa4>
 8001906:	2b12      	cmp	r3, #18
 8001908:	d80d      	bhi.n	8001926 <HAL_GPIO_Init+0x5a>
 800190a:	2b02      	cmp	r3, #2
 800190c:	d02b      	beq.n	8001966 <HAL_GPIO_Init+0x9a>
 800190e:	2b02      	cmp	r3, #2
 8001910:	d804      	bhi.n	800191c <HAL_GPIO_Init+0x50>
 8001912:	2b00      	cmp	r3, #0
 8001914:	d031      	beq.n	800197a <HAL_GPIO_Init+0xae>
 8001916:	2b01      	cmp	r3, #1
 8001918:	d01c      	beq.n	8001954 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800191a:	e048      	b.n	80019ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800191c:	2b03      	cmp	r3, #3
 800191e:	d043      	beq.n	80019a8 <HAL_GPIO_Init+0xdc>
 8001920:	2b11      	cmp	r3, #17
 8001922:	d01b      	beq.n	800195c <HAL_GPIO_Init+0x90>
          break;
 8001924:	e043      	b.n	80019ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001926:	4a89      	ldr	r2, [pc, #548]	; (8001b4c <HAL_GPIO_Init+0x280>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d026      	beq.n	800197a <HAL_GPIO_Init+0xae>
 800192c:	4a87      	ldr	r2, [pc, #540]	; (8001b4c <HAL_GPIO_Init+0x280>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d806      	bhi.n	8001940 <HAL_GPIO_Init+0x74>
 8001932:	4a87      	ldr	r2, [pc, #540]	; (8001b50 <HAL_GPIO_Init+0x284>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d020      	beq.n	800197a <HAL_GPIO_Init+0xae>
 8001938:	4a86      	ldr	r2, [pc, #536]	; (8001b54 <HAL_GPIO_Init+0x288>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01d      	beq.n	800197a <HAL_GPIO_Init+0xae>
          break;
 800193e:	e036      	b.n	80019ae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001940:	4a85      	ldr	r2, [pc, #532]	; (8001b58 <HAL_GPIO_Init+0x28c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0xae>
 8001946:	4a85      	ldr	r2, [pc, #532]	; (8001b5c <HAL_GPIO_Init+0x290>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d016      	beq.n	800197a <HAL_GPIO_Init+0xae>
 800194c:	4a84      	ldr	r2, [pc, #528]	; (8001b60 <HAL_GPIO_Init+0x294>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xae>
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e028      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e023      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01e      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e019      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e012      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e008      	b.n	80019ae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e002      	b.n	80019ae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2bff      	cmp	r3, #255	; 0xff
 80019b2:	d801      	bhi.n	80019b8 <HAL_GPIO_Init+0xec>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	e001      	b.n	80019bc <HAL_GPIO_Init+0xf0>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3304      	adds	r3, #4
 80019bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2bff      	cmp	r3, #255	; 0xff
 80019c2:	d802      	bhi.n	80019ca <HAL_GPIO_Init+0xfe>
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	e002      	b.n	80019d0 <HAL_GPIO_Init+0x104>
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	3b08      	subs	r3, #8
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	210f      	movs	r1, #15
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	fa01 f303 	lsl.w	r3, r1, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	401a      	ands	r2, r3
 80019e2:	6a39      	ldr	r1, [r7, #32]
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	431a      	orrs	r2, r3
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8096 	beq.w	8001b2a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019fe:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_GPIO_Init+0x298>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x298>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b56      	ldr	r3, [pc, #344]	; (8001b64 <HAL_GPIO_Init+0x298>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a16:	4a54      	ldr	r2, [pc, #336]	; (8001b68 <HAL_GPIO_Init+0x29c>)
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4b      	ldr	r2, [pc, #300]	; (8001b6c <HAL_GPIO_Init+0x2a0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d013      	beq.n	8001a6a <HAL_GPIO_Init+0x19e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <HAL_GPIO_Init+0x2a4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d00d      	beq.n	8001a66 <HAL_GPIO_Init+0x19a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a49      	ldr	r2, [pc, #292]	; (8001b74 <HAL_GPIO_Init+0x2a8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d007      	beq.n	8001a62 <HAL_GPIO_Init+0x196>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a48      	ldr	r2, [pc, #288]	; (8001b78 <HAL_GPIO_Init+0x2ac>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d101      	bne.n	8001a5e <HAL_GPIO_Init+0x192>
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x1a0>
 8001a5e:	2304      	movs	r3, #4
 8001a60:	e004      	b.n	8001a6c <HAL_GPIO_Init+0x1a0>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_Init+0x1a0>
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <HAL_GPIO_Init+0x1a0>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	f002 0203 	and.w	r2, r2, #3
 8001a72:	0092      	lsls	r2, r2, #2
 8001a74:	4093      	lsls	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7c:	493a      	ldr	r1, [pc, #232]	; (8001b68 <HAL_GPIO_Init+0x29c>)
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	3302      	adds	r3, #2
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a96:	4b39      	ldr	r3, [pc, #228]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	4938      	ldr	r1, [pc, #224]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	600b      	str	r3, [r1, #0]
 8001aa2:	e006      	b.n	8001ab2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aa4:	4b35      	ldr	r3, [pc, #212]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	4933      	ldr	r1, [pc, #204]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001abe:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	492e      	ldr	r1, [pc, #184]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	604b      	str	r3, [r1, #4]
 8001aca:	e006      	b.n	8001ada <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	4929      	ldr	r1, [pc, #164]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d006      	beq.n	8001af4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ae6:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	4924      	ldr	r1, [pc, #144]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	608b      	str	r3, [r1, #8]
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	491f      	ldr	r1, [pc, #124]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d006      	beq.n	8001b1c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	491a      	ldr	r1, [pc, #104]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60cb      	str	r3, [r1, #12]
 8001b1a:	e006      	b.n	8001b2a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001b1e:	68da      	ldr	r2, [r3, #12]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	43db      	mvns	r3, r3
 8001b24:	4915      	ldr	r1, [pc, #84]	; (8001b7c <HAL_GPIO_Init+0x2b0>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f aed0 	bne.w	80018e0 <HAL_GPIO_Init+0x14>
  }
}
 8001b40:	bf00      	nop
 8001b42:	372c      	adds	r7, #44	; 0x2c
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	10210000 	.word	0x10210000
 8001b50:	10110000 	.word	0x10110000
 8001b54:	10120000 	.word	0x10120000
 8001b58:	10310000 	.word	0x10310000
 8001b5c:	10320000 	.word	0x10320000
 8001b60:	10220000 	.word	0x10220000
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40010000 	.word	0x40010000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	40011000 	.word	0x40011000
 8001b78:	40011400 	.word	0x40011400
 8001b7c:	40010400 	.word	0x40010400

08001b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	807b      	strh	r3, [r7, #2]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b90:	787b      	ldrb	r3, [r7, #1]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b9c:	e003      	b.n	8001ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	041a      	lsls	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	611a      	str	r2, [r3, #16]
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	887b      	ldrh	r3, [r7, #2]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001bce:	e002      	b.n	8001bd6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bd0:	887a      	ldrh	r2, [r7, #2]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	88fb      	ldrh	r3, [r7, #6]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d006      	beq.n	8001c04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f806 	bl	8001c10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40010400 	.word	0x40010400

08001c10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr

08001c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e10f      	b.n	8001e56 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d106      	bne.n	8001c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f004 f98a 	bl	8005f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2224      	movs	r2, #36	; 0x24
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c68:	f001 fc32 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4a7b      	ldr	r2, [pc, #492]	; (8001e60 <HAL_I2C_Init+0x23c>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d807      	bhi.n	8001c88 <HAL_I2C_Init+0x64>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a7a      	ldr	r2, [pc, #488]	; (8001e64 <HAL_I2C_Init+0x240>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e006      	b.n	8001c96 <HAL_I2C_Init+0x72>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4a77      	ldr	r2, [pc, #476]	; (8001e68 <HAL_I2C_Init+0x244>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0db      	b.n	8001e56 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4a72      	ldr	r2, [pc, #456]	; (8001e6c <HAL_I2C_Init+0x248>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0c9b      	lsrs	r3, r3, #18
 8001ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	4a64      	ldr	r2, [pc, #400]	; (8001e60 <HAL_I2C_Init+0x23c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d802      	bhi.n	8001cd8 <HAL_I2C_Init+0xb4>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	e009      	b.n	8001cec <HAL_I2C_Init+0xc8>
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cde:	fb02 f303 	mul.w	r3, r2, r3
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <HAL_I2C_Init+0x24c>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	099b      	lsrs	r3, r3, #6
 8001cea:	3301      	adds	r3, #1
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	4956      	ldr	r1, [pc, #344]	; (8001e60 <HAL_I2C_Init+0x23c>)
 8001d08:	428b      	cmp	r3, r1
 8001d0a:	d80d      	bhi.n	8001d28 <HAL_I2C_Init+0x104>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	1e59      	subs	r1, r3, #1
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	bf38      	it	cc
 8001d24:	2304      	movcc	r3, #4
 8001d26:	e04f      	b.n	8001dc8 <HAL_I2C_Init+0x1a4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d111      	bne.n	8001d54 <HAL_I2C_Init+0x130>
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	1e58      	subs	r0, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	440b      	add	r3, r1
 8001d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d42:	3301      	adds	r3, #1
 8001d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	bf0c      	ite	eq
 8001d4c:	2301      	moveq	r3, #1
 8001d4e:	2300      	movne	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	e012      	b.n	8001d7a <HAL_I2C_Init+0x156>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	440b      	add	r3, r1
 8001d62:	0099      	lsls	r1, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Init+0x15e>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e022      	b.n	8001dc8 <HAL_I2C_Init+0x1a4>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10e      	bne.n	8001da8 <HAL_I2C_Init+0x184>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e58      	subs	r0, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6859      	ldr	r1, [r3, #4]
 8001d92:	460b      	mov	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	440b      	add	r3, r1
 8001d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001da6:	e00f      	b.n	8001dc8 <HAL_I2C_Init+0x1a4>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	1e58      	subs	r0, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6859      	ldr	r1, [r3, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	0099      	lsls	r1, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	430a      	orrs	r2, r1
 8001dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001df6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6911      	ldr	r1, [r2, #16]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	68d2      	ldr	r2, [r2, #12]
 8001e02:	4311      	orrs	r1, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695a      	ldr	r2, [r3, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2220      	movs	r2, #32
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	000186a0 	.word	0x000186a0
 8001e64:	001e847f 	.word	0x001e847f
 8001e68:	003d08ff 	.word	0x003d08ff
 8001e6c:	431bde83 	.word	0x431bde83
 8001e70:	10624dd3 	.word	0x10624dd3

08001e74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	607a      	str	r2, [r7, #4]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	460b      	mov	r3, r1
 8001e82:	817b      	strh	r3, [r7, #10]
 8001e84:	4613      	mov	r3, r2
 8001e86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff f982 	bl	8001190 <HAL_GetTick>
 8001e8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	f040 80e0 	bne.w	800205c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2319      	movs	r3, #25
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4970      	ldr	r1, [pc, #448]	; (8002068 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fd5e 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0d3      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_I2C_Master_Transmit+0x50>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0cc      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d007      	beq.n	8001eea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0201 	orr.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ef8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2221      	movs	r2, #33	; 0x21
 8001efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2210      	movs	r2, #16
 8001f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	893a      	ldrh	r2, [r7, #8]
 8001f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4a50      	ldr	r2, [pc, #320]	; (800206c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f2c:	8979      	ldrh	r1, [r7, #10]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	6a3a      	ldr	r2, [r7, #32]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fbec 	bl	8002710 <I2C_MasterRequestWrite>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e08d      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	613b      	str	r3, [r7, #16]
 8001f56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f58:	e066      	b.n	8002028 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	6a39      	ldr	r1, [r7, #32]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fdd8 	bl	8002b14 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00d      	beq.n	8001f86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d107      	bne.n	8001f82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06b      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	781a      	ldrb	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f96:	1c5a      	adds	r2, r3, #1
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d11b      	bne.n	8001ffc <HAL_I2C_Master_Transmit+0x188>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d017      	beq.n	8001ffc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	6a39      	ldr	r1, [r7, #32]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 fdc8 	bl	8002b96 <I2C_WaitOnBTFFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00d      	beq.n	8002028 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	2b04      	cmp	r3, #4
 8002012:	d107      	bne.n	8002024 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002022:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e01a      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	2b00      	cmp	r3, #0
 800202e:	d194      	bne.n	8001f5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800203e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	e000      	b.n	800205e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800205c:	2302      	movs	r3, #2
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	00100002 	.word	0x00100002
 800206c:	ffff0000 	.word	0xffff0000

08002070 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	; 0x30
 8002074:	af02      	add	r7, sp, #8
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	461a      	mov	r2, r3
 800207c:	460b      	mov	r3, r1
 800207e:	817b      	strh	r3, [r7, #10]
 8002080:	4613      	mov	r3, r2
 8002082:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff f884 	bl	8001190 <HAL_GetTick>
 8002088:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	f040 8213 	bne.w	80024be <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	2319      	movs	r3, #25
 800209e:	2201      	movs	r2, #1
 80020a0:	497e      	ldr	r1, [pc, #504]	; (800229c <HAL_I2C_Master_Receive+0x22c>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fc60 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
 80020b0:	e206      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_I2C_Master_Receive+0x50>
 80020bc:	2302      	movs	r3, #2
 80020be:	e1ff      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d007      	beq.n	80020e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2222      	movs	r2, #34	; 0x22
 80020fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2210      	movs	r2, #16
 8002102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	893a      	ldrh	r2, [r7, #8]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4a5e      	ldr	r2, [pc, #376]	; (80022a0 <HAL_I2C_Master_Receive+0x230>)
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002128:	8979      	ldrh	r1, [r7, #10]
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fb64 	bl	80027fc <I2C_MasterRequestRead>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c0      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	623b      	str	r3, [r7, #32]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	e194      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	2b01      	cmp	r3, #1
 8002174:	d11d      	bne.n	80021b2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002184:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002186:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002188:	2300      	movs	r3, #0
 800218a:	61fb      	str	r3, [r7, #28]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021ae:	b662      	cpsie	i
 80021b0:	e172      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d11d      	bne.n	80021f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021ca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021cc:	2300      	movs	r3, #0
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021f2:	b662      	cpsie	i
 80021f4:	e150      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800221c:	e13c      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002222:	2b03      	cmp	r3, #3
 8002224:	f200 80f5 	bhi.w	8002412 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	2b01      	cmp	r3, #1
 800222e:	d123      	bne.n	8002278 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f000 fcef 	bl	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e13d      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691a      	ldr	r2, [r3, #16]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002276:	e10f      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227c:	2b02      	cmp	r3, #2
 800227e:	d150      	bne.n	8002322 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	4906      	ldr	r1, [pc, #24]	; (80022a4 <HAL_I2C_Master_Receive+0x234>)
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fb6c 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e112      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
 800229a:	bf00      	nop
 800229c:	00100002 	.word	0x00100002
 80022a0:	ffff0000 	.word	0xffff0000
 80022a4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80022ec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	3b01      	subs	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002320:	e0ba      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002328:	2200      	movs	r2, #0
 800232a:	4967      	ldr	r1, [pc, #412]	; (80024c8 <HAL_I2C_Master_Receive+0x458>)
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 fb1b 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0c1      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236a:	3b01      	subs	r3, #1
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	3b01      	subs	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	2200      	movs	r2, #0
 8002388:	494f      	ldr	r1, [pc, #316]	; (80024c8 <HAL_I2C_Master_Receive+0x458>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 faec 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e092      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	691a      	ldr	r2, [r3, #16]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023dc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002410:	e042      	b.n	8002498 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f000 fbfe 	bl	8002c18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e04c      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002442:	3b01      	subs	r3, #1
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b04      	cmp	r3, #4
 8002464:	d118      	bne.n	8002498 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	b2d2      	uxtb	r2, r2
 8002472:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249c:	2b00      	cmp	r3, #0
 800249e:	f47f aebe 	bne.w	800221e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3728      	adds	r7, #40	; 0x28
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	00010004 	.word	0x00010004

080024cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	460b      	mov	r3, r1
 80024da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7fe fe58 	bl	8001190 <HAL_GetTick>
 80024e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80024e2:	2301      	movs	r3, #1
 80024e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f040 8105 	bne.w	80026fe <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2319      	movs	r3, #25
 80024fa:	2201      	movs	r2, #1
 80024fc:	4982      	ldr	r1, [pc, #520]	; (8002708 <HAL_I2C_IsDeviceReady+0x23c>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fa32 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
 800250c:	e0f8      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_I2C_IsDeviceReady+0x50>
 8002518:	2302      	movs	r3, #2
 800251a:	e0f1      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b01      	cmp	r3, #1
 8002530:	d007      	beq.n	8002542 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f042 0201 	orr.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002550:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2224      	movs	r2, #36	; 0x24
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4a6a      	ldr	r2, [pc, #424]	; (800270c <HAL_I2C_IsDeviceReady+0x240>)
 8002564:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002574:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f9f0 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e0b6      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	461a      	mov	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025a2:	f7fe fdf5 	bl	8001190 <HAL_GetTick>
 80025a6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025d6:	e025      	b.n	8002624 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7fe fdda 	bl	8001190 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <HAL_I2C_IsDeviceReady+0x122>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d103      	bne.n	80025f6 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	22a0      	movs	r2, #160	; 0xa0
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b02      	cmp	r3, #2
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2ba0      	cmp	r3, #160	; 0xa0
 800262e:	d005      	beq.n	800263c <HAL_I2C_IsDeviceReady+0x170>
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d102      	bne.n	800263c <HAL_I2C_IsDeviceReady+0x170>
 8002636:	7dbb      	ldrb	r3, [r7, #22]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0cd      	beq.n	80025d8 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b02      	cmp	r3, #2
 8002650:	d129      	bne.n	80026a6 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002660:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2319      	movs	r3, #25
 800267e:	2201      	movs	r2, #1
 8002680:	4921      	ldr	r1, [pc, #132]	; (8002708 <HAL_I2C_IsDeviceReady+0x23c>)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f970 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e036      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	e02c      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2319      	movs	r3, #25
 80026c6:	2201      	movs	r2, #1
 80026c8:	490f      	ldr	r1, [pc, #60]	; (8002708 <HAL_I2C_IsDeviceReady+0x23c>)
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f94c 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e012      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	3301      	adds	r3, #1
 80026de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	f4ff af3e 	bcc.w	8002566 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	00100002 	.word	0x00100002
 800270c:	ffff0000 	.word	0xffff0000

08002710 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	460b      	mov	r3, r1
 800271e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	2b08      	cmp	r3, #8
 800272a:	d006      	beq.n	800273a <I2C_MasterRequestWrite+0x2a>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d003      	beq.n	800273a <I2C_MasterRequestWrite+0x2a>
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002738:	d108      	bne.n	800274c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00b      	b.n	8002764 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002750:	2b12      	cmp	r3, #18
 8002752:	d107      	bne.n	8002764 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f8f9 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e035      	b.n	80027ec <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002788:	d108      	bne.n	800279c <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800278a:	897b      	ldrh	r3, [r7, #10]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002798:	611a      	str	r2, [r3, #16]
 800279a:	e01b      	b.n	80027d4 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800279c:	897b      	ldrh	r3, [r7, #10]
 800279e:	11db      	asrs	r3, r3, #7
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f003 0306 	and.w	r3, r3, #6
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f063 030f 	orn	r3, r3, #15
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	490e      	ldr	r1, [pc, #56]	; (80027f4 <I2C_MasterRequestWrite+0xe4>)
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f92b 	bl	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e010      	b.n	80027ec <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4907      	ldr	r1, [pc, #28]	; (80027f8 <I2C_MasterRequestWrite+0xe8>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f91b 	bl	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	00010008 	.word	0x00010008
 80027f8:	00010002 	.word	0x00010002

080027fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002820:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2b08      	cmp	r3, #8
 8002826:	d006      	beq.n	8002836 <I2C_MasterRequestRead+0x3a>
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d003      	beq.n	8002836 <I2C_MasterRequestRead+0x3a>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002834:	d108      	bne.n	8002848 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	e00b      	b.n	8002860 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	2b11      	cmp	r3, #17
 800284e:	d107      	bne.n	8002860 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800285e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f87b 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e06d      	b.n	8002958 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002884:	d108      	bne.n	8002898 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002886:	897b      	ldrh	r3, [r7, #10]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	611a      	str	r2, [r3, #16]
 8002896:	e053      	b.n	8002940 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002898:	897b      	ldrh	r3, [r7, #10]
 800289a:	11db      	asrs	r3, r3, #7
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0306 	and.w	r3, r3, #6
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	f063 030f 	orn	r3, r3, #15
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	492a      	ldr	r1, [pc, #168]	; (8002960 <I2C_MasterRequestRead+0x164>)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f8ad 	bl	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e048      	b.n	8002958 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028c6:	897b      	ldrh	r3, [r7, #10]
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4923      	ldr	r1, [pc, #140]	; (8002964 <I2C_MasterRequestRead+0x168>)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f89d 	bl	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e038      	b.n	8002958 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 f825 	bl	8002968 <I2C_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e017      	b.n	8002958 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002928:	897b      	ldrh	r3, [r7, #10]
 800292a:	11db      	asrs	r3, r3, #7
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f003 0306 	and.w	r3, r3, #6
 8002932:	b2db      	uxtb	r3, r3
 8002934:	f063 030e 	orn	r3, r3, #14
 8002938:	b2da      	uxtb	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	4907      	ldr	r1, [pc, #28]	; (8002964 <I2C_MasterRequestRead+0x168>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f865 	bl	8002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	00010008 	.word	0x00010008
 8002964:	00010002 	.word	0x00010002

08002968 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002978:	e025      	b.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002980:	d021      	beq.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002982:	f7fe fc05 	bl	8001190 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e023      	b.n	8002a0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	0c1b      	lsrs	r3, r3, #16
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d10d      	bne.n	80029ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4013      	ands	r3, r2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bf0c      	ite	eq
 80029e2:	2301      	moveq	r3, #1
 80029e4:	2300      	movne	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	e00c      	b.n	8002a06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4013      	ands	r3, r2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d0b6      	beq.n	800297a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b084      	sub	sp, #16
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	60f8      	str	r0, [r7, #12]
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607a      	str	r2, [r7, #4]
 8002a22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a24:	e051      	b.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a34:	d123      	bne.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f043 0204 	orr.w	r2, r3, #4
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e046      	b.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a84:	d021      	beq.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a86:	f7fe fb83 	bl	8001190 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d302      	bcc.n	8002a9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d116      	bne.n	8002aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f043 0220 	orr.w	r2, r3, #32
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e020      	b.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	0c1b      	lsrs	r3, r3, #16
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d10c      	bne.n	8002aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	43da      	mvns	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e00b      	b.n	8002b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	43da      	mvns	r2, r3
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	4013      	ands	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d18d      	bne.n	8002a26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b0a:	2300      	movs	r3, #0
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b20:	e02d      	b.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f8ce 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e02d      	b.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	d021      	beq.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b3a:	f7fe fb29 	bl	8001190 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68ba      	ldr	r2, [r7, #8]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d302      	bcc.n	8002b50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d116      	bne.n	8002b7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0220 	orr.w	r2, r3, #32
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d1ca      	bne.n	8002b22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	60f8      	str	r0, [r7, #12]
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ba2:	e02d      	b.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f88d 	bl	8002cc4 <I2C_IsAcknowledgeFailed>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e02d      	b.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bba:	d021      	beq.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7fe fae8 	bl	8001190 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d116      	bne.n	8002c00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	f043 0220 	orr.w	r2, r3, #32
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e007      	b.n	8002c10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d1ca      	bne.n	8002ba4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c24:	e042      	b.n	8002cac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d119      	bne.n	8002c68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f06f 0210 	mvn.w	r2, #16
 8002c3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e029      	b.n	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe fa92 	bl	8001190 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0220 	orr.w	r2, r3, #32
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e007      	b.n	8002cbc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb6:	2b40      	cmp	r3, #64	; 0x40
 8002cb8:	d1b5      	bne.n	8002c26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d11b      	bne.n	8002d14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ce4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e26c      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 8087 	beq.w	8002e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d40:	4b92      	ldr	r3, [pc, #584]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d00c      	beq.n	8002d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d4c:	4b8f      	ldr	r3, [pc, #572]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d112      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
 8002d58:	4b8c      	ldr	r3, [pc, #560]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d10b      	bne.n	8002d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d66:	4b89      	ldr	r3, [pc, #548]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06c      	beq.n	8002e4c <HAL_RCC_OscConfig+0x12c>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d168      	bne.n	8002e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e246      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d86:	d106      	bne.n	8002d96 <HAL_RCC_OscConfig+0x76>
 8002d88:	4b80      	ldr	r3, [pc, #512]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a7f      	ldr	r2, [pc, #508]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	e02e      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCC_OscConfig+0x98>
 8002d9e:	4b7b      	ldr	r3, [pc, #492]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7a      	ldr	r2, [pc, #488]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da8:	6013      	str	r3, [r2, #0]
 8002daa:	4b78      	ldr	r3, [pc, #480]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a77      	ldr	r2, [pc, #476]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	e01d      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dc0:	d10c      	bne.n	8002ddc <HAL_RCC_OscConfig+0xbc>
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a71      	ldr	r2, [pc, #452]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	4b6f      	ldr	r3, [pc, #444]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a6e      	ldr	r2, [pc, #440]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	e00b      	b.n	8002df4 <HAL_RCC_OscConfig+0xd4>
 8002ddc:	4b6b      	ldr	r3, [pc, #428]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a6a      	ldr	r2, [pc, #424]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	4b68      	ldr	r3, [pc, #416]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a67      	ldr	r2, [pc, #412]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d013      	beq.n	8002e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f9c8 	bl	8001190 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e04:	f7fe f9c4 	bl	8001190 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b64      	cmp	r3, #100	; 0x64
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e1fa      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e16:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0xe4>
 8002e22:	e014      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7fe f9b4 	bl	8001190 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e2c:	f7fe f9b0 	bl	8001190 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1e6      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3e:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f0      	bne.n	8002e2c <HAL_RCC_OscConfig+0x10c>
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d063      	beq.n	8002f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e5a:	4b4c      	ldr	r3, [pc, #304]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00b      	beq.n	8002e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e66:	4b49      	ldr	r3, [pc, #292]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 030c 	and.w	r3, r3, #12
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11c      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
 8002e72:	4b46      	ldr	r3, [pc, #280]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7e:	4b43      	ldr	r3, [pc, #268]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e1ba      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e96:	4b3d      	ldr	r3, [pc, #244]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	4939      	ldr	r1, [pc, #228]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	e03a      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d020      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb4:	4b36      	ldr	r3, [pc, #216]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eba:	f7fe f969 	bl	8001190 <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ec2:	f7fe f965 	bl	8001190 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e19b      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0f0      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4927      	ldr	r1, [pc, #156]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	600b      	str	r3, [r1, #0]
 8002ef4:	e015      	b.n	8002f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <HAL_RCC_OscConfig+0x270>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efc:	f7fe f948 	bl	8001190 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f04:	f7fe f944 	bl	8001190 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e17a      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f16:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d03a      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d019      	beq.n	8002f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f3c:	f7fe f928 	bl	8001190 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f44:	f7fe f924 	bl	8001190 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e15a      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f56:	4b0d      	ldr	r3, [pc, #52]	; (8002f8c <HAL_RCC_OscConfig+0x26c>)
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 fadc 	bl	8003520 <RCC_Delay>
 8002f68:	e01c      	b.n	8002fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <HAL_RCC_OscConfig+0x274>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f70:	f7fe f90e 	bl	8001190 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f76:	e00f      	b.n	8002f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f78:	f7fe f90a 	bl	8001190 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d908      	bls.n	8002f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e140      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	42420000 	.word	0x42420000
 8002f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f98:	4b9e      	ldr	r3, [pc, #632]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1e9      	bne.n	8002f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80a6 	beq.w	80030fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb6:	4b97      	ldr	r3, [pc, #604]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc2:	4b94      	ldr	r3, [pc, #592]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4a93      	ldr	r2, [pc, #588]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8002fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	61d3      	str	r3, [r2, #28]
 8002fce:	4b91      	ldr	r3, [pc, #580]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd6:	60bb      	str	r3, [r7, #8]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fde:	4b8e      	ldr	r3, [pc, #568]	; (8003218 <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d118      	bne.n	800301c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fea:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCC_OscConfig+0x4f8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a8a      	ldr	r2, [pc, #552]	; (8003218 <HAL_RCC_OscConfig+0x4f8>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe f8cb 	bl	8001190 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffe:	f7fe f8c7 	bl	8001190 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0fd      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	4b81      	ldr	r3, [pc, #516]	; (8003218 <HAL_RCC_OscConfig+0x4f8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d106      	bne.n	8003032 <HAL_RCC_OscConfig+0x312>
 8003024:	4b7b      	ldr	r3, [pc, #492]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	6213      	str	r3, [r2, #32]
 8003030:	e02d      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0x334>
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	4a75      	ldr	r2, [pc, #468]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6213      	str	r3, [r2, #32]
 8003046:	4b73      	ldr	r3, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	4a72      	ldr	r2, [pc, #456]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6213      	str	r3, [r2, #32]
 8003052:	e01c      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d10c      	bne.n	8003076 <HAL_RCC_OscConfig+0x356>
 800305c:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	4a6c      	ldr	r2, [pc, #432]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	f043 0304 	orr.w	r3, r3, #4
 8003066:	6213      	str	r3, [r2, #32]
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	4a69      	ldr	r2, [pc, #420]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	6213      	str	r3, [r2, #32]
 8003074:	e00b      	b.n	800308e <HAL_RCC_OscConfig+0x36e>
 8003076:	4b67      	ldr	r3, [pc, #412]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a66      	ldr	r2, [pc, #408]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	4b64      	ldr	r3, [pc, #400]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a63      	ldr	r2, [pc, #396]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d015      	beq.n	80030c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003096:	f7fe f87b 	bl	8001190 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309c:	e00a      	b.n	80030b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309e:	f7fe f877 	bl	8001190 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e0ab      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b4:	4b57      	ldr	r3, [pc, #348]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ee      	beq.n	800309e <HAL_RCC_OscConfig+0x37e>
 80030c0:	e014      	b.n	80030ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c2:	f7fe f865 	bl	8001190 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c8:	e00a      	b.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ca:	f7fe f861 	bl	8001190 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030d8:	4293      	cmp	r3, r2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e095      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ee      	bne.n	80030ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030ec:	7dfb      	ldrb	r3, [r7, #23]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d105      	bne.n	80030fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b48      	ldr	r3, [pc, #288]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	4a47      	ldr	r2, [pc, #284]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8081 	beq.w	800320a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003108:	4b42      	ldr	r3, [pc, #264]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d061      	beq.n	80031d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	69db      	ldr	r3, [r3, #28]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d146      	bne.n	80031aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_RCC_OscConfig+0x4fc>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003122:	f7fe f835 	bl	8001190 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312a:	f7fe f831 	bl	8001190 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e067      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800313c:	4b35      	ldr	r3, [pc, #212]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003150:	d108      	bne.n	8003164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003152:	4b30      	ldr	r3, [pc, #192]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	492d      	ldr	r1, [pc, #180]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a19      	ldr	r1, [r3, #32]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	430b      	orrs	r3, r1
 8003176:	4927      	ldr	r1, [pc, #156]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 8003178:	4313      	orrs	r3, r2
 800317a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x4fc>)
 800317e:	2201      	movs	r2, #1
 8003180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003182:	f7fe f805 	bl	8001190 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318a:	f7fe f801 	bl	8001190 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e037      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x46a>
 80031a8:	e02f      	b.n	800320a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b1c      	ldr	r3, [pc, #112]	; (800321c <HAL_RCC_OscConfig+0x4fc>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd ffee 	bl	8001190 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd ffea 	bl	8001190 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e020      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x498>
 80031d6:	e018      	b.n	800320a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e013      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x4f4>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d106      	bne.n	8003206 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d001      	beq.n	800320a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000
 8003218:	40007000 	.word	0x40007000
 800321c:	42420060 	.word	0x42420060

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d0      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b67      	ldr	r3, [pc, #412]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4965      	ldr	r1, [pc, #404]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a58      	ldr	r2, [pc, #352]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a52      	ldr	r2, [pc, #328]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800329e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d040      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d115      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b41      	ldr	r3, [pc, #260]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e073      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06b      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4936      	ldr	r1, [pc, #216]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7fd ff3e 	bl	8001190 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd ff3a 	bl	8001190 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	; 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e053      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d210      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b24      	ldr	r3, [pc, #144]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4922      	ldr	r1, [pc, #136]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f821 	bl	80033f4 <HAL_RCC_GetSysClockFreq>
 80033b2:	4601      	mov	r1, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	5cd3      	ldrb	r3, [r2, r3]
 80033c2:	fa21 f303 	lsr.w	r3, r1, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x1cc>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <HAL_RCC_ClockConfig+0x1d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fd fe9c 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08006aec 	.word	0x08006aec
 80033ec:	20000018 	.word	0x20000018
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f4:	b490      	push	{r4, r7}
 80033f6:	b08a      	sub	sp, #40	; 0x28
 80033f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80033fa:	4b2a      	ldr	r3, [pc, #168]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033fc:	1d3c      	adds	r4, r7, #4
 80033fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003404:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	2300      	movs	r3, #0
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d002      	beq.n	8003434 <HAL_RCC_GetSysClockFreq+0x40>
 800342e:	2b08      	cmp	r3, #8
 8003430:	d003      	beq.n	800343a <HAL_RCC_GetSysClockFreq+0x46>
 8003432:	e02d      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003434:	4b1e      	ldr	r3, [pc, #120]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003436:	623b      	str	r3, [r7, #32]
      break;
 8003438:	e02d      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	0c9b      	lsrs	r3, r3, #18
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003446:	4413      	add	r3, r2
 8003448:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800344c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003458:	4b14      	ldr	r3, [pc, #80]	; (80034ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	0c5b      	lsrs	r3, r3, #17
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003466:	4413      	add	r3, r2
 8003468:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800346c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a0f      	ldr	r2, [pc, #60]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003472:	fb02 f203 	mul.w	r2, r2, r3
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	fbb2 f3f3 	udiv	r3, r2, r3
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	e004      	b.n	800348a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003484:	fb02 f303 	mul.w	r3, r2, r3
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	623b      	str	r3, [r7, #32]
      break;
 800348e:	e002      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003496:	6a3b      	ldr	r3, [r7, #32]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3728      	adds	r7, #40	; 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bc90      	pop	{r4, r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	08006ad8 	.word	0x08006ad8
 80034a8:	08006ae8 	.word	0x08006ae8
 80034ac:	40021000 	.word	0x40021000
 80034b0:	00b71b00 	.word	0x00b71b00
 80034b4:	003d0900 	.word	0x003d0900
 80034b8:	007a1200 	.word	0x007a1200

080034bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c0:	4b02      	ldr	r3, [pc, #8]	; (80034cc <HAL_RCC_GetHCLKFreq+0x10>)
 80034c2:	681b      	ldr	r3, [r3, #0]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr
 80034cc:	20000018 	.word	0x20000018

080034d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034d4:	f7ff fff2 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 80034d8:	4601      	mov	r1, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4a03      	ldr	r2, [pc, #12]	; (80034f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034e6:	5cd3      	ldrb	r3, [r2, r3]
 80034e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	08006afc 	.word	0x08006afc

080034f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034fc:	f7ff ffde 	bl	80034bc <HAL_RCC_GetHCLKFreq>
 8003500:	4601      	mov	r1, r0
 8003502:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	0adb      	lsrs	r3, r3, #11
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	4a03      	ldr	r2, [pc, #12]	; (800351c <HAL_RCC_GetPCLK2Freq+0x24>)
 800350e:	5cd3      	ldrb	r3, [r2, r3]
 8003510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	bd80      	pop	{r7, pc}
 8003518:	40021000 	.word	0x40021000
 800351c:	08006afc 	.word	0x08006afc

08003520 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <RCC_Delay+0x34>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <RCC_Delay+0x38>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a5b      	lsrs	r3, r3, #9
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800353c:	bf00      	nop
  }
  while (Delay --);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	60fa      	str	r2, [r7, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1f9      	bne.n	800353c <RCC_Delay+0x1c>
}
 8003548:	bf00      	nop
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000018 	.word	0x20000018
 8003558:	10624dd3 	.word	0x10624dd3

0800355c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0201 	orr.w	r2, r2, #1
 8003572:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f003 0307 	and.w	r3, r3, #7
 800357e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d007      	beq.n	8003596 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f042 0201 	orr.w	r2, r2, #1
 8003594:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e01d      	b.n	80035f0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f002 fd0b 	bl	8005fe4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f000 fac3 	bl	8003b6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e01d      	b.n	8003646 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f002 fd18 	bl	8006054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fa98 	bl	8003b6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	6839      	ldr	r1, [r7, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f000 fc6c 	bl	8003f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a10      	ldr	r2, [pc, #64]	; (80036b0 <HAL_TIM_PWM_Start+0x60>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d107      	bne.n	8003682 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003680:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b06      	cmp	r3, #6
 8003692:	d007      	beq.n	80036a4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d122      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0302 	and.w	r3, r3, #2
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d11b      	bne.n	8003710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f06f 0202 	mvn.w	r2, #2
 80036e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa1c 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 80036fc:	e005      	b.n	800370a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa0f 	bl	8003b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa1e 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d122      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b04      	cmp	r3, #4
 800372a:	d11b      	bne.n	8003764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0204 	mvn.w	r2, #4
 8003734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9f2 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f9e5 	bl	8003b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f9f4 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b08      	cmp	r3, #8
 8003770:	d122      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b08      	cmp	r3, #8
 800377e:	d11b      	bne.n	80037b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f06f 0208 	mvn.w	r2, #8
 8003788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2204      	movs	r2, #4
 800378e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f003 0303 	and.w	r3, r3, #3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9c8 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 80037a4:	e005      	b.n	80037b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f9bb 	bl	8003b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f9ca 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d122      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d11b      	bne.n	800380c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0210 	mvn.w	r2, #16
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f99e 	bl	8003b34 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f991 	bl	8003b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f9a0 	bl	8003b46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b01      	cmp	r3, #1
 8003818:	d10e      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	f003 0301 	and.w	r3, r3, #1
 8003824:	2b01      	cmp	r3, #1
 8003826:	d107      	bne.n	8003838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f06f 0201 	mvn.w	r2, #1
 8003830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f96c 	bl	8003b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003842:	2b80      	cmp	r3, #128	; 0x80
 8003844:	d10e      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b80      	cmp	r3, #128	; 0x80
 8003852:	d107      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800385c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fbdf 	bl	8004022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b40      	cmp	r3, #64	; 0x40
 8003870:	d10e      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387c:	2b40      	cmp	r3, #64	; 0x40
 800387e:	d107      	bne.n	8003890 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f964 	bl	8003b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	f003 0320 	and.w	r3, r3, #32
 800389a:	2b20      	cmp	r3, #32
 800389c:	d10e      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d107      	bne.n	80038bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f06f 0220 	mvn.w	r2, #32
 80038b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fbaa 	bl	8004010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038bc:	bf00      	nop
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d101      	bne.n	80038de <HAL_TIM_OC_ConfigChannel+0x1a>
 80038da:	2302      	movs	r3, #2
 80038dc:	e04e      	b.n	800397c <HAL_TIM_OC_ConfigChannel+0xb8>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b0c      	cmp	r3, #12
 80038f2:	d839      	bhi.n	8003968 <HAL_TIM_OC_ConfigChannel+0xa4>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_TIM_OC_ConfigChannel+0x38>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003969 	.word	0x08003969
 8003904:	08003969 	.word	0x08003969
 8003908:	08003969 	.word	0x08003969
 800390c:	0800393f 	.word	0x0800393f
 8003910:	08003969 	.word	0x08003969
 8003914:	08003969 	.word	0x08003969
 8003918:	08003969 	.word	0x08003969
 800391c:	0800394d 	.word	0x0800394d
 8003920:	08003969 	.word	0x08003969
 8003924:	08003969 	.word	0x08003969
 8003928:	08003969 	.word	0x08003969
 800392c:	0800395b 	.word	0x0800395b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68b9      	ldr	r1, [r7, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f97a 	bl	8003c30 <TIM_OC1_SetConfig>
      break;
 800393c:	e015      	b.n	800396a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f9d9 	bl	8003cfc <TIM_OC2_SetConfig>
      break;
 800394a:	e00e      	b.n	800396a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fa3c 	bl	8003dd0 <TIM_OC3_SetConfig>
      break;
 8003958:	e007      	b.n	800396a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	4618      	mov	r0, r3
 8003962:	f000 fa9f 	bl	8003ea4 <TIM_OC4_SetConfig>
      break;
 8003966:	e000      	b.n	800396a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8003968:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800399a:	2302      	movs	r3, #2
 800399c:	e0b4      	b.n	8003b08 <HAL_TIM_PWM_ConfigChannel+0x184>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2202      	movs	r2, #2
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	f200 809f 	bhi.w	8003af4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039f1 	.word	0x080039f1
 80039c0:	08003af5 	.word	0x08003af5
 80039c4:	08003af5 	.word	0x08003af5
 80039c8:	08003af5 	.word	0x08003af5
 80039cc:	08003a31 	.word	0x08003a31
 80039d0:	08003af5 	.word	0x08003af5
 80039d4:	08003af5 	.word	0x08003af5
 80039d8:	08003af5 	.word	0x08003af5
 80039dc:	08003a73 	.word	0x08003a73
 80039e0:	08003af5 	.word	0x08003af5
 80039e4:	08003af5 	.word	0x08003af5
 80039e8:	08003af5 	.word	0x08003af5
 80039ec:	08003ab3 	.word	0x08003ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f91a 	bl	8003c30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699a      	ldr	r2, [r3, #24]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0208 	orr.w	r2, r2, #8
 8003a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699a      	ldr	r2, [r3, #24]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6999      	ldr	r1, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	619a      	str	r2, [r3, #24]
      break;
 8003a2e:	e062      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f960 	bl	8003cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	021a      	lsls	r2, r3, #8
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	619a      	str	r2, [r3, #24]
      break;
 8003a70:	e041      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68b9      	ldr	r1, [r7, #8]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f9a9 	bl	8003dd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0208 	orr.w	r2, r2, #8
 8003a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69da      	ldr	r2, [r3, #28]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0204 	bic.w	r2, r2, #4
 8003a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69d9      	ldr	r1, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	61da      	str	r2, [r3, #28]
      break;
 8003ab0:	e021      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 f9f3 	bl	8003ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	61da      	str	r2, [r3, #28]
      break;
 8003af2:	e000      	b.n	8003af6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003af4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr

08003b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b083      	sub	sp, #12
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b2a:	bf00      	nop
 8003b2c:	370c      	adds	r7, #12
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bc80      	pop	{r7}
 8003b32:	4770      	bx	lr

08003b34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bc80      	pop	{r7}
 8003b44:	4770      	bx	lr

08003b46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr

08003b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bc80      	pop	{r7}
 8003b68:	4770      	bx	lr
	...

08003b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a29      	ldr	r2, [pc, #164]	; (8003c24 <TIM_Base_SetConfig+0xb8>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_Base_SetConfig+0x30>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8a:	d007      	beq.n	8003b9c <TIM_Base_SetConfig+0x30>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <TIM_Base_SetConfig+0xbc>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_Base_SetConfig+0x30>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a25      	ldr	r2, [pc, #148]	; (8003c2c <TIM_Base_SetConfig+0xc0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d108      	bne.n	8003bae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <TIM_Base_SetConfig+0xb8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0x62>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <TIM_Base_SetConfig+0xbc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0x62>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <TIM_Base_SetConfig+0xc0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a07      	ldr	r2, [pc, #28]	; (8003c24 <TIM_Base_SetConfig+0xb8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d103      	bne.n	8003c14 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	615a      	str	r2, [r3, #20]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800

08003c30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b087      	sub	sp, #28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	f023 0201 	bic.w	r2, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0303 	bic.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f023 0302 	bic.w	r3, r3, #2
 8003c78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	; (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10c      	bne.n	8003ca6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f023 0308 	bic.w	r3, r3, #8
 8003c92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 0304 	bic.w	r3, r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <TIM_OC1_SetConfig+0xc8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d111      	bne.n	8003cd2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00

08003cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	f023 0210 	bic.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0320 	bic.w	r3, r3, #32
 8003d46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a1d      	ldr	r2, [pc, #116]	; (8003dcc <TIM_OC2_SetConfig+0xd0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10d      	bne.n	8003d78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <TIM_OC2_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d113      	bne.n	8003da8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	40012c00 	.word	0x40012c00

08003dd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f023 0303 	bic.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <TIM_OC3_SetConfig+0xd0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10d      	bne.n	8003e4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a14      	ldr	r2, [pc, #80]	; (8003ea0 <TIM_OC3_SetConfig+0xd0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d113      	bne.n	8003e7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685a      	ldr	r2, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	621a      	str	r2, [r3, #32]
}
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00

08003ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	031b      	lsls	r3, r3, #12
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a0f      	ldr	r2, [pc, #60]	; (8003f3c <TIM_OC4_SetConfig+0x98>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d109      	bne.n	8003f18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	019b      	lsls	r3, r3, #6
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	621a      	str	r2, [r3, #32]
}
 8003f32:	bf00      	nop
 8003f34:	371c      	adds	r7, #28
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bc80      	pop	{r7}
 8003f3a:	4770      	bx	lr
 8003f3c:	40012c00 	.word	0x40012c00

08003f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d101      	bne.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e032      	b.n	8004006 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e03f      	b.n	80040c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f002 f854 	bl	8006108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2224      	movs	r2, #36	; 0x24
 8004064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fc23 	bl	80048c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800408c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695a      	ldr	r2, [r3, #20]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800409c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68da      	ldr	r2, [r3, #12]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	4613      	mov	r3, r2
 80040dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d153      	bne.n	8004192 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <HAL_UART_Transmit_DMA+0x26>
 80040f0:	88fb      	ldrh	r3, [r7, #6]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e04c      	b.n	8004194 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_UART_Transmit_DMA+0x38>
 8004104:	2302      	movs	r3, #2
 8004106:	e045      	b.n	8004194 <HAL_UART_Transmit_DMA+0xc4>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	88fa      	ldrh	r2, [r7, #6]
 800411a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2221      	movs	r2, #33	; 0x21
 800412c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4a19      	ldr	r2, [pc, #100]	; (800419c <HAL_UART_Transmit_DMA+0xcc>)
 8004136:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_UART_Transmit_DMA+0xd0>)
 800413e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004144:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <HAL_UART_Transmit_DMA+0xd4>)
 8004146:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	2200      	movs	r2, #0
 800414e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6819      	ldr	r1, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3304      	adds	r3, #4
 8004164:	461a      	mov	r2, r3
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	f7fd f9a6 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004174:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800418c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3718      	adds	r7, #24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	080044d7 	.word	0x080044d7
 80041a0:	08004529 	.word	0x08004529
 80041a4:	080045c9 	.word	0x080045c9

080041a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d166      	bne.n	8004290 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <HAL_UART_Receive_DMA+0x26>
 80041c8:	88fb      	ldrh	r3, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e05f      	b.n	8004292 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_UART_Receive_DMA+0x38>
 80041dc:	2302      	movs	r3, #2
 80041de:	e058      	b.n	8004292 <HAL_UART_Receive_DMA+0xea>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	88fa      	ldrh	r2, [r7, #6]
 80041f2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2222      	movs	r2, #34	; 0x22
 80041fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	4a25      	ldr	r2, [pc, #148]	; (800429c <HAL_UART_Receive_DMA+0xf4>)
 8004208:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_UART_Receive_DMA+0xf8>)
 8004210:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004216:	4a23      	ldr	r2, [pc, #140]	; (80042a4 <HAL_UART_Receive_DMA+0xfc>)
 8004218:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	2200      	movs	r2, #0
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3304      	adds	r3, #4
 8004232:	4619      	mov	r1, r3
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	f7fd f93d 	bl	80014b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	613b      	str	r3, [r7, #16]
 8004252:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800426a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800428a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800428c:	2300      	movs	r3, #0
 800428e:	e000      	b.n	8004292 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004290:	2302      	movs	r3, #2
  }
}
 8004292:	4618      	mov	r0, r3
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	08004545 	.word	0x08004545
 80042a0:	080045ad 	.word	0x080045ad
 80042a4:	080045c9 	.word	0x080045c9

080042a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f003 030f 	and.w	r3, r3, #15
 80042d6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10d      	bne.n	80042fa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d008      	beq.n	80042fa <HAL_UART_IRQHandler+0x52>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fa65 	bl	80047c2 <UART_Receive_IT>
      return;
 80042f8:	e0cc      	b.n	8004494 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80ab 	beq.w	8004458 <HAL_UART_IRQHandler+0x1b0>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d105      	bne.n	8004318 <HAL_UART_IRQHandler+0x70>
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80a0 	beq.w	8004458 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_UART_IRQHandler+0x90>
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_UART_IRQHandler+0xb0>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d005      	beq.n	8004358 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	f043 0202 	orr.w	r2, r3, #2
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_UART_IRQHandler+0xd0>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	f043 0204 	orr.w	r2, r3, #4
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	f003 0308 	and.w	r3, r3, #8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_UART_IRQHandler+0xf0>
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	f043 0208 	orr.w	r2, r3, #8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d078      	beq.n	8004492 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d007      	beq.n	80043ba <HAL_UART_IRQHandler+0x112>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	f003 0320 	and.w	r3, r3, #32
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fa04 	bl	80047c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d102      	bne.n	80043e2 <HAL_UART_IRQHandler+0x13a>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d031      	beq.n	8004446 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f94f 	bl	8004686 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d023      	beq.n	800443e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004404:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800440a:	2b00      	cmp	r3, #0
 800440c:	d013      	beq.n	8004436 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004412:	4a22      	ldr	r2, [pc, #136]	; (800449c <HAL_UART_IRQHandler+0x1f4>)
 8004414:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd f8ac 	bl	8001578 <HAL_DMA_Abort_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004430:	4610      	mov	r0, r2
 8004432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004434:	e00e      	b.n	8004454 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 f844 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443c:	e00a      	b.n	8004454 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f840 	bl	80044c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004444:	e006      	b.n	8004454 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f83c 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004452:	e01e      	b.n	8004492 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	bf00      	nop
    return;
 8004456:	e01c      	b.n	8004492 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_UART_IRQHandler+0x1cc>
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f93b 	bl	80046e8 <UART_Transmit_IT>
    return;
 8004472:	e00f      	b.n	8004494 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_UART_IRQHandler+0x1ec>
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f982 	bl	8004792 <UART_EndTransmit_IT>
    return;
 800448e:	bf00      	nop
 8004490:	e000      	b.n	8004494 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004492:	bf00      	nop
  }
}
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	080046c1 	.word	0x080046c1

080044a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bc80      	pop	{r7}
 80044b0:	4770      	bx	lr

080044b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80044ba:	bf00      	nop
 80044bc:	370c      	adds	r7, #12
 80044be:	46bd      	mov	sp, r7
 80044c0:	bc80      	pop	{r7}
 80044c2:	4770      	bx	lr

080044c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bc80      	pop	{r7}
 80044d4:	4770      	bx	lr

080044d6 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d113      	bne.n	800451a <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004506:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004516:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004518:	e002      	b.n	8004520 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f001 f8e2 	bl	80056e4 <HAL_UART_TxCpltCallback>
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f7ff ffb2 	bl	80044a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11e      	bne.n	800459e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004574:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0201 	bic.w	r2, r2, #1
 8004584:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695a      	ldr	r2, [r3, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004594:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f001 f8aa 	bl	80056f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045a4:	bf00      	nop
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f7ff ff79 	bl	80044b2 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	bf14      	ite	ne
 80045e8:	2301      	movne	r3, #1
 80045ea:	2300      	moveq	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b21      	cmp	r3, #33	; 0x21
 80045fa:	d108      	bne.n	800460e <UART_DMAError+0x46>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2200      	movs	r2, #0
 8004606:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004608:	68b8      	ldr	r0, [r7, #8]
 800460a:	f000 f827 	bl	800465c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b22      	cmp	r3, #34	; 0x22
 800462e:	d108      	bne.n	8004642 <UART_DMAError+0x7a>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800463c:	68b8      	ldr	r0, [r7, #8]
 800463e:	f000 f822 	bl	8004686 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004646:	f043 0210 	orr.w	r2, r3, #16
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800464e:	68b8      	ldr	r0, [r7, #8]
 8004650:	f7ff ff38 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004672:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004686:	b480      	push	{r7}
 8004688:	b083      	sub	sp, #12
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800469c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695a      	ldr	r2, [r3, #20]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0201 	bic.w	r2, r2, #1
 80046ac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff fef2 	bl	80044c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b21      	cmp	r3, #33	; 0x21
 80046fa:	d144      	bne.n	8004786 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d11a      	bne.n	800473c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	461a      	mov	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800471a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d105      	bne.n	8004730 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	1c9a      	adds	r2, r3, #2
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	621a      	str	r2, [r3, #32]
 800472e:	e00e      	b.n	800474e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	621a      	str	r2, [r3, #32]
 800473a:	e008      	b.n	800474e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	1c59      	adds	r1, r3, #1
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6211      	str	r1, [r2, #32]
 8004746:	781a      	ldrb	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004752:	b29b      	uxth	r3, r3
 8004754:	3b01      	subs	r3, #1
 8004756:	b29b      	uxth	r3, r3
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	4619      	mov	r1, r3
 800475c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10f      	bne.n	8004782 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004770:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004780:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 ff96 	bl	80056e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	d171      	bne.n	80048ba <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d123      	bne.n	8004828 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e4:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10e      	bne.n	800480c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004804:	1c9a      	adds	r2, r3, #2
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	629a      	str	r2, [r3, #40]	; 0x28
 800480a:	e029      	b.n	8004860 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	b29b      	uxth	r3, r3
 8004814:	b2db      	uxtb	r3, r3
 8004816:	b29a      	uxth	r2, r3
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
 8004826:	e01b      	b.n	8004860 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6858      	ldr	r0, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6291      	str	r1, [r2, #40]	; 0x28
 8004840:	b2c2      	uxtb	r2, r0
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e00c      	b.n	8004860 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	1c58      	adds	r0, r3, #1
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	6288      	str	r0, [r1, #40]	; 0x28
 8004858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004864:	b29b      	uxth	r3, r3
 8004866:	3b01      	subs	r3, #1
 8004868:	b29b      	uxth	r3, r3
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	4619      	mov	r1, r3
 800486e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004870:	2b00      	cmp	r3, #0
 8004872:	d120      	bne.n	80048b6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f022 0220 	bic.w	r2, r2, #32
 8004882:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004892:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	695a      	ldr	r2, [r3, #20]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f000 ff23 	bl	80056f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80048b2:	2300      	movs	r3, #0
 80048b4:	e002      	b.n	80048bc <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80048b6:	2300      	movs	r3, #0
 80048b8:	e000      	b.n	80048bc <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048fe:	f023 030c 	bic.w	r3, r3, #12
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	430b      	orrs	r3, r1
 800490a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <UART_SetConfig+0x1ac>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d14e      	bne.n	80049ca <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800492c:	f7fe fde4 	bl	80034f8 <HAL_RCC_GetPCLK2Freq>
 8004930:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004932:	68ba      	ldr	r2, [r7, #8]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009a      	lsls	r2, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	4a4a      	ldr	r2, [pc, #296]	; (8004a74 <UART_SetConfig+0x1b0>)
 800494a:	fba2 2303 	umull	r2, r3, r2, r3
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	0119      	lsls	r1, r3, #4
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009a      	lsls	r2, r3, #2
 800495c:	441a      	add	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	fbb2 f2f3 	udiv	r2, r2, r3
 8004968:	4b42      	ldr	r3, [pc, #264]	; (8004a74 <UART_SetConfig+0x1b0>)
 800496a:	fba3 0302 	umull	r0, r3, r3, r2
 800496e:	095b      	lsrs	r3, r3, #5
 8004970:	2064      	movs	r0, #100	; 0x64
 8004972:	fb00 f303 	mul.w	r3, r0, r3
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	3332      	adds	r3, #50	; 0x32
 800497c:	4a3d      	ldr	r2, [pc, #244]	; (8004a74 <UART_SetConfig+0x1b0>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	095b      	lsrs	r3, r3, #5
 8004984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004988:	4419      	add	r1, r3
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009a      	lsls	r2, r3, #2
 8004994:	441a      	add	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a0:	4b34      	ldr	r3, [pc, #208]	; (8004a74 <UART_SetConfig+0x1b0>)
 80049a2:	fba3 0302 	umull	r0, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2064      	movs	r0, #100	; 0x64
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	3332      	adds	r3, #50	; 0x32
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <UART_SetConfig+0x1b0>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 020f 	and.w	r2, r3, #15
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	440a      	add	r2, r1
 80049c6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80049c8:	e04d      	b.n	8004a66 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fe fd81 	bl	80034d0 <HAL_RCC_GetPCLK1Freq>
 80049ce:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009a      	lsls	r2, r3, #2
 80049da:	441a      	add	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e6:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <UART_SetConfig+0x1b0>)
 80049e8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	0119      	lsls	r1, r3, #4
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	4613      	mov	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	009a      	lsls	r2, r3, #2
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a06:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <UART_SetConfig+0x1b0>)
 8004a08:	fba3 0302 	umull	r0, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2064      	movs	r0, #100	; 0x64
 8004a10:	fb00 f303 	mul.w	r3, r0, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <UART_SetConfig+0x1b0>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a26:	4419      	add	r1, r3
 8004a28:	68ba      	ldr	r2, [r7, #8]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4413      	add	r3, r2
 8004a30:	009a      	lsls	r2, r3, #2
 8004a32:	441a      	add	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <UART_SetConfig+0x1b0>)
 8004a40:	fba3 0302 	umull	r0, r3, r3, r2
 8004a44:	095b      	lsrs	r3, r3, #5
 8004a46:	2064      	movs	r0, #100	; 0x64
 8004a48:	fb00 f303 	mul.w	r3, r0, r3
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	3332      	adds	r3, #50	; 0x32
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <UART_SetConfig+0x1b0>)
 8004a54:	fba2 2303 	umull	r2, r3, r2, r3
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	f003 020f 	and.w	r2, r3, #15
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	440a      	add	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40013800 	.word	0x40013800
 8004a74:	51eb851f 	.word	0x51eb851f

08004a78 <COMM_parse_cmd>:
#include "main.h"
#include "comm.h"



void COMM_parse_cmd(void){
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
	//HAL_UART_Transmit(&huart1,msg,4, 4);
	//HAL_UART_Transmit_DMA(&huart1,buffer_tx,10);


	FLOATUINT_t cmd[4];
	for (int i=0;i<4;i++){
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e01b      	b.n	8004abc <COMM_parse_cmd+0x44>
		for (int j=0;j<4;j++){
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	e012      	b.n	8004ab0 <COMM_parse_cmd+0x38>
			cmd[i].bytes[j] = buffer_rx[i*4+j];
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	4a14      	ldr	r2, [pc, #80]	; (8004ae4 <COMM_parse_cmd+0x6c>)
 8004a94:	5cd1      	ldrb	r1, [r2, r3]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	f107 0218 	add.w	r2, r7, #24
 8004a9e:	441a      	add	r2, r3
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3b18      	subs	r3, #24
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]
		for (int j=0;j<4;j++){
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	3301      	adds	r3, #1
 8004aae:	613b      	str	r3, [r7, #16]
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b03      	cmp	r3, #3
 8004ab4:	dde9      	ble.n	8004a8a <COMM_parse_cmd+0x12>
	for (int i=0;i<4;i++){
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	dde0      	ble.n	8004a84 <COMM_parse_cmd+0xc>
		}
	}

	RPYA_SP[0] = cmd[0].number;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <COMM_parse_cmd+0x70>)
 8004ac6:	6013      	str	r3, [r2, #0]
	RPYA_SP[1] = cmd[1].number;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <COMM_parse_cmd+0x70>)
 8004acc:	6053      	str	r3, [r2, #4]
	RPYA_SP[2] = cmd[2].number;
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4a05      	ldr	r2, [pc, #20]	; (8004ae8 <COMM_parse_cmd+0x70>)
 8004ad2:	6093      	str	r3, [r2, #8]
	RPYA_SP[3] = cmd[3].number;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a04      	ldr	r2, [pc, #16]	; (8004ae8 <COMM_parse_cmd+0x70>)
 8004ad8:	60d3      	str	r3, [r2, #12]
}
 8004ada:	bf00      	nop
 8004adc:	371c      	adds	r7, #28
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bc80      	pop	{r7}
 8004ae2:	4770      	bx	lr
 8004ae4:	20001264 	.word	0x20001264
 8004ae8:	20001284 	.word	0x20001284

08004aec <COMM_send_states>:

void COMM_send_states(void){
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0

	// ADD ALTITUDE!

	// Send roll pitch and yaw
	for (int i=0;i<4;i++){
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
 8004af6:	e01a      	b.n	8004b2e <COMM_send_states+0x42>
	  FLOATUINT_t rpy_bytes;
	  rpy_bytes.number = RPYA[i];
 8004af8:	4a11      	ldr	r2, [pc, #68]	; (8004b40 <COMM_send_states+0x54>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b00:	607b      	str	r3, [r7, #4]
	  for (int j=0;j<4;j++){
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	e00c      	b.n	8004b22 <COMM_send_states+0x36>
		  buffer_tx[j+i*4]= rpy_bytes.bytes[j];
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4413      	add	r3, r2
 8004b10:	1d39      	adds	r1, r7, #4
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	440a      	add	r2, r1
 8004b16:	7811      	ldrb	r1, [r2, #0]
 8004b18:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <COMM_send_states+0x58>)
 8004b1a:	54d1      	strb	r1, [r2, r3]
	  for (int j=0;j<4;j++){
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	ddef      	ble.n	8004b08 <COMM_send_states+0x1c>
	for (int i=0;i<4;i++){
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	dde1      	ble.n	8004af8 <COMM_send_states+0xc>
	  }
	}
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20001298 	.word	0x20001298
 8004b44:	20001274 	.word	0x20001274

08004b48 <COMP_FILT_update>:
 * when the clock runs at 72MHz. 140 us of it is due to 2x atan2 calculation.
 * In order to improve performance a lookup table and interpolation technique
 * is used
 */

void COMP_FILT_update(COMP_FILT* DataStruct) {
 8004b48:	b5b0      	push	{r4, r5, r7, lr}
 8004b4a:	b08c      	sub	sp, #48	; 0x30
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
	float accX = lowpass_filt((float)imu[0],0, &acc_filt);
	float accY = lowpass_filt((float)imu[1],1, &acc_filt);
	float accZ = lowpass_filt((float)imu[2],2, &acc_filt);
	*/

	float accX = (float)IMU[0];
 8004b50:	4b77      	ldr	r3, [pc, #476]	; (8004d30 <COMP_FILT_update+0x1e8>)
 8004b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc f882 	bl	8000c60 <__aeabi_i2f>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	float accY = (float)IMU[1];
 8004b60:	4b73      	ldr	r3, [pc, #460]	; (8004d30 <COMP_FILT_update+0x1e8>)
 8004b62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc f87a 	bl	8000c60 <__aeabi_i2f>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	62bb      	str	r3, [r7, #40]	; 0x28
	float accZ = (float)IMU[2];
 8004b70:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <COMP_FILT_update+0x1e8>)
 8004b72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc f872 	bl	8000c60 <__aeabi_i2f>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24


	float acc_roll = atan2(accY,accZ);
 8004b80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b82:	f7fb fc49 	bl	8000418 <__aeabi_f2d>
 8004b86:	4604      	mov	r4, r0
 8004b88:	460d      	mov	r5, r1
 8004b8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b8c:	f7fb fc44 	bl	8000418 <__aeabi_f2d>
 8004b90:	4602      	mov	r2, r0
 8004b92:	460b      	mov	r3, r1
 8004b94:	4620      	mov	r0, r4
 8004b96:	4629      	mov	r1, r5
 8004b98:	f001 fd1e 	bl	80065d8 <atan2>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	460c      	mov	r4, r1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	f7fb ff52 	bl	8000a4c <__aeabi_d2f>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	623b      	str	r3, [r7, #32]
	float acc_pitch = atan2(-accX,accZ);
 8004bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fb fc30 	bl	8000418 <__aeabi_f2d>
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bbe:	f7fb fc2b 	bl	8000418 <__aeabi_f2d>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	f001 fd05 	bl	80065d8 <atan2>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	f7fb ff39 	bl	8000a4c <__aeabi_d2f>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	61fb      	str	r3, [r7, #28]
	float gyroX = highpass_filt((float)imu[3]* RAW_GYRO_TO_RAD,0, &gyro_filt);
	float gyroY = highpass_filt((float)imu[4]* RAW_GYRO_TO_RAD,1, &gyro_filt);
	float gyroZ = highpass_filt((float)imu[5]* RAW_GYRO_TO_RAD,2, &gyro_filt);
	*/

	float gyroX = (float)IMU[3]* RAW_GYRO_TO_RAD;
 8004bde:	4b54      	ldr	r3, [pc, #336]	; (8004d30 <COMP_FILT_update+0x1e8>)
 8004be0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fc f83b 	bl	8000c60 <__aeabi_i2f>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fb fc13 	bl	8000418 <__aeabi_f2d>
 8004bf2:	a349      	add	r3, pc, #292	; (adr r3, 8004d18 <COMP_FILT_update+0x1d0>)
 8004bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf8:	f7fb fc66 	bl	80004c8 <__aeabi_dmul>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	4618      	mov	r0, r3
 8004c02:	4621      	mov	r1, r4
 8004c04:	f7fb ff22 	bl	8000a4c <__aeabi_d2f>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	61bb      	str	r3, [r7, #24]
	float gyroY = (float)IMU[4]* RAW_GYRO_TO_RAD;
 8004c0c:	4b48      	ldr	r3, [pc, #288]	; (8004d30 <COMP_FILT_update+0x1e8>)
 8004c0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc f824 	bl	8000c60 <__aeabi_i2f>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fb fbfc 	bl	8000418 <__aeabi_f2d>
 8004c20:	a33d      	add	r3, pc, #244	; (adr r3, 8004d18 <COMP_FILT_update+0x1d0>)
 8004c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c26:	f7fb fc4f 	bl	80004c8 <__aeabi_dmul>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	4621      	mov	r1, r4
 8004c32:	f7fb ff0b 	bl	8000a4c <__aeabi_d2f>
 8004c36:	4603      	mov	r3, r0
 8004c38:	617b      	str	r3, [r7, #20]
	//float gyroZ = (float)IMU[5]* RAW_GYRO_TO_RAD;


	float roll = acc_roll * ACC_GAIN + (gyroX * Ts + RPYA[0]) * GYRO_GAIN;
 8004c3a:	6a38      	ldr	r0, [r7, #32]
 8004c3c:	f7fb fbec 	bl	8000418 <__aeabi_f2d>
 8004c40:	a337      	add	r3, pc, #220	; (adr r3, 8004d20 <COMP_FILT_update+0x1d8>)
 8004c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c46:	f7fb fc3f 	bl	80004c8 <__aeabi_dmul>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	4625      	mov	r5, r4
 8004c50:	461c      	mov	r4, r3
 8004c52:	4938      	ldr	r1, [pc, #224]	; (8004d34 <COMP_FILT_update+0x1ec>)
 8004c54:	69b8      	ldr	r0, [r7, #24]
 8004c56:	f7fc f90b 	bl	8000e70 <__aeabi_fdiv>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <COMP_FILT_update+0x1f0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	4610      	mov	r0, r2
 8004c66:	f7fb ff47 	bl	8000af8 <__addsf3>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f7fb fbd3 	bl	8000418 <__aeabi_f2d>
 8004c72:	a32d      	add	r3, pc, #180	; (adr r3, 8004d28 <COMP_FILT_update+0x1e0>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fc26 	bl	80004c8 <__aeabi_dmul>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4620      	mov	r0, r4
 8004c82:	4629      	mov	r1, r5
 8004c84:	f7fb fa6a 	bl	800015c <__adddf3>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	4621      	mov	r1, r4
 8004c90:	f7fb fedc 	bl	8000a4c <__aeabi_d2f>
 8004c94:	4603      	mov	r3, r0
 8004c96:	613b      	str	r3, [r7, #16]
	float pitch = acc_pitch * ACC_GAIN + (gyroY * Ts + RPYA[1]) * GYRO_GAIN;
 8004c98:	69f8      	ldr	r0, [r7, #28]
 8004c9a:	f7fb fbbd 	bl	8000418 <__aeabi_f2d>
 8004c9e:	a320      	add	r3, pc, #128	; (adr r3, 8004d20 <COMP_FILT_update+0x1d8>)
 8004ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca4:	f7fb fc10 	bl	80004c8 <__aeabi_dmul>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	4625      	mov	r5, r4
 8004cae:	461c      	mov	r4, r3
 8004cb0:	4920      	ldr	r1, [pc, #128]	; (8004d34 <COMP_FILT_update+0x1ec>)
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f7fc f8dc 	bl	8000e70 <__aeabi_fdiv>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461a      	mov	r2, r3
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <COMP_FILT_update+0x1f0>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4610      	mov	r0, r2
 8004cc4:	f7fb ff18 	bl	8000af8 <__addsf3>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fb fba4 	bl	8000418 <__aeabi_f2d>
 8004cd0:	a315      	add	r3, pc, #84	; (adr r3, 8004d28 <COMP_FILT_update+0x1e0>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f7fb fbf7 	bl	80004c8 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4620      	mov	r0, r4
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	f7fb fa3b 	bl	800015c <__adddf3>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	460c      	mov	r4, r1
 8004cea:	4618      	mov	r0, r3
 8004cec:	4621      	mov	r1, r4
 8004cee:	f7fb fead 	bl	8000a4c <__aeabi_d2f>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	60fb      	str	r3, [r7, #12]

	RPYA[0] = roll;
 8004cf6:	4a10      	ldr	r2, [pc, #64]	; (8004d38 <COMP_FILT_update+0x1f0>)
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6013      	str	r3, [r2, #0]
	RPYA[1] = pitch;
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <COMP_FILT_update+0x1f0>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6053      	str	r3, [r2, #4]
	RPYA[2] = 0.0;
 8004d02:	4b0d      	ldr	r3, [pc, #52]	; (8004d38 <COMP_FILT_update+0x1f0>)
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]

}
 8004d0a:	bf00      	nop
 8004d0c:	3730      	adds	r7, #48	; 0x30
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bdb0      	pop	{r4, r5, r7, pc}
 8004d12:	bf00      	nop
 8004d14:	f3af 8000 	nop.w
 8004d18:	d3e96051 	.word	0xd3e96051
 8004d1c:	3f51749d 	.word	0x3f51749d
 8004d20:	47ae1480 	.word	0x47ae1480
 8004d24:	3f847ae1 	.word	0x3f847ae1
 8004d28:	7ae147ae 	.word	0x7ae147ae
 8004d2c:	3fefae14 	.word	0x3fefae14
 8004d30:	20001254 	.word	0x20001254
 8004d34:	43fa0000 	.word	0x43fa0000
 8004d38:	20001298 	.word	0x20001298

08004d3c <filt_init>:

void filt_init(FILT* filt){
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	for (int i =0;i<3;i++){
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e010      	b.n	8004d6c <filt_init+0x30>
		filt->wz0[i]=0;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	f04f 0100 	mov.w	r1, #0
 8004d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		filt->wz1[i]=0;
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	605a      	str	r2, [r3, #4]
	for (int i =0;i<3;i++){
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	ddeb      	ble.n	8004d4a <filt_init+0xe>
	}
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bc80      	pop	{r7}
 8004d7a:	4770      	bx	lr
 8004d7c:	0000      	movs	r0, r0
	...

08004d80 <atan_lookup_init>:
	  gyro_filt->wz1[i] = GYRO_b2 * x - GYRO_a2 * y;
	  return y;
}


void atan_lookup_init(int xMin, int xMax, int yMin, int yMax, int delta){
 8004d80:	b5b0      	push	{r4, r5, r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
	for (int x=0;x<LEN_X;x++){
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	e03d      	b.n	8004e10 <atan_lookup_init+0x90>
		for (int y=0;y<LEN_Y;y++){
 8004d94:	2300      	movs	r3, #0
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	e034      	b.n	8004e04 <atan_lookup_init+0x84>
			atan_table[x*LEN_X+y] = atan2(xMin + x*delta, yMin + y*delta)*floatPiToInt16;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9e:	fb02 f203 	mul.w	r2, r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fb fb24 	bl	80003f4 <__aeabi_i2d>
 8004dac:	4604      	mov	r4, r0
 8004dae:	460d      	mov	r5, r1
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db4:	fb02 f203 	mul.w	r2, r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4413      	add	r3, r2
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fb fb19 	bl	80003f4 <__aeabi_i2d>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f001 fc05 	bl	80065d8 <atan2>
 8004dce:	a314      	add	r3, pc, #80	; (adr r3, 8004e20 <atan_lookup_init+0xa0>)
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f7fb fb78 	bl	80004c8 <__aeabi_dmul>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	4618      	mov	r0, r3
 8004dde:	4621      	mov	r1, r4
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	461a      	mov	r2, r3
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	18d4      	adds	r4, r2, r3
 8004df0:	f7fb fe04 	bl	80009fc <__aeabi_d2iz>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b21a      	sxth	r2, r3
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <atan_lookup_init+0xa8>)
 8004dfa:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (int y=0;y<LEN_Y;y++){
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	3301      	adds	r3, #1
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b2f      	cmp	r3, #47	; 0x2f
 8004e08:	ddc7      	ble.n	8004d9a <atan_lookup_init+0x1a>
	for (int x=0;x<LEN_X;x++){
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b2f      	cmp	r3, #47	; 0x2f
 8004e14:	ddbe      	ble.n	8004d94 <atan_lookup_init+0x14>
		}
	}
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	624dd2f2 	.word	0x624dd2f2
 8004e24:	40c45f30 	.word	0x40c45f30
 8004e28:	20000038 	.word	0x20000038

08004e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08a      	sub	sp, #40	; 0x28
 8004e30:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e32:	f7fc f955 	bl	80010e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e36:	f000 f969 	bl	800510c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e3a:	f000 fb8b 	bl	8005554 <MX_GPIO_Init>
  MX_DMA_Init();
 8004e3e:	f000 fb53 	bl	80054e8 <MX_DMA_Init>
  MX_I2C2_Init();
 8004e42:	f000 f9a9 	bl	8005198 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004e46:	f000 fafb 	bl	8005440 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8004e4a:	f000 fa7f 	bl	800534c <MX_TIM4_Init>
  MX_TIM3_Init();
 8004e4e:	f000 fa27 	bl	80052a0 <MX_TIM3_Init>
  MX_TIM2_Init();
 8004e52:	f000 f9cf 	bl	80051f4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004e56:	f000 fb1d 	bl	8005494 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ///////////////////////

  // Start timers
  HAL_TIM_Base_Start_IT(&htim4);	// PWM timer
 8004e5a:	4899      	ldr	r0, [pc, #612]	; (80050c0 <main+0x294>)
 8004e5c:	f7fe fb7e 	bl	800355c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);	// Main loop timer
 8004e60:	4898      	ldr	r0, [pc, #608]	; (80050c4 <main+0x298>)
 8004e62:	f7fe fb7b 	bl	800355c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);	// Proximity sensor
 8004e66:	4898      	ldr	r0, [pc, #608]	; (80050c8 <main+0x29c>)
 8004e68:	f7fe fb78 	bl	800355c <HAL_TIM_Base_Start_IT>

  // Indicates when the main loop should be executed.
  main_loop_trigger = 1;
 8004e6c:	4b97      	ldr	r3, [pc, #604]	; (80050cc <main+0x2a0>)
 8004e6e:	2201      	movs	r2, #1
 8004e70:	601a      	str	r2, [r3, #0]

  // Initialize pwm outputs and set it to 1ms period
  pwm_init();
 8004e72:	f000 fbfd 	bl	8005670 <pwm_init>

  // Wait for the motors to recognize the signal
  HAL_Delay(1000);
 8004e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e7a:	f7fc f993 	bl	80011a4 <HAL_Delay>

  // init pid
  pid_init();
 8004e7e:	f000 fdcf 	bl	8005a20 <pid_init>

  // Reset leds
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004e82:	2201      	movs	r2, #1
 8004e84:	2110      	movs	r1, #16
 8004e86:	4892      	ldr	r0, [pc, #584]	; (80050d0 <main+0x2a4>)
 8004e88:	f7fc fe7a 	bl	8001b80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	2108      	movs	r1, #8
 8004e90:	488f      	ldr	r0, [pc, #572]	; (80050d0 <main+0x2a4>)
 8004e92:	f7fc fe75 	bl	8001b80 <HAL_GPIO_WritePin>

  // setup the mpu6050
  int result = MPU6050_Init(&hi2c2);
 8004e96:	488f      	ldr	r0, [pc, #572]	; (80050d4 <main+0x2a8>)
 8004e98:	f000 fc64 	bl	8005764 <MPU6050_Init>
 8004e9c:	6178      	str	r0, [r7, #20]
  HAL_Delay(500);
 8004e9e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ea2:	f7fc f97f 	bl	80011a4 <HAL_Delay>
  if(result == 1){
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d013      	beq.n	8004ed4 <main+0xa8>
	  //debugPrintStr("mpu6050 ok \n");
  }
  else {
	  //debugPrintStr("mpu6050 error \n");
		  for (int i = 0;i<result*2;i++){
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
 8004eb0:	e00a      	b.n	8004ec8 <main+0x9c>
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8004eb2:	2110      	movs	r1, #16
 8004eb4:	4886      	ldr	r0, [pc, #536]	; (80050d0 <main+0x2a4>)
 8004eb6:	f7fc fe7b 	bl	8001bb0 <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8004eba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ebe:	f7fc f971 	bl	80011a4 <HAL_Delay>
		  for (int i = 0;i<result*2;i++){
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	dbef      	blt.n	8004eb2 <main+0x86>
		  }
		  while(1);
 8004ed2:	e7fe      	b.n	8004ed2 <main+0xa6>
  }

  // precalculate atan lookup table
  atan_lookup_init(X_MIN, X_MAX, Y_MIN, Y_MAX ,RES_LOOKUP);
 8004ed4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	f644 63b0 	movw	r3, #20144	; 0x4eb0
 8004ede:	f641 62b0 	movw	r2, #7856	; 0x1eb0
 8004ee2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7ff ff4a 	bl	8004d80 <atan_lookup_init>

  HAL_UART_Receive_DMA(&huart2,buffer_rx,16);
 8004eec:	2210      	movs	r2, #16
 8004eee:	497a      	ldr	r1, [pc, #488]	; (80050d8 <main+0x2ac>)
 8004ef0:	487a      	ldr	r0, [pc, #488]	; (80050dc <main+0x2b0>)
 8004ef2:	f7ff f959 	bl	80041a8 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  // Blink green LED 5 times to indicate that setup was successful
  for (int i=0;i<6;i++){
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e00a      	b.n	8004f12 <main+0xe6>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004efc:	2108      	movs	r1, #8
 8004efe:	4874      	ldr	r0, [pc, #464]	; (80050d0 <main+0x2a4>)
 8004f00:	f7fc fe56 	bl	8001bb0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8004f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f08:	f7fc f94c 	bl	80011a4 <HAL_Delay>
  for (int i=0;i<6;i++){
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b05      	cmp	r3, #5
 8004f16:	ddf1      	ble.n	8004efc <main+0xd0>
  }

  TIM4->CCR1 = 25000;
 8004f18:	4b71      	ldr	r3, [pc, #452]	; (80050e0 <main+0x2b4>)
 8004f1a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004f1e:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 25000;
 8004f20:	4b6f      	ldr	r3, [pc, #444]	; (80050e0 <main+0x2b4>)
 8004f22:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR3 = 25000;
 8004f28:	4b6d      	ldr	r3, [pc, #436]	; (80050e0 <main+0x2b4>)
 8004f2a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM4->CCR4 = 25000;
 8004f30:	4b6b      	ldr	r3, [pc, #428]	; (80050e0 <main+0x2b4>)
 8004f32:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_Delay(1000);
 8004f38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f3c:	f7fc f932 	bl	80011a4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_8, GPIO_PIN_RESET);
  prox_status = 1;
  */


  filt_init(&acc_filt);
 8004f40:	4868      	ldr	r0, [pc, #416]	; (80050e4 <main+0x2b8>)
 8004f42:	f7ff fefb 	bl	8004d3c <filt_init>
  filt_init(&gyro_filt);
 8004f46:	4868      	ldr	r0, [pc, #416]	; (80050e8 <main+0x2bc>)
 8004f48:	f7ff fef8 	bl	8004d3c <filt_init>
// x positive - ESC connector
// y positive - usb connector
// z positive - down (SwD pins)

	  // Execute at 500Hz
	  if(main_loop_trigger == 1){
 8004f4c:	4b5f      	ldr	r3, [pc, #380]	; (80050cc <main+0x2a0>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d1fb      	bne.n	8004f4c <main+0x120>

		  // wait for interrupt
		  main_loop_trigger = 0;
 8004f54:	4b5d      	ldr	r3, [pc, #372]	; (80050cc <main+0x2a0>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

		  // Every 10 loops (at 50Hz) start the proximity sensor
		  if(main_loop_counter == 10){
 8004f5a:	4b64      	ldr	r3, [pc, #400]	; (80050ec <main+0x2c0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b0a      	cmp	r3, #10
 8004f60:	d10c      	bne.n	8004f7c <main+0x150>
			  // Set trigger pin high.
			  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_11, GPIO_PIN_SET);
 8004f62:	2201      	movs	r2, #1
 8004f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004f68:	4861      	ldr	r0, [pc, #388]	; (80050f0 <main+0x2c4>)
 8004f6a:	f7fc fe09 	bl	8001b80 <HAL_GPIO_WritePin>
			  // TEST
			  //char msg[]={'a','b'};
			  //HAL_UART_Transmit(&huart2, (uint8_t *)msg, 2, 1);

			  //COMM_send_rawSens(); 	// Send raw sensor readings
			  	COMM_send_states(); 		// Send roll pitch yaw, altitude
 8004f6e:	f7ff fdbd 	bl	8004aec <COMM_send_states>

			  	// Send data
			  	HAL_UART_Transmit_DMA(&huart2,buffer_tx,12);
 8004f72:	220c      	movs	r2, #12
 8004f74:	495f      	ldr	r1, [pc, #380]	; (80050f4 <main+0x2c8>)
 8004f76:	4859      	ldr	r0, [pc, #356]	; (80050dc <main+0x2b0>)
 8004f78:	f7ff f8aa 	bl	80040d0 <HAL_UART_Transmit_DMA>


		  }

		  // Set pin high (used to time the main loop with scope
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2101      	movs	r1, #1
 8004f80:	485b      	ldr	r0, [pc, #364]	; (80050f0 <main+0x2c4>)
 8004f82:	f7fc fdfd 	bl	8001b80 <HAL_GPIO_WritePin>

		  // Read IMU
		  MPU6050_ReadAccelerometer(&hi2c2);
 8004f86:	4853      	ldr	r0, [pc, #332]	; (80050d4 <main+0x2a8>)
 8004f88:	f000 fc84 	bl	8005894 <MPU6050_ReadAccelerometer>
		  MPU6050_ReadGyroscope(&hi2c2);
 8004f8c:	4851      	ldr	r0, [pc, #324]	; (80050d4 <main+0x2a8>)
 8004f8e:	f000 fce3 	bl	8005958 <MPU6050_ReadGyroscope>

		  // MCU is mounted upside down. Flip the axis
		  IMU[0] = IMU[0];
 8004f92:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <main+0x2cc>)
 8004f94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004f98:	4b57      	ldr	r3, [pc, #348]	; (80050f8 <main+0x2cc>)
 8004f9a:	801a      	strh	r2, [r3, #0]
		  IMU[1] = -IMU[1];
 8004f9c:	4b56      	ldr	r3, [pc, #344]	; (80050f8 <main+0x2cc>)
 8004f9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	425b      	negs	r3, r3
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	b21a      	sxth	r2, r3
 8004faa:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <main+0x2cc>)
 8004fac:	805a      	strh	r2, [r3, #2]
		  IMU[2] = -IMU[2];
 8004fae:	4b52      	ldr	r3, [pc, #328]	; (80050f8 <main+0x2cc>)
 8004fb0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	425b      	negs	r3, r3
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	4b4e      	ldr	r3, [pc, #312]	; (80050f8 <main+0x2cc>)
 8004fbe:	809a      	strh	r2, [r3, #4]
		  IMU[3] = IMU[3];
 8004fc0:	4b4d      	ldr	r3, [pc, #308]	; (80050f8 <main+0x2cc>)
 8004fc2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8004fc6:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <main+0x2cc>)
 8004fc8:	80da      	strh	r2, [r3, #6]
		  IMU[4] = -IMU[4];
 8004fca:	4b4b      	ldr	r3, [pc, #300]	; (80050f8 <main+0x2cc>)
 8004fcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	425b      	negs	r3, r3
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <main+0x2cc>)
 8004fda:	811a      	strh	r2, [r3, #8]
		  IMU[5] = -IMU[5];
 8004fdc:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <main+0x2cc>)
 8004fde:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	425b      	negs	r3, r3
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	b21a      	sxth	r2, r3
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <main+0x2cc>)
 8004fec:	815a      	strh	r2, [r3, #10]

		  // Calculate roll pitch and yaw
		  COMP_FILT_update(&comp_filt);
 8004fee:	4843      	ldr	r0, [pc, #268]	; (80050fc <main+0x2d0>)
 8004ff0:	f7ff fdaa 	bl	8004b48 <COMP_FILT_update>

		  // Every 10 loops (at 50Hz) start the proximity sensor
		  if(main_loop_counter == 10){
 8004ff4:	4b3d      	ldr	r3, [pc, #244]	; (80050ec <main+0x2c0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b0a      	cmp	r3, #10
 8004ffa:	d10b      	bne.n	8005014 <main+0x1e8>
			  // Set trigger pin low.
			  HAL_GPIO_WritePin(GPIOA , GPIO_PIN_11, GPIO_PIN_RESET);
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005002:	483b      	ldr	r0, [pc, #236]	; (80050f0 <main+0x2c4>)
 8005004:	f7fc fdbc 	bl	8001b80 <HAL_GPIO_WritePin>
			  // Set prox status flag to 1
			  prox_Flag = 1;
 8005008:	4b3d      	ldr	r3, [pc, #244]	; (8005100 <main+0x2d4>)
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
			  // Reset loop counter
			  main_loop_counter = 0;
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <main+0x2c0>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		  }
		  main_loop_counter++;
 8005014:	4b35      	ldr	r3, [pc, #212]	; (80050ec <main+0x2c0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a34      	ldr	r2, [pc, #208]	; (80050ec <main+0x2c0>)
 800501c:	6013      	str	r3, [r2, #0]
			//  stop_motors();
		  //}


		  // update pid. outputs available in rpy_pid_data->out[i]
		  pid_update();
 800501e:	f000 fd8d 	bl	8005b3c <pid_update>

		  // Convert from pid values to counter values and
		  // add/subtract those values from different motors

		  //int motor_2_adj = 2000;
		  int motor1 = (int)(24000*MOTOR_CMD[0]) + 24000;
 8005022:	4b38      	ldr	r3, [pc, #224]	; (8005104 <main+0x2d8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4938      	ldr	r1, [pc, #224]	; (8005108 <main+0x2dc>)
 8005028:	4618      	mov	r0, r3
 800502a:	f7fb fe6d 	bl	8000d08 <__aeabi_fmul>
 800502e:	4603      	mov	r3, r0
 8005030:	4618      	mov	r0, r3
 8005032:	f7fc f82f 	bl	8001094 <__aeabi_f2iz>
 8005036:	4603      	mov	r3, r0
 8005038:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800503c:	3340      	adds	r3, #64	; 0x40
 800503e:	613b      	str	r3, [r7, #16]
		  int motor2 = (int)(24000*MOTOR_CMD[1]) + 24000;
 8005040:	4b30      	ldr	r3, [pc, #192]	; (8005104 <main+0x2d8>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	4930      	ldr	r1, [pc, #192]	; (8005108 <main+0x2dc>)
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb fe5e 	bl	8000d08 <__aeabi_fmul>
 800504c:	4603      	mov	r3, r0
 800504e:	4618      	mov	r0, r3
 8005050:	f7fc f820 	bl	8001094 <__aeabi_f2iz>
 8005054:	4603      	mov	r3, r0
 8005056:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800505a:	3340      	adds	r3, #64	; 0x40
 800505c:	60fb      	str	r3, [r7, #12]
		  int motor3 = (int)(24000*MOTOR_CMD[2]) + 24000;
 800505e:	4b29      	ldr	r3, [pc, #164]	; (8005104 <main+0x2d8>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	4929      	ldr	r1, [pc, #164]	; (8005108 <main+0x2dc>)
 8005064:	4618      	mov	r0, r3
 8005066:	f7fb fe4f 	bl	8000d08 <__aeabi_fmul>
 800506a:	4603      	mov	r3, r0
 800506c:	4618      	mov	r0, r3
 800506e:	f7fc f811 	bl	8001094 <__aeabi_f2iz>
 8005072:	4603      	mov	r3, r0
 8005074:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8005078:	3340      	adds	r3, #64	; 0x40
 800507a:	60bb      	str	r3, [r7, #8]
		  int motor4 = (int)(24000*MOTOR_CMD[3]) + 24000;
 800507c:	4b21      	ldr	r3, [pc, #132]	; (8005104 <main+0x2d8>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4921      	ldr	r1, [pc, #132]	; (8005108 <main+0x2dc>)
 8005082:	4618      	mov	r0, r3
 8005084:	f7fb fe40 	bl	8000d08 <__aeabi_fmul>
 8005088:	4603      	mov	r3, r0
 800508a:	4618      	mov	r0, r3
 800508c:	f7fc f802 	bl	8001094 <__aeabi_f2iz>
 8005090:	4603      	mov	r3, r0
 8005092:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8005096:	3340      	adds	r3, #64	; 0x40
 8005098:	607b      	str	r3, [r7, #4]

		  TIM4->CCR1 = motor1;
 800509a:	4a11      	ldr	r2, [pc, #68]	; (80050e0 <main+0x2b4>)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	6353      	str	r3, [r2, #52]	; 0x34
		  TIM4->CCR2 = motor2;
 80050a0:	4a0f      	ldr	r2, [pc, #60]	; (80050e0 <main+0x2b4>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6393      	str	r3, [r2, #56]	; 0x38
		  TIM4->CCR3 = motor3;
 80050a6:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <main+0x2b4>)
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	63d3      	str	r3, [r2, #60]	; 0x3c
		  TIM4->CCR4 = motor4;
 80050ac:	4a0c      	ldr	r2, [pc, #48]	; (80050e0 <main+0x2b4>)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6413      	str	r3, [r2, #64]	; 0x40

		  // Pin used to indicate execution time (probe with scope)
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80050b2:	2200      	movs	r2, #0
 80050b4:	2101      	movs	r1, #1
 80050b6:	480e      	ldr	r0, [pc, #56]	; (80050f0 <main+0x2c4>)
 80050b8:	f7fc fd62 	bl	8001b80 <HAL_GPIO_WritePin>
	  if(main_loop_trigger == 1){
 80050bc:	e746      	b.n	8004f4c <main+0x120>
 80050be:	bf00      	nop
 80050c0:	2000135c 	.word	0x2000135c
 80050c4:	200013f0 	.word	0x200013f0
 80050c8:	2000158c 	.word	0x2000158c
 80050cc:	20001260 	.word	0x20001260
 80050d0:	40010c00 	.word	0x40010c00
 80050d4:	2000139c 	.word	0x2000139c
 80050d8:	20001264 	.word	0x20001264
 80050dc:	200015cc 	.word	0x200015cc
 80050e0:	40000800 	.word	0x40000800
 80050e4:	200012c0 	.word	0x200012c0
 80050e8:	200012a8 	.word	0x200012a8
 80050ec:	20001238 	.word	0x20001238
 80050f0:	40010800 	.word	0x40010800
 80050f4:	20001274 	.word	0x20001274
 80050f8:	20001254 	.word	0x20001254
 80050fc:	200014fc 	.word	0x200014fc
 8005100:	2000123c 	.word	0x2000123c
 8005104:	20001244 	.word	0x20001244
 8005108:	46bb8000 	.word	0x46bb8000

0800510c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b090      	sub	sp, #64	; 0x40
 8005110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005112:	f107 0318 	add.w	r3, r7, #24
 8005116:	2228      	movs	r2, #40	; 0x28
 8005118:	2100      	movs	r1, #0
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fa54 	bl	80065c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005120:	1d3b      	adds	r3, r7, #4
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	605a      	str	r2, [r3, #4]
 8005128:	609a      	str	r2, [r3, #8]
 800512a:	60da      	str	r2, [r3, #12]
 800512c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800512e:	2301      	movs	r3, #1
 8005130:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005132:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005136:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005138:	2300      	movs	r3, #0
 800513a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800513c:	2301      	movs	r3, #1
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005140:	2302      	movs	r3, #2
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005148:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800514a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f7fd fde3 	bl	8002d20 <HAL_RCC_OscConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005160:	f000 fafa 	bl	8005758 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005164:	230f      	movs	r3, #15
 8005166:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005168:	2302      	movs	r3, #2
 800516a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800516c:	2300      	movs	r3, #0
 800516e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005174:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005176:	2300      	movs	r3, #0
 8005178:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800517a:	1d3b      	adds	r3, r7, #4
 800517c:	2102      	movs	r1, #2
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe f84e 	bl	8003220 <HAL_RCC_ClockConfig>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800518a:	f000 fae5 	bl	8005758 <Error_Handler>
  }
}
 800518e:	bf00      	nop
 8005190:	3740      	adds	r7, #64	; 0x40
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800519c:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <MX_I2C2_Init+0x50>)
 800519e:	4a13      	ldr	r2, [pc, #76]	; (80051ec <MX_I2C2_Init+0x54>)
 80051a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051a4:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <MX_I2C2_Init+0x58>)
 80051a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051a8:	4b0f      	ldr	r3, [pc, #60]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80051ae:	4b0e      	ldr	r3, [pc, #56]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051b4:	4b0c      	ldr	r3, [pc, #48]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051bc:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051be:	2200      	movs	r2, #0
 80051c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80051c2:	4b09      	ldr	r3, [pc, #36]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051c8:	4b07      	ldr	r3, [pc, #28]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ce:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80051d4:	4804      	ldr	r0, [pc, #16]	; (80051e8 <MX_I2C2_Init+0x50>)
 80051d6:	f7fc fd25 	bl	8001c24 <HAL_I2C_Init>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80051e0:	f000 faba 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80051e4:	bf00      	nop
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	2000139c 	.word	0x2000139c
 80051ec:	40005800 	.word	0x40005800
 80051f0:	00061a80 	.word	0x00061a80

080051f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051fa:	f107 0320 	add.w	r3, r7, #32
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
 8005202:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	605a      	str	r2, [r3, #4]
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	60da      	str	r2, [r3, #12]
 8005210:	611a      	str	r2, [r3, #16]
 8005212:	615a      	str	r2, [r3, #20]
 8005214:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005216:	4b21      	ldr	r3, [pc, #132]	; (800529c <MX_TIM2_Init+0xa8>)
 8005218:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800521c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 800521e:	4b1f      	ldr	r3, [pc, #124]	; (800529c <MX_TIM2_Init+0xa8>)
 8005220:	220e      	movs	r2, #14
 8005222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005224:	4b1d      	ldr	r3, [pc, #116]	; (800529c <MX_TIM2_Init+0xa8>)
 8005226:	2200      	movs	r2, #0
 8005228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 800522a:	4b1c      	ldr	r3, [pc, #112]	; (800529c <MX_TIM2_Init+0xa8>)
 800522c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8005230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <MX_TIM2_Init+0xa8>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005238:	4b18      	ldr	r3, [pc, #96]	; (800529c <MX_TIM2_Init+0xa8>)
 800523a:	2280      	movs	r2, #128	; 0x80
 800523c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800523e:	4817      	ldr	r0, [pc, #92]	; (800529c <MX_TIM2_Init+0xa8>)
 8005240:	f7fe f9af 	bl	80035a2 <HAL_TIM_OC_Init>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800524a:	f000 fa85 	bl	8005758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800524e:	2300      	movs	r3, #0
 8005250:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005256:	f107 0320 	add.w	r3, r7, #32
 800525a:	4619      	mov	r1, r3
 800525c:	480f      	ldr	r0, [pc, #60]	; (800529c <MX_TIM2_Init+0xa8>)
 800525e:	f7fe fe93 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005268:	f000 fa76 	bl	8005758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800526c:	2300      	movs	r3, #0
 800526e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800527c:	1d3b      	adds	r3, r7, #4
 800527e:	2200      	movs	r2, #0
 8005280:	4619      	mov	r1, r3
 8005282:	4806      	ldr	r0, [pc, #24]	; (800529c <MX_TIM2_Init+0xa8>)
 8005284:	f7fe fb1e 	bl	80038c4 <HAL_TIM_OC_ConfigChannel>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800528e:	f000 fa63 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005292:	bf00      	nop
 8005294:	3728      	adds	r7, #40	; 0x28
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	2000158c 	.word	0x2000158c

080052a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	; 0x28
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a6:	f107 0320 	add.w	r3, r7, #32
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052b0:	1d3b      	adds	r3, r7, #4
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	615a      	str	r2, [r3, #20]
 80052c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80052c2:	4b20      	ldr	r3, [pc, #128]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <MX_TIM3_Init+0xa8>)
 80052c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052ca:	220f      	movs	r2, #15
 80052cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9000;
 80052d4:	4b1b      	ldr	r3, [pc, #108]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052d6:	f242 3228 	movw	r2, #9000	; 0x2328
 80052da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052dc:	4b19      	ldr	r3, [pc, #100]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052de:	2200      	movs	r2, #0
 80052e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80052e8:	4816      	ldr	r0, [pc, #88]	; (8005344 <MX_TIM3_Init+0xa4>)
 80052ea:	f7fe f95a 	bl	80035a2 <HAL_TIM_OC_Init>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d001      	beq.n	80052f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80052f4:	f000 fa30 	bl	8005758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052f8:	2300      	movs	r3, #0
 80052fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005300:	f107 0320 	add.w	r3, r7, #32
 8005304:	4619      	mov	r1, r3
 8005306:	480f      	ldr	r0, [pc, #60]	; (8005344 <MX_TIM3_Init+0xa4>)
 8005308:	f7fe fe3e 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005312:	f000 fa21 	bl	8005758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005316:	2300      	movs	r3, #0
 8005318:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005322:	2300      	movs	r3, #0
 8005324:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005326:	1d3b      	adds	r3, r7, #4
 8005328:	2200      	movs	r2, #0
 800532a:	4619      	mov	r1, r3
 800532c:	4805      	ldr	r0, [pc, #20]	; (8005344 <MX_TIM3_Init+0xa4>)
 800532e:	f7fe fac9 	bl	80038c4 <HAL_TIM_OC_ConfigChannel>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005338:	f000 fa0e 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800533c:	bf00      	nop
 800533e:	3728      	adds	r7, #40	; 0x28
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}
 8005344:	200013f0 	.word	0x200013f0
 8005348:	40000400 	.word	0x40000400

0800534c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	; 0x28
 8005350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005352:	f107 0320 	add.w	r3, r7, #32
 8005356:	2200      	movs	r2, #0
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800535c:	1d3b      	adds	r3, r7, #4
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	609a      	str	r2, [r3, #8]
 8005366:	60da      	str	r2, [r3, #12]
 8005368:	611a      	str	r2, [r3, #16]
 800536a:	615a      	str	r2, [r3, #20]
 800536c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800536e:	4b32      	ldr	r3, [pc, #200]	; (8005438 <MX_TIM4_Init+0xec>)
 8005370:	4a32      	ldr	r2, [pc, #200]	; (800543c <MX_TIM4_Init+0xf0>)
 8005372:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <MX_TIM4_Init+0xec>)
 8005376:	2202      	movs	r2, #2
 8005378:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800537a:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <MX_TIM4_Init+0xec>)
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 42000;
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <MX_TIM4_Init+0xec>)
 8005382:	f24a 4210 	movw	r2, #42000	; 0xa410
 8005386:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005388:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <MX_TIM4_Init+0xec>)
 800538a:	2200      	movs	r2, #0
 800538c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800538e:	4b2a      	ldr	r3, [pc, #168]	; (8005438 <MX_TIM4_Init+0xec>)
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005394:	4828      	ldr	r0, [pc, #160]	; (8005438 <MX_TIM4_Init+0xec>)
 8005396:	f7fe f92f 	bl	80035f8 <HAL_TIM_PWM_Init>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80053a0:	f000 f9da 	bl	8005758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053a4:	2300      	movs	r3, #0
 80053a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80053ac:	f107 0320 	add.w	r3, r7, #32
 80053b0:	4619      	mov	r1, r3
 80053b2:	4821      	ldr	r0, [pc, #132]	; (8005438 <MX_TIM4_Init+0xec>)
 80053b4:	f7fe fde8 	bl	8003f88 <HAL_TIMEx_MasterConfigSynchronization>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80053be:	f000 f9cb 	bl	8005758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80053c2:	2360      	movs	r3, #96	; 0x60
 80053c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053ca:	2300      	movs	r3, #0
 80053cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053d2:	1d3b      	adds	r3, r7, #4
 80053d4:	2200      	movs	r2, #0
 80053d6:	4619      	mov	r1, r3
 80053d8:	4817      	ldr	r0, [pc, #92]	; (8005438 <MX_TIM4_Init+0xec>)
 80053da:	f7fe fad3 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80053e4:	f000 f9b8 	bl	8005758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053e8:	1d3b      	adds	r3, r7, #4
 80053ea:	2204      	movs	r2, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4812      	ldr	r0, [pc, #72]	; (8005438 <MX_TIM4_Init+0xec>)
 80053f0:	f7fe fac8 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80053fa:	f000 f9ad 	bl	8005758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053fe:	1d3b      	adds	r3, r7, #4
 8005400:	2208      	movs	r2, #8
 8005402:	4619      	mov	r1, r3
 8005404:	480c      	ldr	r0, [pc, #48]	; (8005438 <MX_TIM4_Init+0xec>)
 8005406:	f7fe fabd 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8005410:	f000 f9a2 	bl	8005758 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005414:	1d3b      	adds	r3, r7, #4
 8005416:	220c      	movs	r2, #12
 8005418:	4619      	mov	r1, r3
 800541a:	4807      	ldr	r0, [pc, #28]	; (8005438 <MX_TIM4_Init+0xec>)
 800541c:	f7fe fab2 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8005426:	f000 f997 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800542a:	4803      	ldr	r0, [pc, #12]	; (8005438 <MX_TIM4_Init+0xec>)
 800542c:	f000 fe38 	bl	80060a0 <HAL_TIM_MspPostInit>

}
 8005430:	bf00      	nop
 8005432:	3728      	adds	r7, #40	; 0x28
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	2000135c 	.word	0x2000135c
 800543c:	40000800 	.word	0x40000800

08005440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005444:	4b11      	ldr	r3, [pc, #68]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005446:	4a12      	ldr	r2, [pc, #72]	; (8005490 <MX_USART1_UART_Init+0x50>)
 8005448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800544a:	4b10      	ldr	r3, [pc, #64]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800544c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8005450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005454:	2200      	movs	r2, #0
 8005456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005458:	4b0c      	ldr	r3, [pc, #48]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800545a:	2200      	movs	r2, #0
 800545c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800545e:	4b0b      	ldr	r3, [pc, #44]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005460:	2200      	movs	r2, #0
 8005462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005466:	220c      	movs	r2, #12
 8005468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800546a:	4b08      	ldr	r3, [pc, #32]	; (800548c <MX_USART1_UART_Init+0x4c>)
 800546c:	2200      	movs	r2, #0
 800546e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005472:	2200      	movs	r2, #0
 8005474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005476:	4805      	ldr	r0, [pc, #20]	; (800548c <MX_USART1_UART_Init+0x4c>)
 8005478:	f7fe fddc 	bl	8004034 <HAL_UART_Init>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005482:	f000 f969 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005486:	bf00      	nop
 8005488:	bd80      	pop	{r7, pc}
 800548a:	bf00      	nop
 800548c:	200012d8 	.word	0x200012d8
 8005490:	40013800 	.word	0x40013800

08005494 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005498:	4b11      	ldr	r3, [pc, #68]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 800549a:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <MX_USART2_UART_Init+0x50>)
 800549c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80054a6:	4b0e      	ldr	r3, [pc, #56]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054ac:	4b0c      	ldr	r3, [pc, #48]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054b2:	4b0b      	ldr	r3, [pc, #44]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054ba:	220c      	movs	r2, #12
 80054bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054be:	4b08      	ldr	r3, [pc, #32]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054ca:	4805      	ldr	r0, [pc, #20]	; (80054e0 <MX_USART2_UART_Init+0x4c>)
 80054cc:	f7fe fdb2 	bl	8004034 <HAL_UART_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80054d6:	f000 f93f 	bl	8005758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054da:	bf00      	nop
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200015cc 	.word	0x200015cc
 80054e4:	40004400 	.word	0x40004400

080054e8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80054ee:	4b18      	ldr	r3, [pc, #96]	; (8005550 <MX_DMA_Init+0x68>)
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <MX_DMA_Init+0x68>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6153      	str	r3, [r2, #20]
 80054fa:	4b15      	ldr	r3, [pc, #84]	; (8005550 <MX_DMA_Init+0x68>)
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	607b      	str	r3, [r7, #4]
 8005504:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8005506:	2200      	movs	r2, #0
 8005508:	2100      	movs	r1, #0
 800550a:	200e      	movs	r0, #14
 800550c:	f7fb ff43 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8005510:	200e      	movs	r0, #14
 8005512:	f7fb ff5c 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8005516:	2200      	movs	r2, #0
 8005518:	2100      	movs	r1, #0
 800551a:	200f      	movs	r0, #15
 800551c:	f7fb ff3b 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8005520:	200f      	movs	r0, #15
 8005522:	f7fb ff54 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8005526:	2200      	movs	r2, #0
 8005528:	2100      	movs	r1, #0
 800552a:	2010      	movs	r0, #16
 800552c:	f7fb ff33 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8005530:	2010      	movs	r0, #16
 8005532:	f7fb ff4c 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8005536:	2200      	movs	r2, #0
 8005538:	2100      	movs	r1, #0
 800553a:	2011      	movs	r0, #17
 800553c:	f7fb ff2b 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8005540:	2011      	movs	r0, #17
 8005542:	f7fb ff44 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40021000 	.word	0x40021000

08005554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800555a:	f107 0310 	add.w	r3, r7, #16
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	609a      	str	r2, [r3, #8]
 8005566:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005568:	4b3c      	ldr	r3, [pc, #240]	; (800565c <MX_GPIO_Init+0x108>)
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	4a3b      	ldr	r2, [pc, #236]	; (800565c <MX_GPIO_Init+0x108>)
 800556e:	f043 0320 	orr.w	r3, r3, #32
 8005572:	6193      	str	r3, [r2, #24]
 8005574:	4b39      	ldr	r3, [pc, #228]	; (800565c <MX_GPIO_Init+0x108>)
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005580:	4b36      	ldr	r3, [pc, #216]	; (800565c <MX_GPIO_Init+0x108>)
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	4a35      	ldr	r2, [pc, #212]	; (800565c <MX_GPIO_Init+0x108>)
 8005586:	f043 0304 	orr.w	r3, r3, #4
 800558a:	6193      	str	r3, [r2, #24]
 800558c:	4b33      	ldr	r3, [pc, #204]	; (800565c <MX_GPIO_Init+0x108>)
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005598:	4b30      	ldr	r3, [pc, #192]	; (800565c <MX_GPIO_Init+0x108>)
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	4a2f      	ldr	r2, [pc, #188]	; (800565c <MX_GPIO_Init+0x108>)
 800559e:	f043 0308 	orr.w	r3, r3, #8
 80055a2:	6193      	str	r3, [r2, #24]
 80055a4:	4b2d      	ldr	r3, [pc, #180]	; (800565c <MX_GPIO_Init+0x108>)
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f003 0308 	and.w	r3, r3, #8
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Code_Timing_Pin|GPIO_PIN_11|prox_trig_Pin, GPIO_PIN_RESET);
 80055b0:	2200      	movs	r2, #0
 80055b2:	f641 0101 	movw	r1, #6145	; 0x1801
 80055b6:	482a      	ldr	r0, [pc, #168]	; (8005660 <MX_GPIO_Init+0x10c>)
 80055b8:	f7fc fae2 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80055bc:	2200      	movs	r2, #0
 80055be:	2118      	movs	r1, #24
 80055c0:	4828      	ldr	r0, [pc, #160]	; (8005664 <MX_GPIO_Init+0x110>)
 80055c2:	f7fc fadd 	bl	8001b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Code_Timing_Pin PA11 prox_trig_Pin */
  GPIO_InitStruct.Pin = Code_Timing_Pin|GPIO_PIN_11|prox_trig_Pin;
 80055c6:	f641 0301 	movw	r3, #6145	; 0x1801
 80055ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055cc:	2301      	movs	r3, #1
 80055ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d4:	2302      	movs	r3, #2
 80055d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d8:	f107 0310 	add.w	r3, r7, #16
 80055dc:	4619      	mov	r1, r3
 80055de:	4820      	ldr	r0, [pc, #128]	; (8005660 <MX_GPIO_Init+0x10c>)
 80055e0:	f7fc f974 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : prox_echo_Pin */
  GPIO_InitStruct.Pin = prox_echo_Pin;
 80055e4:	2302      	movs	r3, #2
 80055e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80055e8:	4b1f      	ldr	r3, [pc, #124]	; (8005668 <MX_GPIO_Init+0x114>)
 80055ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ec:	2300      	movs	r3, #0
 80055ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(prox_echo_GPIO_Port, &GPIO_InitStruct);
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	4619      	mov	r1, r3
 80055f6:	481a      	ldr	r0, [pc, #104]	; (8005660 <MX_GPIO_Init+0x10c>)
 80055f8:	f7fc f968 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005602:	4b1a      	ldr	r3, [pc, #104]	; (800566c <MX_GPIO_Init+0x118>)
 8005604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005606:	2301      	movs	r3, #1
 8005608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800560a:	f107 0310 	add.w	r3, r7, #16
 800560e:	4619      	mov	r1, r3
 8005610:	4813      	ldr	r0, [pc, #76]	; (8005660 <MX_GPIO_Init+0x10c>)
 8005612:	f7fc f95b 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005616:	2318      	movs	r3, #24
 8005618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800561e:	2300      	movs	r3, #0
 8005620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005622:	2302      	movs	r3, #2
 8005624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005626:	f107 0310 	add.w	r3, r7, #16
 800562a:	4619      	mov	r1, r3
 800562c:	480d      	ldr	r0, [pc, #52]	; (8005664 <MX_GPIO_Init+0x110>)
 800562e:	f7fc f94d 	bl	80018cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	2007      	movs	r0, #7
 8005638:	f7fb fead 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800563c:	2007      	movs	r0, #7
 800563e:	f7fb fec6 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	2017      	movs	r0, #23
 8005648:	f7fb fea5 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800564c:	2017      	movs	r0, #23
 800564e:	f7fb febe 	bl	80013ce <HAL_NVIC_EnableIRQ>

}
 8005652:	bf00      	nop
 8005654:	3720      	adds	r7, #32
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40021000 	.word	0x40021000
 8005660:	40010800 	.word	0x40010800
 8005664:	40010c00 	.word	0x40010c00
 8005668:	10310000 	.word	0x10310000
 800566c:	10210000 	.word	0x10210000

08005670 <pwm_init>:
/* USER CODE BEGIN 4 */
///////////////////////


void pwm_init(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
	  TIM_OC_InitTypeDef sConfigOC;

	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005676:	2360      	movs	r3, #96	; 0x60
 8005678:	607b      	str	r3, [r7, #4]
	  sConfigOC.Pulse = 16800;
 800567a:	f244 13a0 	movw	r3, #16800	; 0x41a0
 800567e:	60bb      	str	r3, [r7, #8]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005684:	2300      	movs	r3, #0
 8005686:	617b      	str	r3, [r7, #20]

	  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	2200      	movs	r2, #0
 800568c:	4619      	mov	r1, r3
 800568e:	4814      	ldr	r0, [pc, #80]	; (80056e0 <pwm_init+0x70>)
 8005690:	f7fe f978 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8005694:	2100      	movs	r1, #0
 8005696:	4812      	ldr	r0, [pc, #72]	; (80056e0 <pwm_init+0x70>)
 8005698:	f7fd ffda 	bl	8003650 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	2204      	movs	r2, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	480f      	ldr	r0, [pc, #60]	; (80056e0 <pwm_init+0x70>)
 80056a4:	f7fe f96e 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80056a8:	2104      	movs	r1, #4
 80056aa:	480d      	ldr	r0, [pc, #52]	; (80056e0 <pwm_init+0x70>)
 80056ac:	f7fd ffd0 	bl	8003650 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 80056b0:	1d3b      	adds	r3, r7, #4
 80056b2:	2208      	movs	r2, #8
 80056b4:	4619      	mov	r1, r3
 80056b6:	480a      	ldr	r0, [pc, #40]	; (80056e0 <pwm_init+0x70>)
 80056b8:	f7fe f964 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80056bc:	2108      	movs	r1, #8
 80056be:	4808      	ldr	r0, [pc, #32]	; (80056e0 <pwm_init+0x70>)
 80056c0:	f7fd ffc6 	bl	8003650 <HAL_TIM_PWM_Start>

	  HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	220c      	movs	r2, #12
 80056c8:	4619      	mov	r1, r3
 80056ca:	4805      	ldr	r0, [pc, #20]	; (80056e0 <pwm_init+0x70>)
 80056cc:	f7fe f95a 	bl	8003984 <HAL_TIM_PWM_ConfigChannel>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80056d0:	210c      	movs	r1, #12
 80056d2:	4803      	ldr	r0, [pc, #12]	; (80056e0 <pwm_init+0x70>)
 80056d4:	f7fd ffbc 	bl	8003650 <HAL_TIM_PWM_Start>
}
 80056d8:	bf00      	nop
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2000135c 	.word	0x2000135c

080056e4 <HAL_UART_TxCpltCallback>:


// UART transmit callback function. called once the transmission is finished
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1,buffer_rx,10);
	// UART transmission is finished.
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_UART_RxCpltCallback>:

// UART receive callback function. called once the buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	//
	COMM_parse_cmd();
 8005700:	f7ff f9ba 	bl	8004a78 <COMM_parse_cmd>

	// Start a new receive
	HAL_UART_Receive_DMA(&huart2,buffer_rx,16);
 8005704:	2210      	movs	r2, #16
 8005706:	4904      	ldr	r1, [pc, #16]	; (8005718 <HAL_UART_RxCpltCallback+0x20>)
 8005708:	4804      	ldr	r0, [pc, #16]	; (800571c <HAL_UART_RxCpltCallback+0x24>)
 800570a:	f7fe fd4d 	bl	80041a8 <HAL_UART_Receive_DMA>


}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	20001264 	.word	0x20001264
 800571c:	200015cc 	.word	0x200015cc

08005720 <stop_motors>:
/**
  * @brief  This function stops the motors and execution of the program.
  * 		Call in case of serious failure.
  * @retval None
  */
void stop_motors(void){
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0

	// System failed!
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8005724:	2200      	movs	r2, #0
 8005726:	2110      	movs	r1, #16
 8005728:	4809      	ldr	r0, [pc, #36]	; (8005750 <stop_motors+0x30>)
 800572a:	f7fc fa29 	bl	8001b80 <HAL_GPIO_WritePin>
	TIM4->CCR1 = 16800;
 800572e:	4b09      	ldr	r3, [pc, #36]	; (8005754 <stop_motors+0x34>)
 8005730:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8005734:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = 16800;
 8005736:	4b07      	ldr	r3, [pc, #28]	; (8005754 <stop_motors+0x34>)
 8005738:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800573c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = 16800;
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <stop_motors+0x34>)
 8005740:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = 16800;
 8005746:	4b03      	ldr	r3, [pc, #12]	; (8005754 <stop_motors+0x34>)
 8005748:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
	while(1);
 800574e:	e7fe      	b.n	800574e <stop_motors+0x2e>
 8005750:	40010c00 	.word	0x40010c00
 8005754:	40000800 	.word	0x40000800

08005758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr

08005764 <MPU6050_Init>:
				//acc X Y Z, gyro X Y Z
int16_t IMU_BIAS[6] = {-17,-25,22,13,12,-26};


int MPU6050_Init(I2C_HandleTypeDef* I2Cx)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af02      	add	r7, sp, #8
 800576a:	6078      	str	r0, [r7, #4]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 800576c:	2375      	movs	r3, #117	; 0x75
 800576e:	72fb      	strb	r3, [r7, #11]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	60fb      	str	r3, [r7, #12]
	uint8_t d[2];


	// Check if device is connected
	if(HAL_I2C_IsDeviceReady(Handle,MPU6050_I2C_ADDR,5,10)!=HAL_OK){return 2;}
 8005774:	230a      	movs	r3, #10
 8005776:	2205      	movs	r2, #5
 8005778:	21d0      	movs	r1, #208	; 0xd0
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7fc fea6 	bl	80024cc <HAL_I2C_IsDeviceReady>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <MPU6050_Init+0x26>
 8005786:	2302      	movs	r3, #2
 8005788:	e07f      	b.n	800588a <MPU6050_Init+0x126>

	if(HAL_I2C_Master_Transmit(Handle, MPU6050_I2C_ADDR, &WHO_AM_I, 1, 1000) != HAL_OK){return 3;}
 800578a:	f107 020b 	add.w	r2, r7, #11
 800578e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005792:	9300      	str	r3, [sp, #0]
 8005794:	2301      	movs	r3, #1
 8005796:	21d0      	movs	r1, #208	; 0xd0
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7fc fb6b 	bl	8001e74 <HAL_I2C_Master_Transmit>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <MPU6050_Init+0x44>
 80057a4:	2303      	movs	r3, #3
 80057a6:	e070      	b.n	800588a <MPU6050_Init+0x126>

	// Receive who am i response
	if(HAL_I2C_Master_Receive(Handle, MPU6050_I2C_ADDR, &temp, 1, 1000) != HAL_OK){return 4;}
 80057a8:	f107 020a 	add.w	r2, r7, #10
 80057ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057b0:	9300      	str	r3, [sp, #0]
 80057b2:	2301      	movs	r3, #1
 80057b4:	21d0      	movs	r1, #208	; 0xd0
 80057b6:	68f8      	ldr	r0, [r7, #12]
 80057b8:	f7fc fc5a 	bl	8002070 <HAL_I2C_Master_Receive>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <MPU6050_Init+0x66>
 80057c2:	2304      	movs	r3, #4
 80057c4:	e061      	b.n	800588a <MPU6050_Init+0x126>

	/* Checking */
	while(temp != MPU6050_I_AM){return 5;} // device invalid
 80057c6:	2305      	movs	r3, #5
 80057c8:	e05f      	b.n	800588a <MPU6050_Init+0x126>
 80057ca:	bf00      	nop
 80057cc:	7abb      	ldrb	r3, [r7, #10]
 80057ce:	2b70      	cmp	r3, #112	; 0x70
 80057d0:	d1f9      	bne.n	80057c6 <MPU6050_Init+0x62>


	// Wakeup MPU6050
	d[0] = MPU6050_PWR_MGMT_1;
 80057d2:	236b      	movs	r3, #107	; 0x6b
 80057d4:	723b      	strb	r3, [r7, #8]
	d[1] = 0x00;
 80057d6:	2300      	movs	r3, #0
 80057d8:	727b      	strb	r3, [r7, #9]
	if(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR, (uint8_t *)d, 2, 1000) != HAL_OK){return 6;}
 80057da:	f107 0208 	add.w	r2, r7, #8
 80057de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057e2:	9300      	str	r3, [sp, #0]
 80057e4:	2302      	movs	r3, #2
 80057e6:	21d0      	movs	r1, #208	; 0xd0
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7fc fb43 	bl	8001e74 <HAL_I2C_Master_Transmit>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <MPU6050_Init+0x94>
 80057f4:	2306      	movs	r3, #6
 80057f6:	e048      	b.n	800588a <MPU6050_Init+0x126>

	// Set sample rate
	d[0] = MPU6050_SMPLRT_DIV;
 80057f8:	2319      	movs	r3, #25
 80057fa:	723b      	strb	r3, [r7, #8]
	d[1] = MPU6050_DATA_RATE;
 80057fc:	230f      	movs	r3, #15
 80057fe:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDW,&d,2,1000)!=HAL_OK);
 8005800:	bf00      	nop
 8005802:	f107 0208 	add.w	r2, r7, #8
 8005806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	2302      	movs	r3, #2
 800580e:	21d1      	movs	r1, #209	; 0xd1
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f7fc fb2f 	bl	8001e74 <HAL_I2C_Master_Transmit>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1f2      	bne.n	8005802 <MPU6050_Init+0x9e>

	// Config accelerometer
	d[0] = MPU6050_ACCEL_CONFIG;
 800581c:	231c      	movs	r3, #28
 800581e:	723b      	strb	r3, [r7, #8]
	d[1] = MPU6050_ACC_RANGE;
 8005820:	2318      	movs	r3, #24
 8005822:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDW,&d, 2, 1000) != HAL_OK);
 8005824:	bf00      	nop
 8005826:	f107 0208 	add.w	r2, r7, #8
 800582a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	2302      	movs	r3, #2
 8005832:	21d1      	movs	r1, #209	; 0xd1
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7fc fb1d 	bl	8001e74 <HAL_I2C_Master_Transmit>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f2      	bne.n	8005826 <MPU6050_Init+0xc2>

	// Config Gyroscope
	d[0] = MPU6050_GYRO_CONFIG;
 8005840:	231b      	movs	r3, #27
 8005842:	723b      	strb	r3, [r7, #8]
	d[1] = MPU6050_GYRO_RANGE;
 8005844:	2318      	movs	r3, #24
 8005846:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR,&d, 2, 1000) != HAL_OK);
 8005848:	bf00      	nop
 800584a:	f107 0208 	add.w	r2, r7, #8
 800584e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	2302      	movs	r3, #2
 8005856:	21d0      	movs	r1, #208	; 0xd0
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7fc fb0b 	bl	8001e74 <HAL_I2C_Master_Transmit>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f2      	bne.n	800584a <MPU6050_Init+0xe6>

	// Set digital low pass filter
	d[0] = MPU6050_CONFIG;
 8005864:	231a      	movs	r3, #26
 8005866:	723b      	strb	r3, [r7, #8]
	d[1] = MPU6050_DLPF_CFG;
 8005868:	2300      	movs	r3, #0
 800586a:	727b      	strb	r3, [r7, #9]
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR,&d, 2, 1000) != HAL_OK);
 800586c:	bf00      	nop
 800586e:	f107 0208 	add.w	r2, r7, #8
 8005872:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	2302      	movs	r3, #2
 800587a:	21d0      	movs	r1, #208	; 0xd0
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f7fc faf9 	bl	8001e74 <HAL_I2C_Master_Transmit>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f2      	bne.n	800586e <MPU6050_Init+0x10a>
	//while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR,&regAdd, 1, 1000) != HAL_OK);
	//while(HAL_I2C_Master_Receive(Handle,MPU6050_I2C_ADDR, &temp, 1, 1000) != HAL_OK);
	//temp = 0x78;
	//while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR,&temp, 1, 1000) != HAL_OK);

	return 1;
 8005888:	2301      	movs	r3, #1
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
	...

08005894 <MPU6050_ReadAccelerometer>:



int MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af02      	add	r7, sp, #8
 800589a:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800589c:	233b      	movs	r3, #59	; 0x3b
 800589e:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	617b      	str	r3, [r7, #20]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR, &reg, 1, 1000) != HAL_OK);
 80058a4:	bf00      	nop
 80058a6:	f107 020b 	add.w	r2, r7, #11
 80058aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2301      	movs	r3, #1
 80058b2:	21d0      	movs	r1, #208	; 0xd0
 80058b4:	6978      	ldr	r0, [r7, #20]
 80058b6:	f7fc fadd 	bl	8001e74 <HAL_I2C_Master_Transmit>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1f2      	bne.n	80058a6 <MPU6050_ReadAccelerometer+0x12>

	while(HAL_I2C_Master_Receive(Handle,MPU6050_I2C_ADDR, data, 6, 1000) != HAL_OK);
 80058c0:	bf00      	nop
 80058c2:	f107 020c 	add.w	r2, r7, #12
 80058c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2306      	movs	r3, #6
 80058ce:	21d0      	movs	r1, #208	; 0xd0
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f7fc fbcd 	bl	8002070 <HAL_I2C_Master_Receive>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f2      	bne.n	80058c2 <MPU6050_ReadAccelerometer+0x2e>

	/* Format */
	IMU[0] = -(((int16_t)(data[0] << 8 | data[1])) + IMU_BIAS[0]); // Flip sign to fit the convention
 80058dc:	7b3b      	ldrb	r3, [r7, #12]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	b21a      	sxth	r2, r3
 80058e2:	7b7b      	ldrb	r3, [r7, #13]
 80058e4:	b21b      	sxth	r3, r3
 80058e6:	4313      	orrs	r3, r2
 80058e8:	b21b      	sxth	r3, r3
 80058ea:	b29a      	uxth	r2, r3
 80058ec:	4b18      	ldr	r3, [pc, #96]	; (8005950 <MPU6050_ReadAccelerometer+0xbc>)
 80058ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	425b      	negs	r3, r3
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	4b15      	ldr	r3, [pc, #84]	; (8005954 <MPU6050_ReadAccelerometer+0xc0>)
 8005900:	801a      	strh	r2, [r3, #0]
	IMU[1] = (int16_t)(data[2] << 8 | data[3]) + IMU_BIAS[1];
 8005902:	7bbb      	ldrb	r3, [r7, #14]
 8005904:	021b      	lsls	r3, r3, #8
 8005906:	b21a      	sxth	r2, r3
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	b21b      	sxth	r3, r3
 800590c:	4313      	orrs	r3, r2
 800590e:	b21b      	sxth	r3, r3
 8005910:	b29a      	uxth	r2, r3
 8005912:	4b0f      	ldr	r3, [pc, #60]	; (8005950 <MPU6050_ReadAccelerometer+0xbc>)
 8005914:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005918:	b29b      	uxth	r3, r3
 800591a:	4413      	add	r3, r2
 800591c:	b29b      	uxth	r3, r3
 800591e:	b21a      	sxth	r2, r3
 8005920:	4b0c      	ldr	r3, [pc, #48]	; (8005954 <MPU6050_ReadAccelerometer+0xc0>)
 8005922:	805a      	strh	r2, [r3, #2]
	IMU[2] = (int16_t)(data[4] << 8 | data[5]) + IMU_BIAS[2];
 8005924:	7c3b      	ldrb	r3, [r7, #16]
 8005926:	021b      	lsls	r3, r3, #8
 8005928:	b21a      	sxth	r2, r3
 800592a:	7c7b      	ldrb	r3, [r7, #17]
 800592c:	b21b      	sxth	r3, r3
 800592e:	4313      	orrs	r3, r2
 8005930:	b21b      	sxth	r3, r3
 8005932:	b29a      	uxth	r2, r3
 8005934:	4b06      	ldr	r3, [pc, #24]	; (8005950 <MPU6050_ReadAccelerometer+0xbc>)
 8005936:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800593a:	b29b      	uxth	r3, r3
 800593c:	4413      	add	r3, r2
 800593e:	b29b      	uxth	r3, r3
 8005940:	b21a      	sxth	r2, r3
 8005942:	4b04      	ldr	r3, [pc, #16]	; (8005954 <MPU6050_ReadAccelerometer+0xc0>)
 8005944:	809a      	strh	r2, [r3, #4]

	/* Return OK */
	return 1;
 8005946:	2301      	movs	r3, #1
}
 8005948:	4618      	mov	r0, r3
 800594a:	3718      	adds	r7, #24
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}
 8005950:	20000008 	.word	0x20000008
 8005954:	20001254 	.word	0x20001254

08005958 <MPU6050_ReadGyroscope>:
int MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8005960:	2343      	movs	r3, #67	; 0x43
 8005962:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	617b      	str	r3, [r7, #20]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle,MPU6050_I2C_ADDR, &reg, 1, 1000) != HAL_OK);
 8005968:	bf00      	nop
 800596a:	f107 020b 	add.w	r2, r7, #11
 800596e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	2301      	movs	r3, #1
 8005976:	21d0      	movs	r1, #208	; 0xd0
 8005978:	6978      	ldr	r0, [r7, #20]
 800597a:	f7fc fa7b 	bl	8001e74 <HAL_I2C_Master_Transmit>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1f2      	bne.n	800596a <MPU6050_ReadGyroscope+0x12>

	while(HAL_I2C_Master_Receive(Handle,MPU6050_I2C_ADDR, data, 6, 1000) != HAL_OK);
 8005984:	bf00      	nop
 8005986:	f107 020c 	add.w	r2, r7, #12
 800598a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	2306      	movs	r3, #6
 8005992:	21d0      	movs	r1, #208	; 0xd0
 8005994:	6978      	ldr	r0, [r7, #20]
 8005996:	f7fc fb6b 	bl	8002070 <HAL_I2C_Master_Receive>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f2      	bne.n	8005986 <MPU6050_ReadGyroscope+0x2e>

	/* Format */
	IMU[3] = (int16_t)(data[0] << 8 | data[1]) + IMU_BIAS[3];
 80059a0:	7b3b      	ldrb	r3, [r7, #12]
 80059a2:	021b      	lsls	r3, r3, #8
 80059a4:	b21a      	sxth	r2, r3
 80059a6:	7b7b      	ldrb	r3, [r7, #13]
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	b21b      	sxth	r3, r3
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	4b19      	ldr	r3, [pc, #100]	; (8005a18 <MPU6050_ReadGyroscope+0xc0>)
 80059b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	b21a      	sxth	r2, r3
 80059be:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <MPU6050_ReadGyroscope+0xc4>)
 80059c0:	80da      	strh	r2, [r3, #6]
	IMU[4] = -(((int16_t)(data[2] << 8 | data[3])) + IMU_BIAS[4]); // Flip sign to fit the convention
 80059c2:	7bbb      	ldrb	r3, [r7, #14]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b21a      	sxth	r2, r3
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	4313      	orrs	r3, r2
 80059ce:	b21b      	sxth	r3, r3
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <MPU6050_ReadGyroscope+0xc0>)
 80059d4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	4413      	add	r3, r2
 80059dc:	b29b      	uxth	r3, r3
 80059de:	425b      	negs	r3, r3
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	4b0d      	ldr	r3, [pc, #52]	; (8005a1c <MPU6050_ReadGyroscope+0xc4>)
 80059e6:	811a      	strh	r2, [r3, #8]
	IMU[5] = -(((int16_t)(data[4] << 8 | data[5])) + IMU_BIAS[5]); // Flip sign to fit the convention
 80059e8:	7c3b      	ldrb	r3, [r7, #16]
 80059ea:	021b      	lsls	r3, r3, #8
 80059ec:	b21a      	sxth	r2, r3
 80059ee:	7c7b      	ldrb	r3, [r7, #17]
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <MPU6050_ReadGyroscope+0xc0>)
 80059fa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	425b      	negs	r3, r3
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	b21a      	sxth	r2, r3
 8005a0a:	4b04      	ldr	r3, [pc, #16]	; (8005a1c <MPU6050_ReadGyroscope+0xc4>)
 8005a0c:	815a      	strh	r2, [r3, #10]

	/* Return OK */
	return 1;
 8005a0e:	2301      	movs	r3, #1
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20000008 	.word	0x20000008
 8005a1c:	20001254 	.word	0x20001254

08005a20 <pid_init>:
#include "pid.h"

float hover_const = 0.41666667;


void pid_init(){
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0

	// Initialize with default values
	for (int i=0;i<3;i++){
 8005a26:	2300      	movs	r3, #0
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	e031      	b.n	8005a90 <pid_init+0x70>
		pid_data.intTot[i] = 0;
 8005a2c:	4a37      	ldr	r2, [pc, #220]	; (8005b0c <pid_init+0xec>)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3318      	adds	r3, #24
 8005a32:	f04f 0100 	mov.w	r1, #0
 8005a36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid_data.prevErrFilt[i] = 0;
 8005a3a:	4a34      	ldr	r2, [pc, #208]	; (8005b0c <pid_init+0xec>)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	331a      	adds	r3, #26
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	605a      	str	r2, [r3, #4]
		pid_data.freq[i] = 500;
 8005a4a:	4a30      	ldr	r2, [pc, #192]	; (8005b0c <pid_init+0xec>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	4a2e      	ldr	r2, [pc, #184]	; (8005b10 <pid_init+0xf0>)
 8005a56:	605a      	str	r2, [r3, #4]
		pid_data.Ts[i] = 1/pid_data.freq[i];
 8005a58:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <pid_init+0xec>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3314      	adds	r3, #20
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4619      	mov	r1, r3
 8005a66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a6a:	f7fb fa01 	bl	8000e70 <__aeabi_fdiv>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4619      	mov	r1, r3
 8005a72:	4a26      	ldr	r2, [pc, #152]	; (8005b0c <pid_init+0xec>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3312      	adds	r3, #18
 8005a78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		pid_data.out[i] = 0;
 8005a7c:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <pid_init+0xec>)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	331e      	adds	r3, #30
 8005a82:	f04f 0100 	mov.w	r1, #0
 8005a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0;i<3;i++){
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	ddca      	ble.n	8005a2c <pid_init+0xc>
	}


	// Roll pid
	pid_data.kp[0] = 0.1;
 8005a96:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <pid_init+0xec>)
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <pid_init+0xf4>)
 8005a9a:	601a      	str	r2, [r3, #0]
	pid_data.ki[0] = 0.005;
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <pid_init+0xec>)
 8005a9e:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <pid_init+0xf8>)
 8005aa0:	60da      	str	r2, [r3, #12]
	pid_data.kd[0] = 0.03;
 8005aa2:	4b1a      	ldr	r3, [pc, #104]	; (8005b0c <pid_init+0xec>)
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <pid_init+0xfc>)
 8005aa6:	619a      	str	r2, [r3, #24]
	pid_data.kn[0] = 100;
 8005aa8:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <pid_init+0xec>)
 8005aaa:	4a1d      	ldr	r2, [pc, #116]	; (8005b20 <pid_init+0x100>)
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24
	pid_data.satMax[0] = 0.3;
 8005aae:	4b17      	ldr	r3, [pc, #92]	; (8005b0c <pid_init+0xec>)
 8005ab0:	4a1c      	ldr	r2, [pc, #112]	; (8005b24 <pid_init+0x104>)
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
	pid_data.satMin[0] = -0.3;
 8005ab4:	4b15      	ldr	r3, [pc, #84]	; (8005b0c <pid_init+0xec>)
 8005ab6:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <pid_init+0x108>)
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

	// Pitch pid
	pid_data.kp[1] = 0.008;
 8005aba:	4b14      	ldr	r3, [pc, #80]	; (8005b0c <pid_init+0xec>)
 8005abc:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <pid_init+0x10c>)
 8005abe:	605a      	str	r2, [r3, #4]
	pid_data.ki[1] = 0.002;
 8005ac0:	4b12      	ldr	r3, [pc, #72]	; (8005b0c <pid_init+0xec>)
 8005ac2:	4a1b      	ldr	r2, [pc, #108]	; (8005b30 <pid_init+0x110>)
 8005ac4:	611a      	str	r2, [r3, #16]
	pid_data.kd[1] = 0.002;
 8005ac6:	4b11      	ldr	r3, [pc, #68]	; (8005b0c <pid_init+0xec>)
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <pid_init+0x110>)
 8005aca:	61da      	str	r2, [r3, #28]
	pid_data.kn[1] = 100;
 8005acc:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <pid_init+0xec>)
 8005ace:	4a14      	ldr	r2, [pc, #80]	; (8005b20 <pid_init+0x100>)
 8005ad0:	629a      	str	r2, [r3, #40]	; 0x28
	pid_data.satMax[1] = 0.05;
 8005ad2:	4b0e      	ldr	r3, [pc, #56]	; (8005b0c <pid_init+0xec>)
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <pid_init+0x114>)
 8005ad6:	635a      	str	r2, [r3, #52]	; 0x34
	pid_data.satMin[1] = -0.05;
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <pid_init+0xec>)
 8005ada:	4a17      	ldr	r2, [pc, #92]	; (8005b38 <pid_init+0x118>)
 8005adc:	641a      	str	r2, [r3, #64]	; 0x40

	// Yaw pid
	pid_data.kp[2] = 0.008;
 8005ade:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <pid_init+0xec>)
 8005ae0:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <pid_init+0x10c>)
 8005ae2:	609a      	str	r2, [r3, #8]
	pid_data.ki[2] = 0.002;
 8005ae4:	4b09      	ldr	r3, [pc, #36]	; (8005b0c <pid_init+0xec>)
 8005ae6:	4a12      	ldr	r2, [pc, #72]	; (8005b30 <pid_init+0x110>)
 8005ae8:	615a      	str	r2, [r3, #20]
	pid_data.kd[2] = 0.002;
 8005aea:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <pid_init+0xec>)
 8005aec:	4a10      	ldr	r2, [pc, #64]	; (8005b30 <pid_init+0x110>)
 8005aee:	621a      	str	r2, [r3, #32]
	pid_data.kn[2] = 100;
 8005af0:	4b06      	ldr	r3, [pc, #24]	; (8005b0c <pid_init+0xec>)
 8005af2:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <pid_init+0x100>)
 8005af4:	62da      	str	r2, [r3, #44]	; 0x2c
	pid_data.satMax[2] = 0.05;
 8005af6:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <pid_init+0xec>)
 8005af8:	4a0e      	ldr	r2, [pc, #56]	; (8005b34 <pid_init+0x114>)
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
	pid_data.satMin[2] = -0.05;
 8005afc:	4b03      	ldr	r3, [pc, #12]	; (8005b0c <pid_init+0xec>)
 8005afe:	4a0e      	ldr	r2, [pc, #56]	; (8005b38 <pid_init+0x118>)
 8005b00:	645a      	str	r2, [r3, #68]	; 0x44

}
 8005b02:	bf00      	nop
 8005b04:	3708      	adds	r7, #8
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20001508 	.word	0x20001508
 8005b10:	43fa0000 	.word	0x43fa0000
 8005b14:	3dcccccd 	.word	0x3dcccccd
 8005b18:	3ba3d70a 	.word	0x3ba3d70a
 8005b1c:	3cf5c28f 	.word	0x3cf5c28f
 8005b20:	42c80000 	.word	0x42c80000
 8005b24:	3e99999a 	.word	0x3e99999a
 8005b28:	be99999a 	.word	0xbe99999a
 8005b2c:	3c03126f 	.word	0x3c03126f
 8005b30:	3b03126f 	.word	0x3b03126f
 8005b34:	3d4ccccd 	.word	0x3d4ccccd
 8005b38:	bd4ccccd 	.word	0xbd4ccccd

08005b3c <pid_update>:


void pid_update() {
 8005b3c:	b5b0      	push	{r4, r5, r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0


	// Loop through all pid's (roll,pitch,yaw)
	for(int i = 0; i<3; i++){
 8005b42:	2300      	movs	r3, #0
 8005b44:	617b      	str	r3, [r7, #20]
 8005b46:	e10c      	b.n	8005d62 <pid_update+0x226>

		// Calculate error
		float err = RPYA_SP[i] - RPYA[i];
 8005b48:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <pid_update+0x1e8>)
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b50:	4a75      	ldr	r2, [pc, #468]	; (8005d28 <pid_update+0x1ec>)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	f7fa ffcb 	bl	8000af4 <__aeabi_fsub>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	613b      	str	r3, [r7, #16]

		// Derivative filtering
		float errFilt = pid_data.prevErrFilt[i] + pid_data.Ts[i] * pid_data.kn[i] * (err - pid_data.prevErrFilt[i]);
 8005b62:	4a72      	ldr	r2, [pc, #456]	; (8005d2c <pid_update+0x1f0>)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	331a      	adds	r3, #26
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	685c      	ldr	r4, [r3, #4]
 8005b6e:	4a6f      	ldr	r2, [pc, #444]	; (8005d2c <pid_update+0x1f0>)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3312      	adds	r3, #18
 8005b74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005b78:	4a6c      	ldr	r2, [pc, #432]	; (8005d2c <pid_update+0x1f0>)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	3308      	adds	r3, #8
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4413      	add	r3, r2
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	4619      	mov	r1, r3
 8005b86:	f7fb f8bf 	bl	8000d08 <__aeabi_fmul>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	461d      	mov	r5, r3
 8005b8e:	4a67      	ldr	r2, [pc, #412]	; (8005d2c <pid_update+0x1f0>)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	331a      	adds	r3, #26
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6938      	ldr	r0, [r7, #16]
 8005b9e:	f7fa ffa9 	bl	8000af4 <__aeabi_fsub>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7fb f8ae 	bl	8000d08 <__aeabi_fmul>
 8005bac:	4603      	mov	r3, r0
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4620      	mov	r0, r4
 8005bb2:	f7fa ffa1 	bl	8000af8 <__addsf3>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	60fb      	str	r3, [r7, #12]

		// Derivative error
		float derErr = (errFilt - pid_data.prevErrFilt[i]) * pid_data.freq[i];
 8005bba:	4a5c      	ldr	r2, [pc, #368]	; (8005d2c <pid_update+0x1f0>)
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	331a      	adds	r3, #26
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7fa ff93 	bl	8000af4 <__aeabi_fsub>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	4a56      	ldr	r2, [pc, #344]	; (8005d2c <pid_update+0x1f0>)
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fb f892 	bl	8000d08 <__aeabi_fmul>
 8005be4:	4603      	mov	r3, r0
 8005be6:	60bb      	str	r3, [r7, #8]

		// Update prev filtered error
		pid_data.prevErrFilt[i] = errFilt;
 8005be8:	4a50      	ldr	r2, [pc, #320]	; (8005d2c <pid_update+0x1f0>)
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	331a      	adds	r3, #26
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	605a      	str	r2, [r3, #4]

		// Integral error = ki * error * sampling time
		float intErr = pid_data.ki[i] * err * pid_data.Ts[i];
 8005bf6:	4a4d      	ldr	r2, [pc, #308]	; (8005d2c <pid_update+0x1f0>)
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	6939      	ldr	r1, [r7, #16]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fb f87f 	bl	8000d08 <__aeabi_fmul>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	4a47      	ldr	r2, [pc, #284]	; (8005d2c <pid_update+0x1f0>)
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3312      	adds	r3, #18
 8005c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	f7fb f875 	bl	8000d08 <__aeabi_fmul>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	607b      	str	r3, [r7, #4]

		// output
		float out = pid_data.kp[i]*err + intErr + pid_data.intTot[i] + pid_data.kd[i] * derErr;
 8005c22:	4a42      	ldr	r2, [pc, #264]	; (8005d2c <pid_update+0x1f0>)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c2a:	6939      	ldr	r1, [r7, #16]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fb f86b 	bl	8000d08 <__aeabi_fmul>
 8005c32:	4603      	mov	r3, r0
 8005c34:	6879      	ldr	r1, [r7, #4]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fa ff5e 	bl	8000af8 <__addsf3>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	4a3a      	ldr	r2, [pc, #232]	; (8005d2c <pid_update+0x1f0>)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	3318      	adds	r3, #24
 8005c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	f7fa ff54 	bl	8000af8 <__addsf3>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461c      	mov	r4, r3
 8005c54:	4a35      	ldr	r2, [pc, #212]	; (8005d2c <pid_update+0x1f0>)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	3306      	adds	r3, #6
 8005c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c5e:	68b9      	ldr	r1, [r7, #8]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fb f851 	bl	8000d08 <__aeabi_fmul>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f7fa ff44 	bl	8000af8 <__addsf3>
 8005c70:	4603      	mov	r3, r0
 8005c72:	603b      	str	r3, [r7, #0]

		// Saturate output
		if (out > pid_data.satMax[i]) {
 8005c74:	4a2d      	ldr	r2, [pc, #180]	; (8005d2c <pid_update+0x1f0>)
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	330c      	adds	r3, #12
 8005c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6838      	ldr	r0, [r7, #0]
 8005c82:	f7fb f9fd 	bl	8001080 <__aeabi_fcmpgt>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d01e      	beq.n	8005cca <pid_update+0x18e>
			pid_data.out[i] = out;
 8005c8c:	4927      	ldr	r1, [pc, #156]	; (8005d2c <pid_update+0x1f0>)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	331e      	adds	r3, #30
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (intErr < 0) pid_data.intTot[i] += intErr;
 8005c98:	f04f 0100 	mov.w	r1, #0
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7fb f9d1 	bl	8001044 <__aeabi_fcmplt>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d059      	beq.n	8005d5c <pid_update+0x220>
 8005ca8:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <pid_update+0x1f0>)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	3318      	adds	r3, #24
 8005cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f7fa ff1f 	bl	8000af8 <__addsf3>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4a1b      	ldr	r2, [pc, #108]	; (8005d2c <pid_update+0x1f0>)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	3318      	adds	r3, #24
 8005cc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005cc8:	e048      	b.n	8005d5c <pid_update+0x220>
		}
		else if (out < pid_data.satMin[i]) {
 8005cca:	4a18      	ldr	r2, [pc, #96]	; (8005d2c <pid_update+0x1f0>)
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	330e      	adds	r3, #14
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6838      	ldr	r0, [r7, #0]
 8005cda:	f7fb f9b3 	bl	8001044 <__aeabi_fcmplt>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d025      	beq.n	8005d30 <pid_update+0x1f4>
			pid_data.out[i] = out;
 8005ce4:	4911      	ldr	r1, [pc, #68]	; (8005d2c <pid_update+0x1f0>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	331e      	adds	r3, #30
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (intErr > 0) pid_data.intTot[i] += intErr;
 8005cf0:	f04f 0100 	mov.w	r1, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb f9c3 	bl	8001080 <__aeabi_fcmpgt>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02d      	beq.n	8005d5c <pid_update+0x220>
 8005d00:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <pid_update+0x1f0>)
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	3318      	adds	r3, #24
 8005d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d0a:	6879      	ldr	r1, [r7, #4]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fa fef3 	bl	8000af8 <__addsf3>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4619      	mov	r1, r3
 8005d16:	4a05      	ldr	r2, [pc, #20]	; (8005d2c <pid_update+0x1f0>)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	3318      	adds	r3, #24
 8005d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005d20:	e01c      	b.n	8005d5c <pid_update+0x220>
 8005d22:	bf00      	nop
 8005d24:	20001284 	.word	0x20001284
 8005d28:	20001298 	.word	0x20001298
 8005d2c:	20001508 	.word	0x20001508
		}
		else {
			pid_data.out[i] = out;
 8005d30:	494b      	ldr	r1, [pc, #300]	; (8005e60 <pid_update+0x324>)
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	331e      	adds	r3, #30
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pid_data.intTot[i] += intErr;
 8005d3c:	4a48      	ldr	r2, [pc, #288]	; (8005e60 <pid_update+0x324>)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	3318      	adds	r3, #24
 8005d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fa fed5 	bl	8000af8 <__addsf3>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	4619      	mov	r1, r3
 8005d52:	4a43      	ldr	r2, [pc, #268]	; (8005e60 <pid_update+0x324>)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3318      	adds	r3, #24
 8005d58:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<3; i++){
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	f77f aeef 	ble.w	8005b48 <pid_update+0xc>
		}
	}

	// Convert pid outputs to motor commands
	MOTOR_CMD[0] = (	pid_data.out[0] 	+ pid_data.out[1] 	+ pid_data.out[2] + hover_const);
 8005d6a:	4b3d      	ldr	r3, [pc, #244]	; (8005e60 <pid_update+0x324>)
 8005d6c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005d6e:	4b3c      	ldr	r3, [pc, #240]	; (8005e60 <pid_update+0x324>)
 8005d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d72:	4619      	mov	r1, r3
 8005d74:	4610      	mov	r0, r2
 8005d76:	f7fa febf 	bl	8000af8 <__addsf3>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b38      	ldr	r3, [pc, #224]	; (8005e60 <pid_update+0x324>)
 8005d80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f7fa feb6 	bl	8000af8 <__addsf3>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4b34      	ldr	r3, [pc, #208]	; (8005e64 <pid_update+0x328>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4619      	mov	r1, r3
 8005d96:	4610      	mov	r0, r2
 8005d98:	f7fa feae 	bl	8000af8 <__addsf3>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4b31      	ldr	r3, [pc, #196]	; (8005e68 <pid_update+0x32c>)
 8005da2:	601a      	str	r2, [r3, #0]
	MOTOR_CMD[1] = (   -pid_data.out[0] 	+ pid_data.out[1] 	- pid_data.out[2] + hover_const);
 8005da4:	4b2e      	ldr	r3, [pc, #184]	; (8005e60 <pid_update+0x324>)
 8005da6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005da8:	4b2d      	ldr	r3, [pc, #180]	; (8005e60 <pid_update+0x324>)
 8005daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dac:	4619      	mov	r1, r3
 8005dae:	4610      	mov	r0, r2
 8005db0:	f7fa fea0 	bl	8000af4 <__aeabi_fsub>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	4b29      	ldr	r3, [pc, #164]	; (8005e60 <pid_update+0x324>)
 8005dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fa fe97 	bl	8000af4 <__aeabi_fsub>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	4b26      	ldr	r3, [pc, #152]	; (8005e64 <pid_update+0x328>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	f7fa fe91 	bl	8000af8 <__addsf3>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4b23      	ldr	r3, [pc, #140]	; (8005e68 <pid_update+0x32c>)
 8005ddc:	605a      	str	r2, [r3, #4]
	MOTOR_CMD[2] = (   -pid_data.out[0] 	- pid_data.out[1] 	+ pid_data.out[2] + hover_const);
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <pid_update+0x324>)
 8005de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005de6:	4b1e      	ldr	r3, [pc, #120]	; (8005e60 <pid_update+0x324>)
 8005de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dea:	4619      	mov	r1, r3
 8005dec:	4610      	mov	r0, r2
 8005dee:	f7fa fe81 	bl	8000af4 <__aeabi_fsub>
 8005df2:	4603      	mov	r3, r0
 8005df4:	461a      	mov	r2, r3
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <pid_update+0x324>)
 8005df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f7fa fe7a 	bl	8000af8 <__addsf3>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	4b16      	ldr	r3, [pc, #88]	; (8005e64 <pid_update+0x328>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4610      	mov	r0, r2
 8005e10:	f7fa fe72 	bl	8000af8 <__addsf3>
 8005e14:	4603      	mov	r3, r0
 8005e16:	461a      	mov	r2, r3
 8005e18:	4b13      	ldr	r3, [pc, #76]	; (8005e68 <pid_update+0x32c>)
 8005e1a:	609a      	str	r2, [r3, #8]
	MOTOR_CMD[3] = (	pid_data.out[0] 	- pid_data.out[1] 	- pid_data.out[2] + hover_const);
 8005e1c:	4b10      	ldr	r3, [pc, #64]	; (8005e60 <pid_update+0x324>)
 8005e1e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <pid_update+0x324>)
 8005e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e24:	4619      	mov	r1, r3
 8005e26:	4610      	mov	r0, r2
 8005e28:	f7fa fe64 	bl	8000af4 <__aeabi_fsub>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b0b      	ldr	r3, [pc, #44]	; (8005e60 <pid_update+0x324>)
 8005e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e36:	4619      	mov	r1, r3
 8005e38:	4610      	mov	r0, r2
 8005e3a:	f7fa fe5b 	bl	8000af4 <__aeabi_fsub>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	461a      	mov	r2, r3
 8005e42:	4b08      	ldr	r3, [pc, #32]	; (8005e64 <pid_update+0x328>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fa fe55 	bl	8000af8 <__addsf3>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	461a      	mov	r2, r3
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <pid_update+0x32c>)
 8005e54:	60da      	str	r2, [r3, #12]



}
 8005e56:	bf00      	nop
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20001508 	.word	0x20001508
 8005e64:	20000014 	.word	0x20000014
 8005e68:	20001244 	.word	0x20001244

08005e6c <prox_Interrupt>:
    Description: This function is called in the interrupt
    Parameters: N/A
    Returns: N/A
 */
void prox_Interrupt(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
        // If the flag is 1, reset counter and increment flag value
		if(prox_Flag == 1){
 8005e72:	4b12      	ldr	r3, [pc, #72]	; (8005ebc <prox_Interrupt+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d107      	bne.n	8005e8a <prox_Interrupt+0x1e>
			TIM2->CNT = 0x0000; // Set counter to 0
 8005e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e7e:	2200      	movs	r2, #0
 8005e80:	625a      	str	r2, [r3, #36]	; 0x24
			prox_Flag = 2;    // Increment flag val
 8005e82:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <prox_Interrupt+0x50>)
 8005e84:	2202      	movs	r2, #2
 8005e86:	601a      	str	r2, [r3, #0]
            prox_Flag = 3;
            // Get distance
			RPYA[3] = prox_DistCalc((float)counter_Val);
			//while(1);// debug
    }
}
 8005e88:	e014      	b.n	8005eb4 <prox_Interrupt+0x48>
		else if (prox_Flag == 2){
 8005e8a:	4b0c      	ldr	r3, [pc, #48]	; (8005ebc <prox_Interrupt+0x50>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d110      	bne.n	8005eb4 <prox_Interrupt+0x48>
            int counter_Val = TIM2->CNT;
 8005e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e98:	607b      	str	r3, [r7, #4]
            prox_Flag = 3;
 8005e9a:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <prox_Interrupt+0x50>)
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	601a      	str	r2, [r3, #0]
			RPYA[3] = prox_DistCalc((float)counter_Val);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7fa fedd 	bl	8000c60 <__aeabi_i2f>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 f80d 	bl	8005ec8 <prox_DistCalc>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <prox_Interrupt+0x54>)
 8005eb2:	60da      	str	r2, [r3, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	2000123c 	.word	0x2000123c
 8005ec0:	20001298 	.word	0x20001298
 8005ec4:	00000000 	.word	0x00000000

08005ec8 <prox_DistCalc>:
    Description: Calculates measured distance, using size of counter
    Parameters: float -> counter_Val -> Value of the counter of timer
    Returns: float -> Measured distance in meters(?)
 */
float prox_DistCalc(float counter_Val)
{
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
    // Multiply counter by ((prescaler/clk)*(340/2 ms)) -> (15/72e6)*(340/2)=0.000035416666
    return(0.000035416666 * counter_Val);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7fa faa1 	bl	8000418 <__aeabi_f2d>
 8005ed6:	a308      	add	r3, pc, #32	; (adr r3, 8005ef8 <prox_DistCalc+0x30>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa faf4 	bl	80004c8 <__aeabi_dmul>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f7fa fdb0 	bl	8000a4c <__aeabi_d2f>
 8005eec:	4603      	mov	r3, r0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd90      	pop	{r4, r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	60ac2715 	.word	0x60ac2715
 8005efc:	3f02918b 	.word	0x3f02918b

08005f00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b085      	sub	sp, #20
 8005f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005f06:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	4a14      	ldr	r2, [pc, #80]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f0c:	f043 0301 	orr.w	r3, r3, #1
 8005f10:	6193      	str	r3, [r2, #24]
 8005f12:	4b12      	ldr	r3, [pc, #72]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	61d3      	str	r3, [r2, #28]
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <HAL_MspInit+0x5c>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005f36:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <HAL_MspInit+0x60>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	4a04      	ldr	r2, [pc, #16]	; (8005f60 <HAL_MspInit+0x60>)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f52:	bf00      	nop
 8005f54:	3714      	adds	r7, #20
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	40021000 	.word	0x40021000
 8005f60:	40010000 	.word	0x40010000

08005f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f6c:	f107 0310 	add.w	r3, r7, #16
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	609a      	str	r2, [r3, #8]
 8005f78:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a16      	ldr	r2, [pc, #88]	; (8005fd8 <HAL_I2C_MspInit+0x74>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d124      	bne.n	8005fce <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f84:	4b15      	ldr	r3, [pc, #84]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005f8a:	f043 0308 	orr.w	r3, r3, #8
 8005f8e:	6193      	str	r3, [r2, #24]
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0308 	and.w	r3, r3, #8
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005fa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fa2:	2312      	movs	r3, #18
 8005fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005faa:	f107 0310 	add.w	r3, r7, #16
 8005fae:	4619      	mov	r1, r3
 8005fb0:	480b      	ldr	r0, [pc, #44]	; (8005fe0 <HAL_I2C_MspInit+0x7c>)
 8005fb2:	f7fb fc8b 	bl	80018cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005fbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fc0:	61d3      	str	r3, [r2, #28]
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_I2C_MspInit+0x78>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fca:	60bb      	str	r3, [r7, #8]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005fce:	bf00      	nop
 8005fd0:	3720      	adds	r7, #32
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40005800 	.word	0x40005800
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	40010c00 	.word	0x40010c00

08005fe4 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d10c      	bne.n	8006010 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005ff6:	4b15      	ldr	r3, [pc, #84]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 8005ff8:	69db      	ldr	r3, [r3, #28]
 8005ffa:	4a14      	ldr	r2, [pc, #80]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	61d3      	str	r3, [r2, #28]
 8006002:	4b12      	ldr	r3, [pc, #72]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800600e:	e018      	b.n	8006042 <HAL_TIM_OC_MspInit+0x5e>
  else if(htim_oc->Instance==TIM3)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a0e      	ldr	r2, [pc, #56]	; (8006050 <HAL_TIM_OC_MspInit+0x6c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d113      	bne.n	8006042 <HAL_TIM_OC_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800601a:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	4a0b      	ldr	r2, [pc, #44]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 8006020:	f043 0302 	orr.w	r3, r3, #2
 8006024:	61d3      	str	r3, [r2, #28]
 8006026:	4b09      	ldr	r3, [pc, #36]	; (800604c <HAL_TIM_OC_MspInit+0x68>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	60bb      	str	r3, [r7, #8]
 8006030:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006032:	2200      	movs	r2, #0
 8006034:	2100      	movs	r1, #0
 8006036:	201d      	movs	r0, #29
 8006038:	f7fb f9ad 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800603c:	201d      	movs	r0, #29
 800603e:	f7fb f9c6 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	40000400 	.word	0x40000400

08006054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <HAL_TIM_PWM_MspInit+0x44>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d113      	bne.n	800608e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006066:	4b0d      	ldr	r3, [pc, #52]	; (800609c <HAL_TIM_PWM_MspInit+0x48>)
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4a0c      	ldr	r2, [pc, #48]	; (800609c <HAL_TIM_PWM_MspInit+0x48>)
 800606c:	f043 0304 	orr.w	r3, r3, #4
 8006070:	61d3      	str	r3, [r2, #28]
 8006072:	4b0a      	ldr	r3, [pc, #40]	; (800609c <HAL_TIM_PWM_MspInit+0x48>)
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800607e:	2200      	movs	r2, #0
 8006080:	2100      	movs	r1, #0
 8006082:	201e      	movs	r0, #30
 8006084:	f7fb f987 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006088:	201e      	movs	r0, #30
 800608a:	f7fb f9a0 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800608e:	bf00      	nop
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	40000800 	.word	0x40000800
 800609c:	40021000 	.word	0x40021000

080060a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b088      	sub	sp, #32
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a8:	f107 0310 	add.w	r3, r7, #16
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a10      	ldr	r2, [pc, #64]	; (80060fc <HAL_TIM_MspPostInit+0x5c>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d118      	bne.n	80060f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c0:	4b0f      	ldr	r3, [pc, #60]	; (8006100 <HAL_TIM_MspPostInit+0x60>)
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	4a0e      	ldr	r2, [pc, #56]	; (8006100 <HAL_TIM_MspPostInit+0x60>)
 80060c6:	f043 0308 	orr.w	r3, r3, #8
 80060ca:	6193      	str	r3, [r2, #24]
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <HAL_TIM_MspPostInit+0x60>)
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	f003 0308 	and.w	r3, r3, #8
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80060d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80060dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060de:	2302      	movs	r3, #2
 80060e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060e2:	2302      	movs	r3, #2
 80060e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060e6:	f107 0310 	add.w	r3, r7, #16
 80060ea:	4619      	mov	r1, r3
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <HAL_TIM_MspPostInit+0x64>)
 80060ee:	f7fb fbed 	bl	80018cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80060f2:	bf00      	nop
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40000800 	.word	0x40000800
 8006100:	40021000 	.word	0x40021000
 8006104:	40010c00 	.word	0x40010c00

08006108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b08a      	sub	sp, #40	; 0x28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006110:	f107 0318 	add.w	r3, r7, #24
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	605a      	str	r2, [r3, #4]
 800611a:	609a      	str	r2, [r3, #8]
 800611c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a8c      	ldr	r2, [pc, #560]	; (8006354 <HAL_UART_MspInit+0x24c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	f040 8087 	bne.w	8006238 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800612a:	4b8b      	ldr	r3, [pc, #556]	; (8006358 <HAL_UART_MspInit+0x250>)
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	4a8a      	ldr	r2, [pc, #552]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006134:	6193      	str	r3, [r2, #24]
 8006136:	4b88      	ldr	r3, [pc, #544]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006142:	4b85      	ldr	r3, [pc, #532]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	4a84      	ldr	r2, [pc, #528]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006148:	f043 0304 	orr.w	r3, r3, #4
 800614c:	6193      	str	r3, [r2, #24]
 800614e:	4b82      	ldr	r3, [pc, #520]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006150:	699b      	ldr	r3, [r3, #24]
 8006152:	f003 0304 	and.w	r3, r3, #4
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800615a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800615e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006160:	2302      	movs	r3, #2
 8006162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006164:	2303      	movs	r3, #3
 8006166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006168:	f107 0318 	add.w	r3, r7, #24
 800616c:	4619      	mov	r1, r3
 800616e:	487b      	ldr	r0, [pc, #492]	; (800635c <HAL_UART_MspInit+0x254>)
 8006170:	f7fb fbac 	bl	80018cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800617a:	2300      	movs	r3, #0
 800617c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800617e:	2300      	movs	r3, #0
 8006180:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006182:	f107 0318 	add.w	r3, r7, #24
 8006186:	4619      	mov	r1, r3
 8006188:	4874      	ldr	r0, [pc, #464]	; (800635c <HAL_UART_MspInit+0x254>)
 800618a:	f7fb fb9f 	bl	80018cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800618e:	4b74      	ldr	r3, [pc, #464]	; (8006360 <HAL_UART_MspInit+0x258>)
 8006190:	4a74      	ldr	r2, [pc, #464]	; (8006364 <HAL_UART_MspInit+0x25c>)
 8006192:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006194:	4b72      	ldr	r3, [pc, #456]	; (8006360 <HAL_UART_MspInit+0x258>)
 8006196:	2200      	movs	r2, #0
 8006198:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800619a:	4b71      	ldr	r3, [pc, #452]	; (8006360 <HAL_UART_MspInit+0x258>)
 800619c:	2200      	movs	r2, #0
 800619e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80061a0:	4b6f      	ldr	r3, [pc, #444]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061a2:	2280      	movs	r2, #128	; 0x80
 80061a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061a6:	4b6e      	ldr	r3, [pc, #440]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061ac:	4b6c      	ldr	r3, [pc, #432]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80061b2:	4b6b      	ldr	r3, [pc, #428]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80061b8:	4b69      	ldr	r3, [pc, #420]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80061be:	4868      	ldr	r0, [pc, #416]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061c0:	f7fb f920 	bl	8001404 <HAL_DMA_Init>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80061ca:	f7ff fac5 	bl	8005758 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a63      	ldr	r2, [pc, #396]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34
 80061d4:	4a62      	ldr	r2, [pc, #392]	; (8006360 <HAL_UART_MspInit+0x258>)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80061da:	4b63      	ldr	r3, [pc, #396]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061dc:	4a63      	ldr	r2, [pc, #396]	; (800636c <HAL_UART_MspInit+0x264>)
 80061de:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061e0:	4b61      	ldr	r3, [pc, #388]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061e2:	2210      	movs	r2, #16
 80061e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061e6:	4b60      	ldr	r3, [pc, #384]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061ec:	4b5e      	ldr	r3, [pc, #376]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80061f2:	4b5d      	ldr	r3, [pc, #372]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80061f8:	4b5b      	ldr	r3, [pc, #364]	; (8006368 <HAL_UART_MspInit+0x260>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80061fe:	4b5a      	ldr	r3, [pc, #360]	; (8006368 <HAL_UART_MspInit+0x260>)
 8006200:	2200      	movs	r2, #0
 8006202:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006204:	4b58      	ldr	r3, [pc, #352]	; (8006368 <HAL_UART_MspInit+0x260>)
 8006206:	2200      	movs	r2, #0
 8006208:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800620a:	4857      	ldr	r0, [pc, #348]	; (8006368 <HAL_UART_MspInit+0x260>)
 800620c:	f7fb f8fa 	bl	8001404 <HAL_DMA_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8006216:	f7ff fa9f 	bl	8005758 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a52      	ldr	r2, [pc, #328]	; (8006368 <HAL_UART_MspInit+0x260>)
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
 8006220:	4a51      	ldr	r2, [pc, #324]	; (8006368 <HAL_UART_MspInit+0x260>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	2025      	movs	r0, #37	; 0x25
 800622c:	f7fb f8b3 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006230:	2025      	movs	r0, #37	; 0x25
 8006232:	f7fb f8cc 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006236:	e089      	b.n	800634c <HAL_UART_MspInit+0x244>
  else if(huart->Instance==USART2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a4c      	ldr	r2, [pc, #304]	; (8006370 <HAL_UART_MspInit+0x268>)
 800623e:	4293      	cmp	r3, r2
 8006240:	f040 8084 	bne.w	800634c <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006244:	4b44      	ldr	r3, [pc, #272]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	4a43      	ldr	r2, [pc, #268]	; (8006358 <HAL_UART_MspInit+0x250>)
 800624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624e:	61d3      	str	r3, [r2, #28]
 8006250:	4b41      	ldr	r3, [pc, #260]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800625c:	4b3e      	ldr	r3, [pc, #248]	; (8006358 <HAL_UART_MspInit+0x250>)
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	4a3d      	ldr	r2, [pc, #244]	; (8006358 <HAL_UART_MspInit+0x250>)
 8006262:	f043 0304 	orr.w	r3, r3, #4
 8006266:	6193      	str	r3, [r2, #24]
 8006268:	4b3b      	ldr	r3, [pc, #236]	; (8006358 <HAL_UART_MspInit+0x250>)
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	f003 0304 	and.w	r3, r3, #4
 8006270:	60bb      	str	r3, [r7, #8]
 8006272:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006274:	2304      	movs	r3, #4
 8006276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006278:	2302      	movs	r3, #2
 800627a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800627c:	2303      	movs	r3, #3
 800627e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006280:	f107 0318 	add.w	r3, r7, #24
 8006284:	4619      	mov	r1, r3
 8006286:	4835      	ldr	r0, [pc, #212]	; (800635c <HAL_UART_MspInit+0x254>)
 8006288:	f7fb fb20 	bl	80018cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800628c:	2308      	movs	r3, #8
 800628e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006290:	2300      	movs	r3, #0
 8006292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006294:	2300      	movs	r3, #0
 8006296:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006298:	f107 0318 	add.w	r3, r7, #24
 800629c:	4619      	mov	r1, r3
 800629e:	482f      	ldr	r0, [pc, #188]	; (800635c <HAL_UART_MspInit+0x254>)
 80062a0:	f7fb fb14 	bl	80018cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80062a4:	4b33      	ldr	r3, [pc, #204]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062a6:	4a34      	ldr	r2, [pc, #208]	; (8006378 <HAL_UART_MspInit+0x270>)
 80062a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062aa:	4b32      	ldr	r3, [pc, #200]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062b0:	4b30      	ldr	r3, [pc, #192]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80062b6:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062b8:	2280      	movs	r2, #128	; 0x80
 80062ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80062bc:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80062c2:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80062c8:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80062ce:	4b29      	ldr	r3, [pc, #164]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80062d4:	4827      	ldr	r0, [pc, #156]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062d6:	f7fb f895 	bl	8001404 <HAL_DMA_Init>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80062e0:	f7ff fa3a 	bl	8005758 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a23      	ldr	r2, [pc, #140]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062e8:	635a      	str	r2, [r3, #52]	; 0x34
 80062ea:	4a22      	ldr	r2, [pc, #136]	; (8006374 <HAL_UART_MspInit+0x26c>)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <HAL_UART_MspInit+0x274>)
 80062f2:	4a23      	ldr	r2, [pc, #140]	; (8006380 <HAL_UART_MspInit+0x278>)
 80062f4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_UART_MspInit+0x274>)
 80062f8:	2210      	movs	r2, #16
 80062fa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062fc:	4b1f      	ldr	r3, [pc, #124]	; (800637c <HAL_UART_MspInit+0x274>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006302:	4b1e      	ldr	r3, [pc, #120]	; (800637c <HAL_UART_MspInit+0x274>)
 8006304:	2280      	movs	r2, #128	; 0x80
 8006306:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006308:	4b1c      	ldr	r3, [pc, #112]	; (800637c <HAL_UART_MspInit+0x274>)
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800630e:	4b1b      	ldr	r3, [pc, #108]	; (800637c <HAL_UART_MspInit+0x274>)
 8006310:	2200      	movs	r2, #0
 8006312:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006314:	4b19      	ldr	r3, [pc, #100]	; (800637c <HAL_UART_MspInit+0x274>)
 8006316:	2200      	movs	r2, #0
 8006318:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800631a:	4b18      	ldr	r3, [pc, #96]	; (800637c <HAL_UART_MspInit+0x274>)
 800631c:	2200      	movs	r2, #0
 800631e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006320:	4816      	ldr	r0, [pc, #88]	; (800637c <HAL_UART_MspInit+0x274>)
 8006322:	f7fb f86f 	bl	8001404 <HAL_DMA_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_UART_MspInit+0x228>
      Error_Handler();
 800632c:	f7ff fa14 	bl	8005758 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a12      	ldr	r2, [pc, #72]	; (800637c <HAL_UART_MspInit+0x274>)
 8006334:	631a      	str	r2, [r3, #48]	; 0x30
 8006336:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_UART_MspInit+0x274>)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800633c:	2200      	movs	r2, #0
 800633e:	2100      	movs	r1, #0
 8006340:	2026      	movs	r0, #38	; 0x26
 8006342:	f7fb f828 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8006346:	2026      	movs	r0, #38	; 0x26
 8006348:	f7fb f841 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 800634c:	bf00      	nop
 800634e:	3728      	adds	r7, #40	; 0x28
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40013800 	.word	0x40013800
 8006358:	40021000 	.word	0x40021000
 800635c:	40010800 	.word	0x40010800
 8006360:	20001474 	.word	0x20001474
 8006364:	40020058 	.word	0x40020058
 8006368:	20001430 	.word	0x20001430
 800636c:	40020044 	.word	0x40020044
 8006370:	40004400 	.word	0x40004400
 8006374:	20001318 	.word	0x20001318
 8006378:	4002006c 	.word	0x4002006c
 800637c:	200014b8 	.word	0x200014b8
 8006380:	40020080 	.word	0x40020080

08006384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006384:	b480      	push	{r7}
 8006386:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006388:	bf00      	nop
 800638a:	46bd      	mov	sp, r7
 800638c:	bc80      	pop	{r7}
 800638e:	4770      	bx	lr

08006390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	stop_motors();
 8006394:	f7ff f9c4 	bl	8005720 <stop_motors>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006398:	e7fe      	b.n	8006398 <HardFault_Handler+0x8>

0800639a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800639a:	b480      	push	{r7}
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */


  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800639e:	e7fe      	b.n	800639e <MemManage_Handler+0x4>

080063a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063a0:	b480      	push	{r7}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063a4:	e7fe      	b.n	80063a4 <BusFault_Handler+0x4>

080063a6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063a6:	b480      	push	{r7}
 80063a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063aa:	e7fe      	b.n	80063aa <UsageFault_Handler+0x4>

080063ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063b0:	bf00      	nop
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063bc:	bf00      	nop
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr

080063c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063c8:	bf00      	nop
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063d4:	f7fa feca 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80063d8:	bf00      	nop
 80063da:	bd80      	pop	{r7, pc}

080063dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_1)){
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <EXTI1_IRQHandler+0x20>)
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <EXTI1_IRQHandler+0x14>
		// Stop the motors
		prox_Interrupt();
 80063ec:	f7ff fd3e 	bl	8005e6c <prox_Interrupt>
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80063f0:	2002      	movs	r0, #2
 80063f2:	f7fb fbf5 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80063f6:	bf00      	nop
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	40010400 	.word	0x40010400

08006400 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006404:	4802      	ldr	r0, [pc, #8]	; (8006410 <DMA1_Channel4_IRQHandler+0x10>)
 8006406:	f7fb f92d 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800640a:	bf00      	nop
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20001430 	.word	0x20001430

08006414 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006418:	4802      	ldr	r0, [pc, #8]	; (8006424 <DMA1_Channel5_IRQHandler+0x10>)
 800641a:	f7fb f923 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800641e:	bf00      	nop
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20001474 	.word	0x20001474

08006428 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800642c:	4802      	ldr	r0, [pc, #8]	; (8006438 <DMA1_Channel6_IRQHandler+0x10>)
 800642e:	f7fb f919 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20001318 	.word	0x20001318

0800643c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8006440:	4802      	ldr	r0, [pc, #8]	; (800644c <DMA1_Channel7_IRQHandler+0x10>)
 8006442:	f7fb f90f 	bl	8001664 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006446:	bf00      	nop
 8006448:	bd80      	pop	{r7, pc}
 800644a:	bf00      	nop
 800644c:	200014b8 	.word	0x200014b8

08006450 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_8)){
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <EXTI9_5_IRQHandler+0x20>)
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <EXTI9_5_IRQHandler+0x14>
		// Stop the motors
		stop_motors();
 8006460:	f7ff f95e 	bl	8005720 <stop_motors>
	}


  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8006464:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006468:	f7fb fbba 	bl	8001be0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40010400 	.word	0x40010400

08006474 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	// When the timer3 overflows its time to run the main loop
	main_loop_trigger = 1;
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <TIM3_IRQHandler+0x14>)
 800647a:	2201      	movs	r2, #1
 800647c:	601a      	str	r2, [r3, #0]


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800647e:	4803      	ldr	r0, [pc, #12]	; (800648c <TIM3_IRQHandler+0x18>)
 8006480:	f7fd f918 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20001260 	.word	0x20001260
 800648c:	200013f0 	.word	0x200013f0

08006490 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8006494:	4802      	ldr	r0, [pc, #8]	; (80064a0 <TIM4_IRQHandler+0x10>)
 8006496:	f7fd f90d 	bl	80036b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800649a:	bf00      	nop
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2000135c 	.word	0x2000135c

080064a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80064a8:	4802      	ldr	r0, [pc, #8]	; (80064b4 <USART1_IRQHandler+0x10>)
 80064aa:	f7fd fefd 	bl	80042a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200012d8 	.word	0x200012d8

080064b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80064bc:	4802      	ldr	r0, [pc, #8]	; (80064c8 <USART2_IRQHandler+0x10>)
 80064be:	f7fd fef3 	bl	80042a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80064c2:	bf00      	nop
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	200015cc 	.word	0x200015cc

080064cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80064cc:	b480      	push	{r7}
 80064ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80064d0:	4b15      	ldr	r3, [pc, #84]	; (8006528 <SystemInit+0x5c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a14      	ldr	r2, [pc, #80]	; (8006528 <SystemInit+0x5c>)
 80064d6:	f043 0301 	orr.w	r3, r3, #1
 80064da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80064dc:	4b12      	ldr	r3, [pc, #72]	; (8006528 <SystemInit+0x5c>)
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	4911      	ldr	r1, [pc, #68]	; (8006528 <SystemInit+0x5c>)
 80064e2:	4b12      	ldr	r3, [pc, #72]	; (800652c <SystemInit+0x60>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80064e8:	4b0f      	ldr	r3, [pc, #60]	; (8006528 <SystemInit+0x5c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0e      	ldr	r2, [pc, #56]	; (8006528 <SystemInit+0x5c>)
 80064ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <SystemInit+0x5c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a0a      	ldr	r2, [pc, #40]	; (8006528 <SystemInit+0x5c>)
 80064fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006502:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006504:	4b08      	ldr	r3, [pc, #32]	; (8006528 <SystemInit+0x5c>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a07      	ldr	r2, [pc, #28]	; (8006528 <SystemInit+0x5c>)
 800650a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800650e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <SystemInit+0x5c>)
 8006512:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006516:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <SystemInit+0x64>)
 800651a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800651e:	609a      	str	r2, [r3, #8]
#endif 
}
 8006520:	bf00      	nop
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr
 8006528:	40021000 	.word	0x40021000
 800652c:	f8ff0000 	.word	0xf8ff0000
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006534:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006536:	e003      	b.n	8006540 <LoopCopyDataInit>

08006538 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800653a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800653c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800653e:	3104      	adds	r1, #4

08006540 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006540:	480a      	ldr	r0, [pc, #40]	; (800656c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006542:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006544:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006546:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006548:	d3f6      	bcc.n	8006538 <CopyDataInit>
  ldr r2, =_sbss
 800654a:	4a0a      	ldr	r2, [pc, #40]	; (8006574 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800654c:	e002      	b.n	8006554 <LoopFillZerobss>

0800654e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800654e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006550:	f842 3b04 	str.w	r3, [r2], #4

08006554 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006554:	4b08      	ldr	r3, [pc, #32]	; (8006578 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006556:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006558:	d3f9      	bcc.n	800654e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800655a:	f7ff ffb7 	bl	80064cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800655e:	f000 f80f 	bl	8006580 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006562:	f7fe fc63 	bl	8004e2c <main>
  bx lr
 8006566:	4770      	bx	lr
  ldr r3, =_sidata
 8006568:	08006b50 	.word	0x08006b50
  ldr r0, =_sdata
 800656c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006570:	2000001c 	.word	0x2000001c
  ldr r2, =_sbss
 8006574:	2000001c 	.word	0x2000001c
  ldr r3, = _ebss
 8006578:	2000160c 	.word	0x2000160c

0800657c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800657c:	e7fe      	b.n	800657c <ADC1_2_IRQHandler>
	...

08006580 <__libc_init_array>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	2500      	movs	r5, #0
 8006584:	4e0c      	ldr	r6, [pc, #48]	; (80065b8 <__libc_init_array+0x38>)
 8006586:	4c0d      	ldr	r4, [pc, #52]	; (80065bc <__libc_init_array+0x3c>)
 8006588:	1ba4      	subs	r4, r4, r6
 800658a:	10a4      	asrs	r4, r4, #2
 800658c:	42a5      	cmp	r5, r4
 800658e:	d109      	bne.n	80065a4 <__libc_init_array+0x24>
 8006590:	f000 fa94 	bl	8006abc <_init>
 8006594:	2500      	movs	r5, #0
 8006596:	4e0a      	ldr	r6, [pc, #40]	; (80065c0 <__libc_init_array+0x40>)
 8006598:	4c0a      	ldr	r4, [pc, #40]	; (80065c4 <__libc_init_array+0x44>)
 800659a:	1ba4      	subs	r4, r4, r6
 800659c:	10a4      	asrs	r4, r4, #2
 800659e:	42a5      	cmp	r5, r4
 80065a0:	d105      	bne.n	80065ae <__libc_init_array+0x2e>
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065a8:	4798      	blx	r3
 80065aa:	3501      	adds	r5, #1
 80065ac:	e7ee      	b.n	800658c <__libc_init_array+0xc>
 80065ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065b2:	4798      	blx	r3
 80065b4:	3501      	adds	r5, #1
 80065b6:	e7f2      	b.n	800659e <__libc_init_array+0x1e>
 80065b8:	08006b48 	.word	0x08006b48
 80065bc:	08006b48 	.word	0x08006b48
 80065c0:	08006b48 	.word	0x08006b48
 80065c4:	08006b4c 	.word	0x08006b4c

080065c8 <memset>:
 80065c8:	4603      	mov	r3, r0
 80065ca:	4402      	add	r2, r0
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d100      	bne.n	80065d2 <memset+0xa>
 80065d0:	4770      	bx	lr
 80065d2:	f803 1b01 	strb.w	r1, [r3], #1
 80065d6:	e7f9      	b.n	80065cc <memset+0x4>

080065d8 <atan2>:
 80065d8:	f000 b802 	b.w	80065e0 <__ieee754_atan2>
 80065dc:	0000      	movs	r0, r0
	...

080065e0 <__ieee754_atan2>:
 80065e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e4:	4256      	negs	r6, r2
 80065e6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 80065ea:	4316      	orrs	r6, r2
 80065ec:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8006798 <__ieee754_atan2+0x1b8>
 80065f0:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 80065f4:	454e      	cmp	r6, r9
 80065f6:	4604      	mov	r4, r0
 80065f8:	460d      	mov	r5, r1
 80065fa:	469e      	mov	lr, r3
 80065fc:	d808      	bhi.n	8006610 <__ieee754_atan2+0x30>
 80065fe:	4246      	negs	r6, r0
 8006600:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006604:	4306      	orrs	r6, r0
 8006606:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800660a:	454e      	cmp	r6, r9
 800660c:	4688      	mov	r8, r1
 800660e:	d906      	bls.n	800661e <__ieee754_atan2+0x3e>
 8006610:	4620      	mov	r0, r4
 8006612:	4629      	mov	r1, r5
 8006614:	f7f9 fda2 	bl	800015c <__adddf3>
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	e030      	b.n	8006680 <__ieee754_atan2+0xa0>
 800661e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006622:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006626:	4316      	orrs	r6, r2
 8006628:	d103      	bne.n	8006632 <__ieee754_atan2+0x52>
 800662a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662e:	f000 b8b7 	b.w	80067a0 <atan>
 8006632:	179e      	asrs	r6, r3, #30
 8006634:	f006 0602 	and.w	r6, r6, #2
 8006638:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800663c:	ea57 0100 	orrs.w	r1, r7, r0
 8006640:	d107      	bne.n	8006652 <__ieee754_atan2+0x72>
 8006642:	2e02      	cmp	r6, #2
 8006644:	d079      	beq.n	800673a <__ieee754_atan2+0x15a>
 8006646:	2e03      	cmp	r6, #3
 8006648:	d11a      	bne.n	8006680 <__ieee754_atan2+0xa0>
 800664a:	a541      	add	r5, pc, #260	; (adr r5, 8006750 <__ieee754_atan2+0x170>)
 800664c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006650:	e016      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006652:	ea5c 0102 	orrs.w	r1, ip, r2
 8006656:	d106      	bne.n	8006666 <__ieee754_atan2+0x86>
 8006658:	f1b8 0f00 	cmp.w	r8, #0
 800665c:	da71      	bge.n	8006742 <__ieee754_atan2+0x162>
 800665e:	a53e      	add	r5, pc, #248	; (adr r5, 8006758 <__ieee754_atan2+0x178>)
 8006660:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006664:	e00c      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006666:	45cc      	cmp	ip, r9
 8006668:	d123      	bne.n	80066b2 <__ieee754_atan2+0xd2>
 800666a:	4567      	cmp	r7, ip
 800666c:	d114      	bne.n	8006698 <__ieee754_atan2+0xb8>
 800666e:	2e02      	cmp	r6, #2
 8006670:	d00a      	beq.n	8006688 <__ieee754_atan2+0xa8>
 8006672:	2e03      	cmp	r6, #3
 8006674:	d00c      	beq.n	8006690 <__ieee754_atan2+0xb0>
 8006676:	2e01      	cmp	r6, #1
 8006678:	d15b      	bne.n	8006732 <__ieee754_atan2+0x152>
 800667a:	a539      	add	r5, pc, #228	; (adr r5, 8006760 <__ieee754_atan2+0x180>)
 800667c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006680:	4620      	mov	r0, r4
 8006682:	4629      	mov	r1, r5
 8006684:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006688:	a537      	add	r5, pc, #220	; (adr r5, 8006768 <__ieee754_atan2+0x188>)
 800668a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800668e:	e7f7      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006690:	a537      	add	r5, pc, #220	; (adr r5, 8006770 <__ieee754_atan2+0x190>)
 8006692:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006696:	e7f3      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006698:	2e02      	cmp	r6, #2
 800669a:	d04e      	beq.n	800673a <__ieee754_atan2+0x15a>
 800669c:	2e03      	cmp	r6, #3
 800669e:	d0d4      	beq.n	800664a <__ieee754_atan2+0x6a>
 80066a0:	2e01      	cmp	r6, #1
 80066a2:	f04f 0400 	mov.w	r4, #0
 80066a6:	d102      	bne.n	80066ae <__ieee754_atan2+0xce>
 80066a8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80066ac:	e7e8      	b.n	8006680 <__ieee754_atan2+0xa0>
 80066ae:	2500      	movs	r5, #0
 80066b0:	e7e6      	b.n	8006680 <__ieee754_atan2+0xa0>
 80066b2:	454f      	cmp	r7, r9
 80066b4:	d0d0      	beq.n	8006658 <__ieee754_atan2+0x78>
 80066b6:	eba7 070c 	sub.w	r7, r7, ip
 80066ba:	153f      	asrs	r7, r7, #20
 80066bc:	2f3c      	cmp	r7, #60	; 0x3c
 80066be:	dc1e      	bgt.n	80066fe <__ieee754_atan2+0x11e>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da01      	bge.n	80066c8 <__ieee754_atan2+0xe8>
 80066c4:	373c      	adds	r7, #60	; 0x3c
 80066c6:	db1e      	blt.n	8006706 <__ieee754_atan2+0x126>
 80066c8:	4620      	mov	r0, r4
 80066ca:	4629      	mov	r1, r5
 80066cc:	f7fa f826 	bl	800071c <__aeabi_ddiv>
 80066d0:	f000 f9f0 	bl	8006ab4 <fabs>
 80066d4:	f000 f864 	bl	80067a0 <atan>
 80066d8:	4604      	mov	r4, r0
 80066da:	460d      	mov	r5, r1
 80066dc:	2e01      	cmp	r6, #1
 80066de:	d015      	beq.n	800670c <__ieee754_atan2+0x12c>
 80066e0:	2e02      	cmp	r6, #2
 80066e2:	d017      	beq.n	8006714 <__ieee754_atan2+0x134>
 80066e4:	2e00      	cmp	r6, #0
 80066e6:	d0cb      	beq.n	8006680 <__ieee754_atan2+0xa0>
 80066e8:	a323      	add	r3, pc, #140	; (adr r3, 8006778 <__ieee754_atan2+0x198>)
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7f9 fd31 	bl	8000158 <__aeabi_dsub>
 80066f6:	a322      	add	r3, pc, #136	; (adr r3, 8006780 <__ieee754_atan2+0x1a0>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	e016      	b.n	800672c <__ieee754_atan2+0x14c>
 80066fe:	a522      	add	r5, pc, #136	; (adr r5, 8006788 <__ieee754_atan2+0x1a8>)
 8006700:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006704:	e7ea      	b.n	80066dc <__ieee754_atan2+0xfc>
 8006706:	2400      	movs	r4, #0
 8006708:	2500      	movs	r5, #0
 800670a:	e7e7      	b.n	80066dc <__ieee754_atan2+0xfc>
 800670c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006710:	461d      	mov	r5, r3
 8006712:	e7b5      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006714:	a318      	add	r3, pc, #96	; (adr r3, 8006778 <__ieee754_atan2+0x198>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	4620      	mov	r0, r4
 800671c:	4629      	mov	r1, r5
 800671e:	f7f9 fd1b 	bl	8000158 <__aeabi_dsub>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	a116      	add	r1, pc, #88	; (adr r1, 8006780 <__ieee754_atan2+0x1a0>)
 8006728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800672c:	f7f9 fd14 	bl	8000158 <__aeabi_dsub>
 8006730:	e772      	b.n	8006618 <__ieee754_atan2+0x38>
 8006732:	a517      	add	r5, pc, #92	; (adr r5, 8006790 <__ieee754_atan2+0x1b0>)
 8006734:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006738:	e7a2      	b.n	8006680 <__ieee754_atan2+0xa0>
 800673a:	a511      	add	r5, pc, #68	; (adr r5, 8006780 <__ieee754_atan2+0x1a0>)
 800673c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006740:	e79e      	b.n	8006680 <__ieee754_atan2+0xa0>
 8006742:	a511      	add	r5, pc, #68	; (adr r5, 8006788 <__ieee754_atan2+0x1a8>)
 8006744:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006748:	e79a      	b.n	8006680 <__ieee754_atan2+0xa0>
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	54442d18 	.word	0x54442d18
 8006754:	c00921fb 	.word	0xc00921fb
 8006758:	54442d18 	.word	0x54442d18
 800675c:	bff921fb 	.word	0xbff921fb
 8006760:	54442d18 	.word	0x54442d18
 8006764:	bfe921fb 	.word	0xbfe921fb
 8006768:	7f3321d2 	.word	0x7f3321d2
 800676c:	4002d97c 	.word	0x4002d97c
 8006770:	7f3321d2 	.word	0x7f3321d2
 8006774:	c002d97c 	.word	0xc002d97c
 8006778:	33145c07 	.word	0x33145c07
 800677c:	3ca1a626 	.word	0x3ca1a626
 8006780:	54442d18 	.word	0x54442d18
 8006784:	400921fb 	.word	0x400921fb
 8006788:	54442d18 	.word	0x54442d18
 800678c:	3ff921fb 	.word	0x3ff921fb
 8006790:	54442d18 	.word	0x54442d18
 8006794:	3fe921fb 	.word	0x3fe921fb
 8006798:	7ff00000 	.word	0x7ff00000
 800679c:	00000000 	.word	0x00000000

080067a0 <atan>:
 80067a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	4bb6      	ldr	r3, [pc, #728]	; (8006a80 <atan+0x2e0>)
 80067a6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80067aa:	429e      	cmp	r6, r3
 80067ac:	4604      	mov	r4, r0
 80067ae:	460d      	mov	r5, r1
 80067b0:	468b      	mov	fp, r1
 80067b2:	dd17      	ble.n	80067e4 <atan+0x44>
 80067b4:	4bb3      	ldr	r3, [pc, #716]	; (8006a84 <atan+0x2e4>)
 80067b6:	429e      	cmp	r6, r3
 80067b8:	dc01      	bgt.n	80067be <atan+0x1e>
 80067ba:	d109      	bne.n	80067d0 <atan+0x30>
 80067bc:	b140      	cbz	r0, 80067d0 <atan+0x30>
 80067be:	4622      	mov	r2, r4
 80067c0:	462b      	mov	r3, r5
 80067c2:	4620      	mov	r0, r4
 80067c4:	4629      	mov	r1, r5
 80067c6:	f7f9 fcc9 	bl	800015c <__adddf3>
 80067ca:	4604      	mov	r4, r0
 80067cc:	460d      	mov	r5, r1
 80067ce:	e005      	b.n	80067dc <atan+0x3c>
 80067d0:	f1bb 0f00 	cmp.w	fp, #0
 80067d4:	4cac      	ldr	r4, [pc, #688]	; (8006a88 <atan+0x2e8>)
 80067d6:	f340 8121 	ble.w	8006a1c <atan+0x27c>
 80067da:	4dac      	ldr	r5, [pc, #688]	; (8006a8c <atan+0x2ec>)
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	4baa      	ldr	r3, [pc, #680]	; (8006a90 <atan+0x2f0>)
 80067e6:	429e      	cmp	r6, r3
 80067e8:	dc11      	bgt.n	800680e <atan+0x6e>
 80067ea:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80067ee:	429e      	cmp	r6, r3
 80067f0:	dc0a      	bgt.n	8006808 <atan+0x68>
 80067f2:	a38b      	add	r3, pc, #556	; (adr r3, 8006a20 <atan+0x280>)
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f7f9 fcb0 	bl	800015c <__adddf3>
 80067fc:	2200      	movs	r2, #0
 80067fe:	4ba5      	ldr	r3, [pc, #660]	; (8006a94 <atan+0x2f4>)
 8006800:	f7fa f8f2 	bl	80009e8 <__aeabi_dcmpgt>
 8006804:	2800      	cmp	r0, #0
 8006806:	d1e9      	bne.n	80067dc <atan+0x3c>
 8006808:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800680c:	e027      	b.n	800685e <atan+0xbe>
 800680e:	f000 f951 	bl	8006ab4 <fabs>
 8006812:	4ba1      	ldr	r3, [pc, #644]	; (8006a98 <atan+0x2f8>)
 8006814:	4604      	mov	r4, r0
 8006816:	429e      	cmp	r6, r3
 8006818:	460d      	mov	r5, r1
 800681a:	f300 80b8 	bgt.w	800698e <atan+0x1ee>
 800681e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006822:	429e      	cmp	r6, r3
 8006824:	f300 809c 	bgt.w	8006960 <atan+0x1c0>
 8006828:	4602      	mov	r2, r0
 800682a:	460b      	mov	r3, r1
 800682c:	f7f9 fc96 	bl	800015c <__adddf3>
 8006830:	2200      	movs	r2, #0
 8006832:	4b98      	ldr	r3, [pc, #608]	; (8006a94 <atan+0x2f4>)
 8006834:	f7f9 fc90 	bl	8000158 <__aeabi_dsub>
 8006838:	2200      	movs	r2, #0
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006842:	4620      	mov	r0, r4
 8006844:	4629      	mov	r1, r5
 8006846:	f7f9 fc89 	bl	800015c <__adddf3>
 800684a:	4602      	mov	r2, r0
 800684c:	460b      	mov	r3, r1
 800684e:	4630      	mov	r0, r6
 8006850:	4639      	mov	r1, r7
 8006852:	f7f9 ff63 	bl	800071c <__aeabi_ddiv>
 8006856:	f04f 0a00 	mov.w	sl, #0
 800685a:	4604      	mov	r4, r0
 800685c:	460d      	mov	r5, r1
 800685e:	4622      	mov	r2, r4
 8006860:	462b      	mov	r3, r5
 8006862:	4620      	mov	r0, r4
 8006864:	4629      	mov	r1, r5
 8006866:	f7f9 fe2f 	bl	80004c8 <__aeabi_dmul>
 800686a:	4602      	mov	r2, r0
 800686c:	460b      	mov	r3, r1
 800686e:	4680      	mov	r8, r0
 8006870:	4689      	mov	r9, r1
 8006872:	f7f9 fe29 	bl	80004c8 <__aeabi_dmul>
 8006876:	a36c      	add	r3, pc, #432	; (adr r3, 8006a28 <atan+0x288>)
 8006878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687c:	4606      	mov	r6, r0
 800687e:	460f      	mov	r7, r1
 8006880:	f7f9 fe22 	bl	80004c8 <__aeabi_dmul>
 8006884:	a36a      	add	r3, pc, #424	; (adr r3, 8006a30 <atan+0x290>)
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 fc67 	bl	800015c <__adddf3>
 800688e:	4632      	mov	r2, r6
 8006890:	463b      	mov	r3, r7
 8006892:	f7f9 fe19 	bl	80004c8 <__aeabi_dmul>
 8006896:	a368      	add	r3, pc, #416	; (adr r3, 8006a38 <atan+0x298>)
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f7f9 fc5e 	bl	800015c <__adddf3>
 80068a0:	4632      	mov	r2, r6
 80068a2:	463b      	mov	r3, r7
 80068a4:	f7f9 fe10 	bl	80004c8 <__aeabi_dmul>
 80068a8:	a365      	add	r3, pc, #404	; (adr r3, 8006a40 <atan+0x2a0>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fc55 	bl	800015c <__adddf3>
 80068b2:	4632      	mov	r2, r6
 80068b4:	463b      	mov	r3, r7
 80068b6:	f7f9 fe07 	bl	80004c8 <__aeabi_dmul>
 80068ba:	a363      	add	r3, pc, #396	; (adr r3, 8006a48 <atan+0x2a8>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fc4c 	bl	800015c <__adddf3>
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	f7f9 fdfe 	bl	80004c8 <__aeabi_dmul>
 80068cc:	a360      	add	r3, pc, #384	; (adr r3, 8006a50 <atan+0x2b0>)
 80068ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d2:	f7f9 fc43 	bl	800015c <__adddf3>
 80068d6:	4642      	mov	r2, r8
 80068d8:	464b      	mov	r3, r9
 80068da:	f7f9 fdf5 	bl	80004c8 <__aeabi_dmul>
 80068de:	a35e      	add	r3, pc, #376	; (adr r3, 8006a58 <atan+0x2b8>)
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	4680      	mov	r8, r0
 80068e6:	4689      	mov	r9, r1
 80068e8:	4630      	mov	r0, r6
 80068ea:	4639      	mov	r1, r7
 80068ec:	f7f9 fdec 	bl	80004c8 <__aeabi_dmul>
 80068f0:	a35b      	add	r3, pc, #364	; (adr r3, 8006a60 <atan+0x2c0>)
 80068f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f6:	f7f9 fc2f 	bl	8000158 <__aeabi_dsub>
 80068fa:	4632      	mov	r2, r6
 80068fc:	463b      	mov	r3, r7
 80068fe:	f7f9 fde3 	bl	80004c8 <__aeabi_dmul>
 8006902:	a359      	add	r3, pc, #356	; (adr r3, 8006a68 <atan+0x2c8>)
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f7f9 fc26 	bl	8000158 <__aeabi_dsub>
 800690c:	4632      	mov	r2, r6
 800690e:	463b      	mov	r3, r7
 8006910:	f7f9 fdda 	bl	80004c8 <__aeabi_dmul>
 8006914:	a356      	add	r3, pc, #344	; (adr r3, 8006a70 <atan+0x2d0>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f7f9 fc1d 	bl	8000158 <__aeabi_dsub>
 800691e:	4632      	mov	r2, r6
 8006920:	463b      	mov	r3, r7
 8006922:	f7f9 fdd1 	bl	80004c8 <__aeabi_dmul>
 8006926:	a354      	add	r3, pc, #336	; (adr r3, 8006a78 <atan+0x2d8>)
 8006928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692c:	f7f9 fc14 	bl	8000158 <__aeabi_dsub>
 8006930:	4632      	mov	r2, r6
 8006932:	463b      	mov	r3, r7
 8006934:	f7f9 fdc8 	bl	80004c8 <__aeabi_dmul>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4640      	mov	r0, r8
 800693e:	4649      	mov	r1, r9
 8006940:	f7f9 fc0c 	bl	800015c <__adddf3>
 8006944:	4622      	mov	r2, r4
 8006946:	462b      	mov	r3, r5
 8006948:	f7f9 fdbe 	bl	80004c8 <__aeabi_dmul>
 800694c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	d144      	bne.n	80069e0 <atan+0x240>
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7f9 fbfd 	bl	8000158 <__aeabi_dsub>
 800695e:	e734      	b.n	80067ca <atan+0x2a>
 8006960:	2200      	movs	r2, #0
 8006962:	4b4c      	ldr	r3, [pc, #304]	; (8006a94 <atan+0x2f4>)
 8006964:	f7f9 fbf8 	bl	8000158 <__aeabi_dsub>
 8006968:	2200      	movs	r2, #0
 800696a:	4606      	mov	r6, r0
 800696c:	460f      	mov	r7, r1
 800696e:	4b49      	ldr	r3, [pc, #292]	; (8006a94 <atan+0x2f4>)
 8006970:	4620      	mov	r0, r4
 8006972:	4629      	mov	r1, r5
 8006974:	f7f9 fbf2 	bl	800015c <__adddf3>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	4630      	mov	r0, r6
 800697e:	4639      	mov	r1, r7
 8006980:	f7f9 fecc 	bl	800071c <__aeabi_ddiv>
 8006984:	f04f 0a01 	mov.w	sl, #1
 8006988:	4604      	mov	r4, r0
 800698a:	460d      	mov	r5, r1
 800698c:	e767      	b.n	800685e <atan+0xbe>
 800698e:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <atan+0x2fc>)
 8006990:	429e      	cmp	r6, r3
 8006992:	dc1a      	bgt.n	80069ca <atan+0x22a>
 8006994:	2200      	movs	r2, #0
 8006996:	4b42      	ldr	r3, [pc, #264]	; (8006aa0 <atan+0x300>)
 8006998:	f7f9 fbde 	bl	8000158 <__aeabi_dsub>
 800699c:	2200      	movs	r2, #0
 800699e:	4606      	mov	r6, r0
 80069a0:	460f      	mov	r7, r1
 80069a2:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <atan+0x300>)
 80069a4:	4620      	mov	r0, r4
 80069a6:	4629      	mov	r1, r5
 80069a8:	f7f9 fd8e 	bl	80004c8 <__aeabi_dmul>
 80069ac:	2200      	movs	r2, #0
 80069ae:	4b39      	ldr	r3, [pc, #228]	; (8006a94 <atan+0x2f4>)
 80069b0:	f7f9 fbd4 	bl	800015c <__adddf3>
 80069b4:	4602      	mov	r2, r0
 80069b6:	460b      	mov	r3, r1
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7f9 feae 	bl	800071c <__aeabi_ddiv>
 80069c0:	f04f 0a02 	mov.w	sl, #2
 80069c4:	4604      	mov	r4, r0
 80069c6:	460d      	mov	r5, r1
 80069c8:	e749      	b.n	800685e <atan+0xbe>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	2000      	movs	r0, #0
 80069d0:	4934      	ldr	r1, [pc, #208]	; (8006aa4 <atan+0x304>)
 80069d2:	f7f9 fea3 	bl	800071c <__aeabi_ddiv>
 80069d6:	f04f 0a03 	mov.w	sl, #3
 80069da:	4604      	mov	r4, r0
 80069dc:	460d      	mov	r5, r1
 80069de:	e73e      	b.n	800685e <atan+0xbe>
 80069e0:	4b31      	ldr	r3, [pc, #196]	; (8006aa8 <atan+0x308>)
 80069e2:	4e32      	ldr	r6, [pc, #200]	; (8006aac <atan+0x30c>)
 80069e4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80069e8:	4456      	add	r6, sl
 80069ea:	449a      	add	sl, r3
 80069ec:	e9da 2300 	ldrd	r2, r3, [sl]
 80069f0:	f7f9 fbb2 	bl	8000158 <__aeabi_dsub>
 80069f4:	4622      	mov	r2, r4
 80069f6:	462b      	mov	r3, r5
 80069f8:	f7f9 fbae 	bl	8000158 <__aeabi_dsub>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	e9d6 0100 	ldrd	r0, r1, [r6]
 8006a04:	f7f9 fba8 	bl	8000158 <__aeabi_dsub>
 8006a08:	f1bb 0f00 	cmp.w	fp, #0
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	460d      	mov	r5, r1
 8006a10:	f6bf aee4 	bge.w	80067dc <atan+0x3c>
 8006a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a18:	461d      	mov	r5, r3
 8006a1a:	e6df      	b.n	80067dc <atan+0x3c>
 8006a1c:	4d24      	ldr	r5, [pc, #144]	; (8006ab0 <atan+0x310>)
 8006a1e:	e6dd      	b.n	80067dc <atan+0x3c>
 8006a20:	8800759c 	.word	0x8800759c
 8006a24:	7e37e43c 	.word	0x7e37e43c
 8006a28:	e322da11 	.word	0xe322da11
 8006a2c:	3f90ad3a 	.word	0x3f90ad3a
 8006a30:	24760deb 	.word	0x24760deb
 8006a34:	3fa97b4b 	.word	0x3fa97b4b
 8006a38:	a0d03d51 	.word	0xa0d03d51
 8006a3c:	3fb10d66 	.word	0x3fb10d66
 8006a40:	c54c206e 	.word	0xc54c206e
 8006a44:	3fb745cd 	.word	0x3fb745cd
 8006a48:	920083ff 	.word	0x920083ff
 8006a4c:	3fc24924 	.word	0x3fc24924
 8006a50:	5555550d 	.word	0x5555550d
 8006a54:	3fd55555 	.word	0x3fd55555
 8006a58:	2c6a6c2f 	.word	0x2c6a6c2f
 8006a5c:	bfa2b444 	.word	0xbfa2b444
 8006a60:	52defd9a 	.word	0x52defd9a
 8006a64:	3fadde2d 	.word	0x3fadde2d
 8006a68:	af749a6d 	.word	0xaf749a6d
 8006a6c:	3fb3b0f2 	.word	0x3fb3b0f2
 8006a70:	fe231671 	.word	0xfe231671
 8006a74:	3fbc71c6 	.word	0x3fbc71c6
 8006a78:	9998ebc4 	.word	0x9998ebc4
 8006a7c:	3fc99999 	.word	0x3fc99999
 8006a80:	440fffff 	.word	0x440fffff
 8006a84:	7ff00000 	.word	0x7ff00000
 8006a88:	54442d18 	.word	0x54442d18
 8006a8c:	3ff921fb 	.word	0x3ff921fb
 8006a90:	3fdbffff 	.word	0x3fdbffff
 8006a94:	3ff00000 	.word	0x3ff00000
 8006a98:	3ff2ffff 	.word	0x3ff2ffff
 8006a9c:	40037fff 	.word	0x40037fff
 8006aa0:	3ff80000 	.word	0x3ff80000
 8006aa4:	bff00000 	.word	0xbff00000
 8006aa8:	08006b28 	.word	0x08006b28
 8006aac:	08006b08 	.word	0x08006b08
 8006ab0:	bff921fb 	.word	0xbff921fb

08006ab4 <fabs>:
 8006ab4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4770      	bx	lr

08006abc <_init>:
 8006abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006abe:	bf00      	nop
 8006ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ac2:	bc08      	pop	{r3}
 8006ac4:	469e      	mov	lr, r3
 8006ac6:	4770      	bx	lr

08006ac8 <_fini>:
 8006ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aca:	bf00      	nop
 8006acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ace:	bc08      	pop	{r3}
 8006ad0:	469e      	mov	lr, r3
 8006ad2:	4770      	bx	lr
