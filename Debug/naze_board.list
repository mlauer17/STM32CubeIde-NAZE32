
naze_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080073e8  080073e8  000173e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075b8  080075b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080075b8  080075b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075b8  080075b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075b8  080075b8  000175b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075bc  080075bc  000175bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080075c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001398  20000070  08007630  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001408  08007630  00021408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8d3  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002373  00000000  00000000  0002f96c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  00031ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00032c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a45  00000000  00000000  00033a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b347  00000000  00000000  000494c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075b20  00000000  00000000  0005480c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ca32c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a84  00000000  00000000  000ca3a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080073cc 	.word	0x080073cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080073cc 	.word	0x080073cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_frsub>:
 8000afc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	e002      	b.n	8000b08 <__addsf3>
 8000b02:	bf00      	nop

08000b04 <__aeabi_fsub>:
 8000b04:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b08 <__addsf3>:
 8000b08:	0042      	lsls	r2, r0, #1
 8000b0a:	bf1f      	itttt	ne
 8000b0c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b10:	ea92 0f03 	teqne	r2, r3
 8000b14:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b18:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b1c:	d06a      	beq.n	8000bf4 <__addsf3+0xec>
 8000b1e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b22:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b26:	bfc1      	itttt	gt
 8000b28:	18d2      	addgt	r2, r2, r3
 8000b2a:	4041      	eorgt	r1, r0
 8000b2c:	4048      	eorgt	r0, r1
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	bfb8      	it	lt
 8000b32:	425b      	neglt	r3, r3
 8000b34:	2b19      	cmp	r3, #25
 8000b36:	bf88      	it	hi
 8000b38:	4770      	bxhi	lr
 8000b3a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b42:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b52:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b56:	bf18      	it	ne
 8000b58:	4249      	negne	r1, r1
 8000b5a:	ea92 0f03 	teq	r2, r3
 8000b5e:	d03f      	beq.n	8000be0 <__addsf3+0xd8>
 8000b60:	f1a2 0201 	sub.w	r2, r2, #1
 8000b64:	fa41 fc03 	asr.w	ip, r1, r3
 8000b68:	eb10 000c 	adds.w	r0, r0, ip
 8000b6c:	f1c3 0320 	rsb	r3, r3, #32
 8000b70:	fa01 f103 	lsl.w	r1, r1, r3
 8000b74:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__addsf3+0x78>
 8000b7a:	4249      	negs	r1, r1
 8000b7c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b80:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b84:	d313      	bcc.n	8000bae <__addsf3+0xa6>
 8000b86:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b8a:	d306      	bcc.n	8000b9a <__addsf3+0x92>
 8000b8c:	0840      	lsrs	r0, r0, #1
 8000b8e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b92:	f102 0201 	add.w	r2, r2, #1
 8000b96:	2afe      	cmp	r2, #254	; 0xfe
 8000b98:	d251      	bcs.n	8000c3e <__addsf3+0x136>
 8000b9a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba2:	bf08      	it	eq
 8000ba4:	f020 0001 	biceq.w	r0, r0, #1
 8000ba8:	ea40 0003 	orr.w	r0, r0, r3
 8000bac:	4770      	bx	lr
 8000bae:	0049      	lsls	r1, r1, #1
 8000bb0:	eb40 0000 	adc.w	r0, r0, r0
 8000bb4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bb8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bbc:	d1ed      	bne.n	8000b9a <__addsf3+0x92>
 8000bbe:	fab0 fc80 	clz	ip, r0
 8000bc2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bc6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bca:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bce:	bfaa      	itet	ge
 8000bd0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd4:	4252      	neglt	r2, r2
 8000bd6:	4318      	orrge	r0, r3
 8000bd8:	bfbc      	itt	lt
 8000bda:	40d0      	lsrlt	r0, r2
 8000bdc:	4318      	orrlt	r0, r3
 8000bde:	4770      	bx	lr
 8000be0:	f092 0f00 	teq	r2, #0
 8000be4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000be8:	bf06      	itte	eq
 8000bea:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bee:	3201      	addeq	r2, #1
 8000bf0:	3b01      	subne	r3, #1
 8000bf2:	e7b5      	b.n	8000b60 <__addsf3+0x58>
 8000bf4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bf8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bfc:	bf18      	it	ne
 8000bfe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c02:	d021      	beq.n	8000c48 <__addsf3+0x140>
 8000c04:	ea92 0f03 	teq	r2, r3
 8000c08:	d004      	beq.n	8000c14 <__addsf3+0x10c>
 8000c0a:	f092 0f00 	teq	r2, #0
 8000c0e:	bf08      	it	eq
 8000c10:	4608      	moveq	r0, r1
 8000c12:	4770      	bx	lr
 8000c14:	ea90 0f01 	teq	r0, r1
 8000c18:	bf1c      	itt	ne
 8000c1a:	2000      	movne	r0, #0
 8000c1c:	4770      	bxne	lr
 8000c1e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c22:	d104      	bne.n	8000c2e <__addsf3+0x126>
 8000c24:	0040      	lsls	r0, r0, #1
 8000c26:	bf28      	it	cs
 8000c28:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	4770      	bx	lr
 8000c2e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c32:	bf3c      	itt	cc
 8000c34:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bxcc	lr
 8000c3a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c3e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c46:	4770      	bx	lr
 8000c48:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c4c:	bf16      	itet	ne
 8000c4e:	4608      	movne	r0, r1
 8000c50:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c54:	4601      	movne	r1, r0
 8000c56:	0242      	lsls	r2, r0, #9
 8000c58:	bf06      	itte	eq
 8000c5a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c5e:	ea90 0f01 	teqeq	r0, r1
 8000c62:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_ui2f>:
 8000c68:	f04f 0300 	mov.w	r3, #0
 8000c6c:	e004      	b.n	8000c78 <__aeabi_i2f+0x8>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_i2f>:
 8000c70:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c74:	bf48      	it	mi
 8000c76:	4240      	negmi	r0, r0
 8000c78:	ea5f 0c00 	movs.w	ip, r0
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c84:	4601      	mov	r1, r0
 8000c86:	f04f 0000 	mov.w	r0, #0
 8000c8a:	e01c      	b.n	8000cc6 <__aeabi_l2f+0x2a>

08000c8c <__aeabi_ul2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e00a      	b.n	8000cb0 <__aeabi_l2f+0x14>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_l2f>:
 8000c9c:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__aeabi_l2f+0x14>
 8000caa:	4240      	negs	r0, r0
 8000cac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb0:	ea5f 0c01 	movs.w	ip, r1
 8000cb4:	bf02      	ittt	eq
 8000cb6:	4684      	moveq	ip, r0
 8000cb8:	4601      	moveq	r1, r0
 8000cba:	2000      	moveq	r0, #0
 8000cbc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cc0:	bf08      	it	eq
 8000cc2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cc6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cca:	fabc f28c 	clz	r2, ip
 8000cce:	3a08      	subs	r2, #8
 8000cd0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd4:	db10      	blt.n	8000cf8 <__aeabi_l2f+0x5c>
 8000cd6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cda:	4463      	add	r3, ip
 8000cdc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce0:	f1c2 0220 	rsb	r2, r2, #32
 8000ce4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ce8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cec:	eb43 0002 	adc.w	r0, r3, r2
 8000cf0:	bf08      	it	eq
 8000cf2:	f020 0001 	biceq.w	r0, r0, #1
 8000cf6:	4770      	bx	lr
 8000cf8:	f102 0220 	add.w	r2, r2, #32
 8000cfc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d00:	f1c2 0220 	rsb	r2, r2, #32
 8000d04:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d08:	fa21 f202 	lsr.w	r2, r1, r2
 8000d0c:	eb43 0002 	adc.w	r0, r3, r2
 8000d10:	bf08      	it	eq
 8000d12:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_fmul>:
 8000d18:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d20:	bf1e      	ittt	ne
 8000d22:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d26:	ea92 0f0c 	teqne	r2, ip
 8000d2a:	ea93 0f0c 	teqne	r3, ip
 8000d2e:	d06f      	beq.n	8000e10 <__aeabi_fmul+0xf8>
 8000d30:	441a      	add	r2, r3
 8000d32:	ea80 0c01 	eor.w	ip, r0, r1
 8000d36:	0240      	lsls	r0, r0, #9
 8000d38:	bf18      	it	ne
 8000d3a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d3e:	d01e      	beq.n	8000d7e <__aeabi_fmul+0x66>
 8000d40:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d44:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d48:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d4c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d54:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d58:	bf3e      	ittt	cc
 8000d5a:	0049      	lslcc	r1, r1, #1
 8000d5c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d60:	005b      	lslcc	r3, r3, #1
 8000d62:	ea40 0001 	orr.w	r0, r0, r1
 8000d66:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d6a:	2afd      	cmp	r2, #253	; 0xfd
 8000d6c:	d81d      	bhi.n	8000daa <__aeabi_fmul+0x92>
 8000d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	4770      	bx	lr
 8000d7e:	f090 0f00 	teq	r0, #0
 8000d82:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d86:	bf08      	it	eq
 8000d88:	0249      	lsleq	r1, r1, #9
 8000d8a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d92:	3a7f      	subs	r2, #127	; 0x7f
 8000d94:	bfc2      	ittt	gt
 8000d96:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d9a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d9e:	4770      	bxgt	lr
 8000da0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	3a01      	subs	r2, #1
 8000daa:	dc5d      	bgt.n	8000e68 <__aeabi_fmul+0x150>
 8000dac:	f112 0f19 	cmn.w	r2, #25
 8000db0:	bfdc      	itt	le
 8000db2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000db6:	4770      	bxle	lr
 8000db8:	f1c2 0200 	rsb	r2, r2, #0
 8000dbc:	0041      	lsls	r1, r0, #1
 8000dbe:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc2:	f1c2 0220 	rsb	r2, r2, #32
 8000dc6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dca:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dce:	f140 0000 	adc.w	r0, r0, #0
 8000dd2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dd6:	bf08      	it	eq
 8000dd8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ddc:	4770      	bx	lr
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de6:	bf02      	ittt	eq
 8000de8:	0040      	lsleq	r0, r0, #1
 8000dea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dee:	3a01      	subeq	r2, #1
 8000df0:	d0f9      	beq.n	8000de6 <__aeabi_fmul+0xce>
 8000df2:	ea40 000c 	orr.w	r0, r0, ip
 8000df6:	f093 0f00 	teq	r3, #0
 8000dfa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0049      	lsleq	r1, r1, #1
 8000e02:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e06:	3b01      	subeq	r3, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xe6>
 8000e0a:	ea41 010c 	orr.w	r1, r1, ip
 8000e0e:	e78f      	b.n	8000d30 <__aeabi_fmul+0x18>
 8000e10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e14:	ea92 0f0c 	teq	r2, ip
 8000e18:	bf18      	it	ne
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d00a      	beq.n	8000e36 <__aeabi_fmul+0x11e>
 8000e20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e24:	bf18      	it	ne
 8000e26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	d1d8      	bne.n	8000dde <__aeabi_fmul+0xc6>
 8000e2c:	ea80 0001 	eor.w	r0, r0, r1
 8000e30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e34:	4770      	bx	lr
 8000e36:	f090 0f00 	teq	r0, #0
 8000e3a:	bf17      	itett	ne
 8000e3c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e40:	4608      	moveq	r0, r1
 8000e42:	f091 0f00 	teqne	r1, #0
 8000e46:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e4a:	d014      	beq.n	8000e76 <__aeabi_fmul+0x15e>
 8000e4c:	ea92 0f0c 	teq	r2, ip
 8000e50:	d101      	bne.n	8000e56 <__aeabi_fmul+0x13e>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d10f      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e56:	ea93 0f0c 	teq	r3, ip
 8000e5a:	d103      	bne.n	8000e64 <__aeabi_fmul+0x14c>
 8000e5c:	024b      	lsls	r3, r1, #9
 8000e5e:	bf18      	it	ne
 8000e60:	4608      	movne	r0, r1
 8000e62:	d108      	bne.n	8000e76 <__aeabi_fmul+0x15e>
 8000e64:	ea80 0001 	eor.w	r0, r0, r1
 8000e68:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e7a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e7e:	4770      	bx	lr

08000e80 <__aeabi_fdiv>:
 8000e80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e88:	bf1e      	ittt	ne
 8000e8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e8e:	ea92 0f0c 	teqne	r2, ip
 8000e92:	ea93 0f0c 	teqne	r3, ip
 8000e96:	d069      	beq.n	8000f6c <__aeabi_fdiv+0xec>
 8000e98:	eba2 0203 	sub.w	r2, r2, r3
 8000e9c:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea0:	0249      	lsls	r1, r1, #9
 8000ea2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ea6:	d037      	beq.n	8000f18 <__aeabi_fdiv+0x98>
 8000ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000eac:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb8:	428b      	cmp	r3, r1
 8000eba:	bf38      	it	cc
 8000ebc:	005b      	lslcc	r3, r3, #1
 8000ebe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ec2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	bf24      	itt	cs
 8000eca:	1a5b      	subcs	r3, r3, r1
 8000ecc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed4:	bf24      	itt	cs
 8000ed6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eda:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ede:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee2:	bf24      	itt	cs
 8000ee4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ee8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ef6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	bf18      	it	ne
 8000efe:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f02:	d1e0      	bne.n	8000ec6 <__aeabi_fdiv+0x46>
 8000f04:	2afd      	cmp	r2, #253	; 0xfd
 8000f06:	f63f af50 	bhi.w	8000daa <__aeabi_fmul+0x92>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f10:	bf08      	it	eq
 8000f12:	f020 0001 	biceq.w	r0, r0, #1
 8000f16:	4770      	bx	lr
 8000f18:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f1c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f20:	327f      	adds	r2, #127	; 0x7f
 8000f22:	bfc2      	ittt	gt
 8000f24:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f28:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f2c:	4770      	bxgt	lr
 8000f2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	3a01      	subs	r2, #1
 8000f38:	e737      	b.n	8000daa <__aeabi_fmul+0x92>
 8000f3a:	f092 0f00 	teq	r2, #0
 8000f3e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0040      	lsleq	r0, r0, #1
 8000f46:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4a:	3a01      	subeq	r2, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fdiv+0xc2>
 8000f4e:	ea40 000c 	orr.w	r0, r0, ip
 8000f52:	f093 0f00 	teq	r3, #0
 8000f56:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0049      	lsleq	r1, r1, #1
 8000f5e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f62:	3b01      	subeq	r3, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xda>
 8000f66:	ea41 010c 	orr.w	r1, r1, ip
 8000f6a:	e795      	b.n	8000e98 <__aeabi_fdiv+0x18>
 8000f6c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f70:	ea92 0f0c 	teq	r2, ip
 8000f74:	d108      	bne.n	8000f88 <__aeabi_fdiv+0x108>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	f47f af7d 	bne.w	8000e76 <__aeabi_fmul+0x15e>
 8000f7c:	ea93 0f0c 	teq	r3, ip
 8000f80:	f47f af70 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e776      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f88:	ea93 0f0c 	teq	r3, ip
 8000f8c:	d104      	bne.n	8000f98 <__aeabi_fdiv+0x118>
 8000f8e:	024b      	lsls	r3, r1, #9
 8000f90:	f43f af4c 	beq.w	8000e2c <__aeabi_fmul+0x114>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e76e      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000f98:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f9c:	bf18      	it	ne
 8000f9e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fa2:	d1ca      	bne.n	8000f3a <__aeabi_fdiv+0xba>
 8000fa4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fa8:	f47f af5c 	bne.w	8000e64 <__aeabi_fmul+0x14c>
 8000fac:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fb0:	f47f af3c 	bne.w	8000e2c <__aeabi_fmul+0x114>
 8000fb4:	e75f      	b.n	8000e76 <__aeabi_fmul+0x15e>
 8000fb6:	bf00      	nop

08000fb8 <__gesf2>:
 8000fb8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fbc:	e006      	b.n	8000fcc <__cmpsf2+0x4>
 8000fbe:	bf00      	nop

08000fc0 <__lesf2>:
 8000fc0:	f04f 0c01 	mov.w	ip, #1
 8000fc4:	e002      	b.n	8000fcc <__cmpsf2+0x4>
 8000fc6:	bf00      	nop

08000fc8 <__cmpsf2>:
 8000fc8:	f04f 0c01 	mov.w	ip, #1
 8000fcc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fdc:	bf18      	it	ne
 8000fde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe2:	d011      	beq.n	8001008 <__cmpsf2+0x40>
 8000fe4:	b001      	add	sp, #4
 8000fe6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fea:	bf18      	it	ne
 8000fec:	ea90 0f01 	teqne	r0, r1
 8000ff0:	bf58      	it	pl
 8000ff2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ff6:	bf88      	it	hi
 8000ff8:	17c8      	asrhi	r0, r1, #31
 8000ffa:	bf38      	it	cc
 8000ffc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001000:	bf18      	it	ne
 8001002:	f040 0001 	orrne.w	r0, r0, #1
 8001006:	4770      	bx	lr
 8001008:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800100c:	d102      	bne.n	8001014 <__cmpsf2+0x4c>
 800100e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001012:	d105      	bne.n	8001020 <__cmpsf2+0x58>
 8001014:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001018:	d1e4      	bne.n	8000fe4 <__cmpsf2+0x1c>
 800101a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800101e:	d0e1      	beq.n	8000fe4 <__cmpsf2+0x1c>
 8001020:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <__aeabi_cfrcmple>:
 8001028:	4684      	mov	ip, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4661      	mov	r1, ip
 800102e:	e7ff      	b.n	8001030 <__aeabi_cfcmpeq>

08001030 <__aeabi_cfcmpeq>:
 8001030:	b50f      	push	{r0, r1, r2, r3, lr}
 8001032:	f7ff ffc9 	bl	8000fc8 <__cmpsf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	bf48      	it	mi
 800103a:	f110 0f00 	cmnmi.w	r0, #0
 800103e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001040 <__aeabi_fcmpeq>:
 8001040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001044:	f7ff fff4 	bl	8001030 <__aeabi_cfcmpeq>
 8001048:	bf0c      	ite	eq
 800104a:	2001      	moveq	r0, #1
 800104c:	2000      	movne	r0, #0
 800104e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001052:	bf00      	nop

08001054 <__aeabi_fcmplt>:
 8001054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001058:	f7ff ffea 	bl	8001030 <__aeabi_cfcmpeq>
 800105c:	bf34      	ite	cc
 800105e:	2001      	movcc	r0, #1
 8001060:	2000      	movcs	r0, #0
 8001062:	f85d fb08 	ldr.w	pc, [sp], #8
 8001066:	bf00      	nop

08001068 <__aeabi_fcmple>:
 8001068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800106c:	f7ff ffe0 	bl	8001030 <__aeabi_cfcmpeq>
 8001070:	bf94      	ite	ls
 8001072:	2001      	movls	r0, #1
 8001074:	2000      	movhi	r0, #0
 8001076:	f85d fb08 	ldr.w	pc, [sp], #8
 800107a:	bf00      	nop

0800107c <__aeabi_fcmpge>:
 800107c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001080:	f7ff ffd2 	bl	8001028 <__aeabi_cfrcmple>
 8001084:	bf94      	ite	ls
 8001086:	2001      	movls	r0, #1
 8001088:	2000      	movhi	r0, #0
 800108a:	f85d fb08 	ldr.w	pc, [sp], #8
 800108e:	bf00      	nop

08001090 <__aeabi_fcmpgt>:
 8001090:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001094:	f7ff ffc8 	bl	8001028 <__aeabi_cfrcmple>
 8001098:	bf34      	ite	cc
 800109a:	2001      	movcc	r0, #1
 800109c:	2000      	movcs	r0, #0
 800109e:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a2:	bf00      	nop

080010a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <HAL_Init+0x28>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <HAL_Init+0x28>)
 80010ae:	f043 0310 	orr.w	r3, r3, #16
 80010b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b4:	2003      	movs	r0, #3
 80010b6:	f000 f945 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ba:	2000      	movs	r0, #0
 80010bc:	f000 f808 	bl	80010d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c0:	f004 f90e 	bl	80052e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_InitTick+0x54>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x58>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f95d 	bl	80013ae <HAL_SYSTICK_Config>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00e      	b.n	800111c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b0f      	cmp	r3, #15
 8001102:	d80a      	bhi.n	800111a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001104:	2200      	movs	r2, #0
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800110c:	f000 f925 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001110:	4a06      	ldr	r2, [pc, #24]	; (800112c <HAL_InitTick+0x5c>)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000008 	.word	0x20000008
 8001128:	20000004 	.word	0x20000004
 800112c:	20000000 	.word	0x20000000

08001130 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <HAL_IncTick+0x1c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_IncTick+0x20>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a03      	ldr	r2, [pc, #12]	; (8001150 <HAL_IncTick+0x20>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr
 800114c:	20000004 	.word	0x20000004
 8001150:	20001298 	.word	0x20001298

08001154 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b02      	ldr	r3, [pc, #8]	; (8001164 <HAL_GetTick+0x10>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr
 8001164:	20001298 	.word	0x20001298

08001168 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001170:	f7ff fff0 	bl	8001154 <HAL_GetTick>
 8001174:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001180:	d005      	beq.n	800118e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_Delay+0x40>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118e:	bf00      	nop
 8001190:	f7ff ffe0 	bl	8001154 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d8f7      	bhi.n	8001190 <HAL_Delay+0x28>
  {
  }
}
 80011a0:	bf00      	nop
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20000004 	.word	0x20000004

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	; (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	; (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4906      	ldr	r1, [pc, #24]	; (8001244 <__NVIC_EnableIRQ+0x34>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100

08001248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	; (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	; (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	bc80      	pop	{r7}
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	; 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001324:	f7ff ff90 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff2d 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff42 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff35 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e043      	b.n	8001466 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <HAL_DMA_Init+0xa8>)
 80013e6:	4413      	add	r3, r2
 80013e8:	4a22      	ldr	r2, [pc, #136]	; (8001474 <HAL_DMA_Init+0xac>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	009a      	lsls	r2, r3, #2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <HAL_DMA_Init+0xb0>)
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2202      	movs	r2, #2
 8001400:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001412:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	bffdfff8 	.word	0xbffdfff8
 8001474:	cccccccd 	.word	0xcccccccd
 8001478:	40020000 	.word	0x40020000

0800147c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800148e:	2b02      	cmp	r3, #2
 8001490:	d005      	beq.n	800149e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2204      	movs	r2, #4
 8001496:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e051      	b.n	8001542 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 020e 	bic.w	r2, r2, #14
 80014ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f022 0201 	bic.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <HAL_DMA_Abort_IT+0xd0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d029      	beq.n	800151c <HAL_DMA_Abort_IT+0xa0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <HAL_DMA_Abort_IT+0xd4>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d022      	beq.n	8001518 <HAL_DMA_Abort_IT+0x9c>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <HAL_DMA_Abort_IT+0xd8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d01a      	beq.n	8001512 <HAL_DMA_Abort_IT+0x96>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <HAL_DMA_Abort_IT+0xdc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d012      	beq.n	800150c <HAL_DMA_Abort_IT+0x90>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	; (800155c <HAL_DMA_Abort_IT+0xe0>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d00a      	beq.n	8001506 <HAL_DMA_Abort_IT+0x8a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	; (8001560 <HAL_DMA_Abort_IT+0xe4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d102      	bne.n	8001500 <HAL_DMA_Abort_IT+0x84>
 80014fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014fe:	e00e      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001504:	e00b      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001506:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150a:	e008      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 800150c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001510:	e005      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001512:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001516:	e002      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 8001518:	2310      	movs	r3, #16
 800151a:	e000      	b.n	800151e <HAL_DMA_Abort_IT+0xa2>
 800151c:	2301      	movs	r3, #1
 800151e:	4a11      	ldr	r2, [pc, #68]	; (8001564 <HAL_DMA_Abort_IT+0xe8>)
 8001520:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2201      	movs	r2, #1
 8001526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	4798      	blx	r3
    } 
  }
  return status;
 8001542:	7bfb      	ldrb	r3, [r7, #15]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40020008 	.word	0x40020008
 8001550:	4002001c 	.word	0x4002001c
 8001554:	40020030 	.word	0x40020030
 8001558:	40020044 	.word	0x40020044
 800155c:	40020058 	.word	0x40020058
 8001560:	4002006c 	.word	0x4002006c
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	2204      	movs	r2, #4
 8001586:	409a      	lsls	r2, r3
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d04f      	beq.n	8001630 <HAL_DMA_IRQHandler+0xc8>
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d04a      	beq.n	8001630 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0320 	and.w	r3, r3, #32
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a66      	ldr	r2, [pc, #408]	; (8001758 <HAL_DMA_IRQHandler+0x1f0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d029      	beq.n	8001616 <HAL_DMA_IRQHandler+0xae>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a65      	ldr	r2, [pc, #404]	; (800175c <HAL_DMA_IRQHandler+0x1f4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d022      	beq.n	8001612 <HAL_DMA_IRQHandler+0xaa>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_DMA_IRQHandler+0x1f8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d01a      	beq.n	800160c <HAL_DMA_IRQHandler+0xa4>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a62      	ldr	r2, [pc, #392]	; (8001764 <HAL_DMA_IRQHandler+0x1fc>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d012      	beq.n	8001606 <HAL_DMA_IRQHandler+0x9e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a60      	ldr	r2, [pc, #384]	; (8001768 <HAL_DMA_IRQHandler+0x200>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d00a      	beq.n	8001600 <HAL_DMA_IRQHandler+0x98>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a5f      	ldr	r2, [pc, #380]	; (800176c <HAL_DMA_IRQHandler+0x204>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d102      	bne.n	80015fa <HAL_DMA_IRQHandler+0x92>
 80015f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f8:	e00e      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 80015fa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80015fe:	e00b      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 8001600:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001604:	e008      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 8001606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800160a:	e005      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 800160c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001610:	e002      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 8001612:	2340      	movs	r3, #64	; 0x40
 8001614:	e000      	b.n	8001618 <HAL_DMA_IRQHandler+0xb0>
 8001616:	2304      	movs	r3, #4
 8001618:	4a55      	ldr	r2, [pc, #340]	; (8001770 <HAL_DMA_IRQHandler+0x208>)
 800161a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 8094 	beq.w	800174e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800162e:	e08e      	b.n	800174e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	2202      	movs	r2, #2
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d056      	beq.n	80016ee <HAL_DMA_IRQHandler+0x186>
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d051      	beq.n	80016ee <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0320 	and.w	r3, r3, #32
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10b      	bne.n	8001670 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 020a 	bic.w	r2, r2, #10
 8001666:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_DMA_IRQHandler+0x1f0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d029      	beq.n	80016ce <HAL_DMA_IRQHandler+0x166>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a37      	ldr	r2, [pc, #220]	; (800175c <HAL_DMA_IRQHandler+0x1f4>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d022      	beq.n	80016ca <HAL_DMA_IRQHandler+0x162>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a35      	ldr	r2, [pc, #212]	; (8001760 <HAL_DMA_IRQHandler+0x1f8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d01a      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x15c>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a34      	ldr	r2, [pc, #208]	; (8001764 <HAL_DMA_IRQHandler+0x1fc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d012      	beq.n	80016be <HAL_DMA_IRQHandler+0x156>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a32      	ldr	r2, [pc, #200]	; (8001768 <HAL_DMA_IRQHandler+0x200>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00a      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x150>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a31      	ldr	r2, [pc, #196]	; (800176c <HAL_DMA_IRQHandler+0x204>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d102      	bne.n	80016b2 <HAL_DMA_IRQHandler+0x14a>
 80016ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80016b0:	e00e      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b6:	e00b      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016bc:	e008      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	e005      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	e002      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016ca:	2320      	movs	r3, #32
 80016cc:	e000      	b.n	80016d0 <HAL_DMA_IRQHandler+0x168>
 80016ce:	2302      	movs	r3, #2
 80016d0:	4a27      	ldr	r2, [pc, #156]	; (8001770 <HAL_DMA_IRQHandler+0x208>)
 80016d2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d034      	beq.n	800174e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80016ec:	e02f      	b.n	800174e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	2208      	movs	r2, #8
 80016f4:	409a      	lsls	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d028      	beq.n	8001750 <HAL_DMA_IRQHandler+0x1e8>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d023      	beq.n	8001750 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001720:	2101      	movs	r1, #1
 8001722:	fa01 f202 	lsl.w	r2, r1, r2
 8001726:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    }
  }
  return;
 800174e:	bf00      	nop
 8001750:	bf00      	nop
}
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020008 	.word	0x40020008
 800175c:	4002001c 	.word	0x4002001c
 8001760:	40020030 	.word	0x40020030
 8001764:	40020044 	.word	0x40020044
 8001768:	40020058 	.word	0x40020058
 800176c:	4002006c 	.word	0x4002006c
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b08b      	sub	sp, #44	; 0x2c
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001782:	2300      	movs	r3, #0
 8001784:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	e127      	b.n	80019d8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001788:	2201      	movs	r2, #1
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 8116 	bne.w	80019d2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b12      	cmp	r3, #18
 80017ac:	d034      	beq.n	8001818 <HAL_GPIO_Init+0xa4>
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d80d      	bhi.n	80017ce <HAL_GPIO_Init+0x5a>
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x9a>
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d804      	bhi.n	80017c4 <HAL_GPIO_Init+0x50>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d031      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d01c      	beq.n	80017fc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017c2:	e048      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d043      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d01b      	beq.n	8001804 <HAL_GPIO_Init+0x90>
          break;
 80017cc:	e043      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017ce:	4a89      	ldr	r2, [pc, #548]	; (80019f4 <HAL_GPIO_Init+0x280>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d026      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017d4:	4a87      	ldr	r2, [pc, #540]	; (80019f4 <HAL_GPIO_Init+0x280>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d806      	bhi.n	80017e8 <HAL_GPIO_Init+0x74>
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_GPIO_Init+0x284>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d020      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017e0:	4a86      	ldr	r2, [pc, #536]	; (80019fc <HAL_GPIO_Init+0x288>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d01d      	beq.n	8001822 <HAL_GPIO_Init+0xae>
          break;
 80017e6:	e036      	b.n	8001856 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017e8:	4a85      	ldr	r2, [pc, #532]	; (8001a00 <HAL_GPIO_Init+0x28c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d019      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017ee:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <HAL_GPIO_Init+0x290>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d016      	beq.n	8001822 <HAL_GPIO_Init+0xae>
 80017f4:	4a84      	ldr	r2, [pc, #528]	; (8001a08 <HAL_GPIO_Init+0x294>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d013      	beq.n	8001822 <HAL_GPIO_Init+0xae>
          break;
 80017fa:	e02c      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	623b      	str	r3, [r7, #32]
          break;
 8001802:	e028      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	3304      	adds	r3, #4
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e023      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	3308      	adds	r3, #8
 8001814:	623b      	str	r3, [r7, #32]
          break;
 8001816:	e01e      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	330c      	adds	r3, #12
 800181e:	623b      	str	r3, [r7, #32]
          break;
 8001820:	e019      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d102      	bne.n	8001830 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800182a:	2304      	movs	r3, #4
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e012      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001838:	2308      	movs	r3, #8
 800183a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	611a      	str	r2, [r3, #16]
          break;
 8001842:	e008      	b.n	8001856 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001844:	2308      	movs	r3, #8
 8001846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	69fa      	ldr	r2, [r7, #28]
 800184c:	615a      	str	r2, [r3, #20]
          break;
 800184e:	e002      	b.n	8001856 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	2bff      	cmp	r3, #255	; 0xff
 800185a:	d801      	bhi.n	8001860 <HAL_GPIO_Init+0xec>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	e001      	b.n	8001864 <HAL_GPIO_Init+0xf0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3304      	adds	r3, #4
 8001864:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	2bff      	cmp	r3, #255	; 0xff
 800186a:	d802      	bhi.n	8001872 <HAL_GPIO_Init+0xfe>
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	e002      	b.n	8001878 <HAL_GPIO_Init+0x104>
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3b08      	subs	r3, #8
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	210f      	movs	r1, #15
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	401a      	ands	r2, r3
 800188a:	6a39      	ldr	r1, [r7, #32]
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	fa01 f303 	lsl.w	r3, r1, r3
 8001892:	431a      	orrs	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8096 	beq.w	80019d2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018a6:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6193      	str	r3, [r2, #24]
 80018b2:	4b56      	ldr	r3, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x298>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018be:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_GPIO_Init+0x29c>)
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ca:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f003 0303 	and.w	r3, r3, #3
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	220f      	movs	r2, #15
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x2a0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d013      	beq.n	8001912 <HAL_GPIO_Init+0x19e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x2a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d00d      	beq.n	800190e <HAL_GPIO_Init+0x19a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2a8>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d007      	beq.n	800190a <HAL_GPIO_Init+0x196>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2ac>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d101      	bne.n	8001906 <HAL_GPIO_Init+0x192>
 8001902:	2303      	movs	r3, #3
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 8001906:	2304      	movs	r3, #4
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1a0>
 8001912:	2300      	movs	r3, #0
 8001914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001924:	493a      	ldr	r1, [pc, #232]	; (8001a10 <HAL_GPIO_Init+0x29c>)
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d006      	beq.n	800194c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4938      	ldr	r1, [pc, #224]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]
 800194a:	e006      	b.n	800195a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4933      	ldr	r1, [pc, #204]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001956:	4013      	ands	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	492e      	ldr	r1, [pc, #184]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	4313      	orrs	r3, r2
 8001970:	604b      	str	r3, [r1, #4]
 8001972:	e006      	b.n	8001982 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	43db      	mvns	r3, r3
 800197c:	4929      	ldr	r1, [pc, #164]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800197e:	4013      	ands	r3, r2
 8001980:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800198e:	4b25      	ldr	r3, [pc, #148]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	4924      	ldr	r1, [pc, #144]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
 800199a:	e006      	b.n	80019aa <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	491f      	ldr	r1, [pc, #124]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d006      	beq.n	80019c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	491a      	ldr	r1, [pc, #104]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	60cb      	str	r3, [r1, #12]
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	4915      	ldr	r1, [pc, #84]	; (8001a24 <HAL_GPIO_Init+0x2b0>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3301      	adds	r3, #1
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f47f aed0 	bne.w	8001788 <HAL_GPIO_Init+0x14>
  }
}
 80019e8:	bf00      	nop
 80019ea:	372c      	adds	r7, #44	; 0x2c
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	10210000 	.word	0x10210000
 80019f8:	10110000 	.word	0x10110000
 80019fc:	10120000 	.word	0x10120000
 8001a00:	10310000 	.word	0x10310000
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10220000 	.word	0x10220000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40010000 	.word	0x40010000
 8001a14:	40010800 	.word	0x40010800
 8001a18:	40010c00 	.word	0x40010c00
 8001a1c:	40011000 	.word	0x40011000
 8001a20:	40011400 	.word	0x40011400
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a44:	e003      	b.n	8001a4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	041a      	lsls	r2, r3, #16
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	611a      	str	r2, [r3, #16]
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001a76:	e002      	b.n	8001a7e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a78:	887a      	ldrh	r2, [r7, #2]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	611a      	str	r2, [r3, #16]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e10f      	b.n	8001cba <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f003 fc48 	bl	8005344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	; 0x24
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001acc:	f001 fc32 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a7b      	ldr	r2, [pc, #492]	; (8001cc4 <HAL_I2C_Init+0x23c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d807      	bhi.n	8001aec <HAL_I2C_Init+0x64>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a7a      	ldr	r2, [pc, #488]	; (8001cc8 <HAL_I2C_Init+0x240>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e006      	b.n	8001afa <HAL_I2C_Init+0x72>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a77      	ldr	r2, [pc, #476]	; (8001ccc <HAL_I2C_Init+0x244>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0db      	b.n	8001cba <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a72      	ldr	r2, [pc, #456]	; (8001cd0 <HAL_I2C_Init+0x248>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9b      	lsrs	r3, r3, #18
 8001b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a64      	ldr	r2, [pc, #400]	; (8001cc4 <HAL_I2C_Init+0x23c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d802      	bhi.n	8001b3c <HAL_I2C_Init+0xb4>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e009      	b.n	8001b50 <HAL_I2C_Init+0xc8>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4a63      	ldr	r2, [pc, #396]	; (8001cd4 <HAL_I2C_Init+0x24c>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	3301      	adds	r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4956      	ldr	r1, [pc, #344]	; (8001cc4 <HAL_I2C_Init+0x23c>)
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	d80d      	bhi.n	8001b8c <HAL_I2C_Init+0x104>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e59      	subs	r1, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	bf38      	it	cc
 8001b88:	2304      	movcc	r3, #4
 8001b8a:	e04f      	b.n	8001c2c <HAL_I2C_Init+0x1a4>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <HAL_I2C_Init+0x130>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1e58      	subs	r0, r3, #1
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	e012      	b.n	8001bde <HAL_I2C_Init+0x156>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	0099      	lsls	r1, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2301      	moveq	r3, #1
 8001bda:	2300      	movne	r3, #0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <HAL_I2C_Init+0x15e>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e022      	b.n	8001c2c <HAL_I2C_Init+0x1a4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_I2C_Init+0x184>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1e58      	subs	r0, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6859      	ldr	r1, [r3, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	440b      	add	r3, r1
 8001bfc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c00:	3301      	adds	r3, #1
 8001c02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c0a:	e00f      	b.n	8001c2c <HAL_I2C_Init+0x1a4>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1e58      	subs	r0, r3, #1
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6859      	ldr	r1, [r3, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	0099      	lsls	r1, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c22:	3301      	adds	r3, #1
 8001c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69da      	ldr	r2, [r3, #28]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6911      	ldr	r1, [r2, #16]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68d2      	ldr	r2, [r2, #12]
 8001c66:	4311      	orrs	r1, r2
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6812      	ldr	r2, [r2, #0]
 8001c6c:	430b      	orrs	r3, r1
 8001c6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695a      	ldr	r2, [r3, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	000186a0 	.word	0x000186a0
 8001cc8:	001e847f 	.word	0x001e847f
 8001ccc:	003d08ff 	.word	0x003d08ff
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	10624dd3 	.word	0x10624dd3

08001cd8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	817b      	strh	r3, [r7, #10]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cec:	f7ff fa32 	bl	8001154 <HAL_GetTick>
 8001cf0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b20      	cmp	r3, #32
 8001cfc:	f040 80e0 	bne.w	8001ec0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2319      	movs	r3, #25
 8001d06:	2201      	movs	r2, #1
 8001d08:	4970      	ldr	r1, [pc, #448]	; (8001ecc <HAL_I2C_Master_Transmit+0x1f4>)
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fd5e 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
 8001d18:	e0d3      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_I2C_Master_Transmit+0x50>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e0cc      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d007      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0201 	orr.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	; 0x21
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	893a      	ldrh	r2, [r7, #8]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4a50      	ldr	r2, [pc, #320]	; (8001ed0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	6a3a      	ldr	r2, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 fbec 	bl	8002574 <I2C_MasterRequestWrite>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e08d      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dbc:	e066      	b.n	8001e8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	6a39      	ldr	r1, [r7, #32]
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 fdd8 	bl	8002978 <I2C_WaitOnTXEFlagUntilTimeout>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00d      	beq.n	8001dea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd2:	2b04      	cmp	r3, #4
 8001dd4:	d107      	bne.n	8001de6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e06b      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	1c5a      	adds	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	3b01      	subs	r3, #1
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e12:	3b01      	subs	r3, #1
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d11b      	bne.n	8001e60 <HAL_I2C_Master_Transmit+0x188>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d017      	beq.n	8001e60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	781a      	ldrb	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e60:	697a      	ldr	r2, [r7, #20]
 8001e62:	6a39      	ldr	r1, [r7, #32]
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f000 fdc8 	bl	80029fa <I2C_WaitOnBTFFlagUntilTimeout>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00d      	beq.n	8001e8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d107      	bne.n	8001e88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e01a      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d194      	bne.n	8001dbe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ea2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	e000      	b.n	8001ec2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ec0:	2302      	movs	r3, #2
  }
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3718      	adds	r7, #24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	00100002 	.word	0x00100002
 8001ed0:	ffff0000 	.word	0xffff0000

08001ed4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ee8:	f7ff f934 	bl	8001154 <HAL_GetTick>
 8001eec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	f040 8213 	bne.w	8002322 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	2319      	movs	r3, #25
 8001f02:	2201      	movs	r2, #1
 8001f04:	497e      	ldr	r1, [pc, #504]	; (8002100 <HAL_I2C_Master_Receive+0x22c>)
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 fc60 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
 8001f14:	e206      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d101      	bne.n	8001f24 <HAL_I2C_Master_Receive+0x50>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e1ff      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d007      	beq.n	8001f4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0201 	orr.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2222      	movs	r2, #34	; 0x22
 8001f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2210      	movs	r2, #16
 8001f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	893a      	ldrh	r2, [r7, #8]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a5e      	ldr	r2, [pc, #376]	; (8002104 <HAL_I2C_Master_Receive+0x230>)
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f8c:	8979      	ldrh	r1, [r7, #10]
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fb64 	bl	8002660 <I2C_MasterRequestRead>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e1c0      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d113      	bne.n	8001fd2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001faa:	2300      	movs	r3, #0
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	623b      	str	r3, [r7, #32]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	e194      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d11d      	bne.n	8002016 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fe8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	61fb      	str	r3, [r7, #28]
 8002000:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002012:	b662      	cpsie	i
 8002014:	e172      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201a:	2b02      	cmp	r3, #2
 800201c:	d11d      	bne.n	800205a <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800202c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800202e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002054:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002056:	b662      	cpsie	i
 8002058:	e150      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002068:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800206a:	2300      	movs	r3, #0
 800206c:	617b      	str	r3, [r7, #20]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002080:	e13c      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002086:	2b03      	cmp	r3, #3
 8002088:	f200 80f5 	bhi.w	8002276 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002090:	2b01      	cmp	r3, #1
 8002092:	d123      	bne.n	80020dc <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fcef 	bl	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e13d      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	3b01      	subs	r3, #1
 80020d4:	b29a      	uxth	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020da:	e10f      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d150      	bne.n	8002186 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ea:	2200      	movs	r2, #0
 80020ec:	4906      	ldr	r1, [pc, #24]	; (8002108 <HAL_I2C_Master_Receive+0x234>)
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fb6c 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e112      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
 80020fe:	bf00      	nop
 8002100:	00100002 	.word	0x00100002
 8002104:	ffff0000 	.word	0xffff0000
 8002108:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800211c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002150:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	691a      	ldr	r2, [r3, #16]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	1c5a      	adds	r2, r3, #1
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	3b01      	subs	r3, #1
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217a:	b29b      	uxth	r3, r3
 800217c:	3b01      	subs	r3, #1
 800217e:	b29a      	uxth	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002184:	e0ba      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218c:	2200      	movs	r2, #0
 800218e:	4967      	ldr	r1, [pc, #412]	; (800232c <HAL_I2C_Master_Receive+0x458>)
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fb1b 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0c1      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021b0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	691a      	ldr	r2, [r3, #16]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	1c5a      	adds	r2, r3, #1
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ea:	2200      	movs	r2, #0
 80021ec:	494f      	ldr	r1, [pc, #316]	; (800232c <HAL_I2C_Master_Receive+0x458>)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 faec 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e092      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002240:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002274:	e042      	b.n	80022fc <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fbfe 	bl	8002a7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04c      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d118      	bne.n	80022fc <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aebe 	bne.w	8002082 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	00010004 	.word	0x00010004

08002330 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b08a      	sub	sp, #40	; 0x28
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7fe ff08 	bl	8001154 <HAL_GetTick>
 8002344:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002346:	2301      	movs	r3, #1
 8002348:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	f040 8105 	bne.w	8002562 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	2319      	movs	r3, #25
 800235e:	2201      	movs	r2, #1
 8002360:	4982      	ldr	r1, [pc, #520]	; (800256c <HAL_I2C_IsDeviceReady+0x23c>)
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 fa32 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
 8002370:	e0f8      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_I2C_IsDeviceReady+0x50>
 800237c:	2302      	movs	r3, #2
 800237e:	e0f1      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d007      	beq.n	80023a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2224      	movs	r2, #36	; 0x24
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_I2C_IsDeviceReady+0x240>)
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f000 f9f0 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0b6      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f6:	897b      	ldrh	r3, [r7, #10]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002404:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002406:	f7fe fea5 	bl	8001154 <HAL_GetTick>
 800240a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b02      	cmp	r3, #2
 8002418:	bf0c      	ite	eq
 800241a:	2301      	moveq	r3, #1
 800241c:	2300      	movne	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800242c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800243a:	e025      	b.n	8002488 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800243c:	f7fe fe8a 	bl	8001154 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d302      	bcc.n	8002452 <HAL_I2C_IsDeviceReady+0x122>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d103      	bne.n	800245a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	22a0      	movs	r2, #160	; 0xa0
 8002456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b02      	cmp	r3, #2
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2ba0      	cmp	r3, #160	; 0xa0
 8002492:	d005      	beq.n	80024a0 <HAL_I2C_IsDeviceReady+0x170>
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d102      	bne.n	80024a0 <HAL_I2C_IsDeviceReady+0x170>
 800249a:	7dbb      	ldrb	r3, [r7, #22]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d0cd      	beq.n	800243c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d129      	bne.n	800250a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c6:	2300      	movs	r3, #0
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	2319      	movs	r3, #25
 80024e2:	2201      	movs	r2, #1
 80024e4:	4921      	ldr	r1, [pc, #132]	; (800256c <HAL_I2C_IsDeviceReady+0x23c>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f970 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e036      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e02c      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002522:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2319      	movs	r3, #25
 800252a:	2201      	movs	r2, #1
 800252c:	490f      	ldr	r1, [pc, #60]	; (800256c <HAL_I2C_IsDeviceReady+0x23c>)
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f94c 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e012      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3301      	adds	r3, #1
 8002542:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	f4ff af3e 	bcc.w	80023ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00100002 	.word	0x00100002
 8002570:	ffff0000 	.word	0xffff0000

08002574 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b088      	sub	sp, #32
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	607a      	str	r2, [r7, #4]
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	460b      	mov	r3, r1
 8002582:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b08      	cmp	r3, #8
 800258e:	d006      	beq.n	800259e <I2C_MasterRequestWrite+0x2a>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d003      	beq.n	800259e <I2C_MasterRequestWrite+0x2a>
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800259c:	d108      	bne.n	80025b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00b      	b.n	80025c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	2b12      	cmp	r3, #18
 80025b6:	d107      	bne.n	80025c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f8f9 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e035      	b.n	8002650 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025ec:	d108      	bne.n	8002600 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e01b      	b.n	8002638 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002600:	897b      	ldrh	r3, [r7, #10]
 8002602:	11db      	asrs	r3, r3, #7
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f063 030f 	orn	r3, r3, #15
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	490e      	ldr	r1, [pc, #56]	; (8002658 <I2C_MasterRequestWrite+0xe4>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f92b 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e010      	b.n	8002650 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4907      	ldr	r1, [pc, #28]	; (800265c <I2C_MasterRequestWrite+0xe8>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f91b 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010008 	.word	0x00010008
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b088      	sub	sp, #32
 8002664:	af02      	add	r7, sp, #8
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	607a      	str	r2, [r7, #4]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	460b      	mov	r3, r1
 800266e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002674:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002684:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d006      	beq.n	800269a <I2C_MasterRequestRead+0x3a>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d003      	beq.n	800269a <I2C_MasterRequestRead+0x3a>
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002698:	d108      	bne.n	80026ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e00b      	b.n	80026c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	2b11      	cmp	r3, #17
 80026b2:	d107      	bne.n	80026c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f87b 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e06d      	b.n	80027bc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e053      	b.n	80027a4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026fc:	897b      	ldrh	r3, [r7, #10]
 80026fe:	11db      	asrs	r3, r3, #7
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0306 	and.w	r3, r3, #6
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f063 030f 	orn	r3, r3, #15
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	492a      	ldr	r1, [pc, #168]	; (80027c4 <I2C_MasterRequestRead+0x164>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f8ad 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e048      	b.n	80027bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4923      	ldr	r1, [pc, #140]	; (80027c8 <I2C_MasterRequestRead+0x168>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f89d 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e038      	b.n	80027bc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 f825 	bl	80027cc <I2C_WaitOnFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e017      	b.n	80027bc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800278c:	897b      	ldrh	r3, [r7, #10]
 800278e:	11db      	asrs	r3, r3, #7
 8002790:	b2db      	uxtb	r3, r3
 8002792:	f003 0306 	and.w	r3, r3, #6
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f063 030e 	orn	r3, r3, #14
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4907      	ldr	r1, [pc, #28]	; (80027c8 <I2C_MasterRequestRead+0x168>)
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f000 f865 	bl	800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	00010008 	.word	0x00010008
 80027c8:	00010002 	.word	0x00010002

080027cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	603b      	str	r3, [r7, #0]
 80027d8:	4613      	mov	r3, r2
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027dc:	e025      	b.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e4:	d021      	beq.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e6:	f7fe fcb5 	bl	8001154 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d302      	bcc.n	80027fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d116      	bne.n	800282a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f043 0220 	orr.w	r2, r3, #32
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e023      	b.n	8002872 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	0c1b      	lsrs	r3, r3, #16
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d10d      	bne.n	8002850 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	43da      	mvns	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	e00c      	b.n	800286a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4013      	ands	r3, r2
 800285c:	b29b      	uxth	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf0c      	ite	eq
 8002862:	2301      	moveq	r3, #1
 8002864:	2300      	movne	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	79fb      	ldrb	r3, [r7, #7]
 800286c:	429a      	cmp	r2, r3
 800286e:	d0b6      	beq.n	80027de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	60f8      	str	r0, [r7, #12]
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002888:	e051      	b.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d123      	bne.n	80028e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f043 0204 	orr.w	r2, r3, #4
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e046      	b.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e8:	d021      	beq.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ea:	f7fe fc33 	bl	8001154 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d302      	bcc.n	8002900 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d116      	bne.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f043 0220 	orr.w	r2, r3, #32
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e020      	b.n	8002970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0c1b      	lsrs	r3, r3, #16
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	d10c      	bne.n	8002952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	4013      	ands	r3, r2
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	bf14      	ite	ne
 800294a:	2301      	movne	r3, #1
 800294c:	2300      	moveq	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	e00b      	b.n	800296a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	43da      	mvns	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	4013      	ands	r3, r2
 800295e:	b29b      	uxth	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	bf14      	ite	ne
 8002964:	2301      	movne	r3, #1
 8002966:	2300      	moveq	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d18d      	bne.n	800288a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002984:	e02d      	b.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f8ce 	bl	8002b28 <I2C_IsAcknowledgeFailed>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e02d      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800299c:	d021      	beq.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe fbd9 	bl	8001154 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e007      	b.n	80029f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ec:	2b80      	cmp	r3, #128	; 0x80
 80029ee:	d1ca      	bne.n	8002986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a06:	e02d      	b.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f88d 	bl	8002b28 <I2C_IsAcknowledgeFailed>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e02d      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1e:	d021      	beq.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a20:	f7fe fb98 	bl	8001154 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d302      	bcc.n	8002a36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d116      	bne.n	8002a64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2220      	movs	r2, #32
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e007      	b.n	8002a74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d1ca      	bne.n	8002a08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a88:	e042      	b.n	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d119      	bne.n	8002acc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0210 	mvn.w	r2, #16
 8002aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e029      	b.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002acc:	f7fe fb42 	bl	8001154 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d302      	bcc.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d116      	bne.n	8002b10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afc:	f043 0220 	orr.w	r2, r3, #32
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e007      	b.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d1b5      	bne.n	8002a8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3e:	d11b      	bne.n	8002b78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0204 	orr.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e26c      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f000 8087 	beq.w	8002cb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ba4:	4b92      	ldr	r3, [pc, #584]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d00c      	beq.n	8002bca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d112      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
 8002bbc:	4b8c      	ldr	r3, [pc, #560]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bca:	4b89      	ldr	r3, [pc, #548]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d06c      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d168      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e246      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCC_OscConfig+0x76>
 8002bec:	4b80      	ldr	r3, [pc, #512]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a7f      	ldr	r2, [pc, #508]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	e02e      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCC_OscConfig+0x98>
 8002c02:	4b7b      	ldr	r3, [pc, #492]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a7a      	ldr	r2, [pc, #488]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0c:	6013      	str	r3, [r2, #0]
 8002c0e:	4b78      	ldr	r3, [pc, #480]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a77      	ldr	r2, [pc, #476]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e01d      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0xbc>
 8002c26:	4b72      	ldr	r3, [pc, #456]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a71      	ldr	r2, [pc, #452]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c30:	6013      	str	r3, [r2, #0]
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6e      	ldr	r2, [pc, #440]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3c:	6013      	str	r3, [r2, #0]
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0xd4>
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a67      	ldr	r2, [pc, #412]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d013      	beq.n	8002c88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe fa78 	bl	8001154 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c68:	f7fe fa74 	bl	8001154 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1fa      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0xe4>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fe fa64 	bl	8001154 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7fe fa60 	bl	8001154 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	; 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1e6      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ca2:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x10c>
 8002cae:	e000      	b.n	8002cb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d063      	beq.n	8002d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cbe:	4b4c      	ldr	r3, [pc, #304]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f003 030c 	and.w	r3, r3, #12
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00b      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002cca:	4b49      	ldr	r3, [pc, #292]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11c      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
 8002cd6:	4b46      	ldr	r3, [pc, #280]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d116      	bne.n	8002d10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce2:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d001      	beq.n	8002cfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e1ba      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4939      	ldr	r1, [pc, #228]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	e03a      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d020      	beq.n	8002d5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1e:	f7fe fa19 	bl	8001154 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d26:	f7fe fa15 	bl	8001154 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e19b      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d38:	4b2d      	ldr	r3, [pc, #180]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d0f0      	beq.n	8002d26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	4927      	ldr	r1, [pc, #156]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
 8002d58:	e015      	b.n	8002d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d5a:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <HAL_RCC_OscConfig+0x270>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d60:	f7fe f9f8 	bl	8001154 <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d68:	f7fe f9f4 	bl	8001154 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e17a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d03a      	beq.n	8002e08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d9a:	4b17      	ldr	r3, [pc, #92]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7fe f9d8 	bl	8001154 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002da8:	f7fe f9d4 	bl	8001154 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e15a      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_RCC_OscConfig+0x26c>)
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d0f0      	beq.n	8002da8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f000 fadc 	bl	8003384 <RCC_Delay>
 8002dcc:	e01c      	b.n	8002e08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_OscConfig+0x274>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fe f9be 	bl	8001154 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dda:	e00f      	b.n	8002dfc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fe f9ba 	bl	8001154 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e140      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000
 8002df4:	42420000 	.word	0x42420000
 8002df8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e9      	bne.n	8002ddc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e16:	2300      	movs	r3, #0
 8002e18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	4a93      	ldr	r2, [pc, #588]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e30:	61d3      	str	r3, [r2, #28]
 8002e32:	4b91      	ldr	r3, [pc, #580]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4b8b      	ldr	r3, [pc, #556]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a8a      	ldr	r2, [pc, #552]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5a:	f7fe f97b 	bl	8001154 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e62:	f7fe f977 	bl	8001154 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b64      	cmp	r3, #100	; 0x64
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0fd      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e74:	4b81      	ldr	r3, [pc, #516]	; (800307c <HAL_RCC_OscConfig+0x4f8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0f0      	beq.n	8002e62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d106      	bne.n	8002e96 <HAL_RCC_OscConfig+0x312>
 8002e88:	4b7b      	ldr	r3, [pc, #492]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	4a7a      	ldr	r2, [pc, #488]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002e8e:	f043 0301 	orr.w	r3, r3, #1
 8002e92:	6213      	str	r3, [r2, #32]
 8002e94:	e02d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x334>
 8002e9e:	4b76      	ldr	r3, [pc, #472]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	6a1b      	ldr	r3, [r3, #32]
 8002ea2:	4a75      	ldr	r2, [pc, #468]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6213      	str	r3, [r2, #32]
 8002eaa:	4b73      	ldr	r3, [pc, #460]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eac:	6a1b      	ldr	r3, [r3, #32]
 8002eae:	4a72      	ldr	r2, [pc, #456]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eb0:	f023 0304 	bic.w	r3, r3, #4
 8002eb4:	6213      	str	r3, [r2, #32]
 8002eb6:	e01c      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	2b05      	cmp	r3, #5
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x356>
 8002ec0:	4b6d      	ldr	r3, [pc, #436]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	4a6c      	ldr	r2, [pc, #432]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ec6:	f043 0304 	orr.w	r3, r3, #4
 8002eca:	6213      	str	r3, [r2, #32]
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	4a69      	ldr	r2, [pc, #420]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ed2:	f043 0301 	orr.w	r3, r3, #1
 8002ed6:	6213      	str	r3, [r2, #32]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x36e>
 8002eda:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	4a66      	ldr	r2, [pc, #408]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	6213      	str	r3, [r2, #32]
 8002ee6:	4b64      	ldr	r3, [pc, #400]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a63      	ldr	r2, [pc, #396]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002eec:	f023 0304 	bic.w	r3, r3, #4
 8002ef0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d015      	beq.n	8002f26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002efa:	f7fe f92b 	bl	8001154 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	e00a      	b.n	8002f18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7fe f927 	bl	8001154 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d901      	bls.n	8002f18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e0ab      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ee      	beq.n	8002f02 <HAL_RCC_OscConfig+0x37e>
 8002f24:	e014      	b.n	8002f50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fe f915 	bl	8001154 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f911 	bl	8001154 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e095      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1ee      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d105      	bne.n	8002f62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f56:	4b48      	ldr	r3, [pc, #288]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a47      	ldr	r2, [pc, #284]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f000 8081 	beq.w	800306e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f6c:	4b42      	ldr	r3, [pc, #264]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d061      	beq.n	800303c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d146      	bne.n	800300e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f86:	f7fe f8e5 	bl	8001154 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fe f8e1 	bl	8001154 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e067      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f0      	bne.n	8002f8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	492d      	ldr	r1, [pc, #180]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a19      	ldr	r1, [r3, #32]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	4927      	ldr	r1, [pc, #156]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe f8b5 	bl	8001154 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7fe f8b1 	bl	8001154 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e037      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x46a>
 800300c:	e02f      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b1c      	ldr	r3, [pc, #112]	; (8003080 <HAL_RCC_OscConfig+0x4fc>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7fe f89e 	bl	8001154 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7fe f89a 	bl	8001154 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e020      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x498>
 800303a:	e018      	b.n	800306e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d101      	bne.n	8003048 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e013      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <HAL_RCC_OscConfig+0x4f4>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
 8003058:	429a      	cmp	r2, r3
 800305a:	d106      	bne.n	800306a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	429a      	cmp	r2, r3
 8003068:	d001      	beq.n	800306e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000
 800307c:	40007000 	.word	0x40007000
 8003080:	42420060 	.word	0x42420060

08003084 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0d0      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003098:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d910      	bls.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 0207 	bic.w	r2, r3, #7
 80030ae:	4965      	ldr	r1, [pc, #404]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b63      	ldr	r3, [pc, #396]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0b8      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d020      	beq.n	8003116 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030e0:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a58      	ldr	r2, [pc, #352]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030f8:	4b53      	ldr	r3, [pc, #332]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a52      	ldr	r2, [pc, #328]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80030fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003102:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003104:	4b50      	ldr	r3, [pc, #320]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	494d      	ldr	r1, [pc, #308]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d040      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b47      	ldr	r3, [pc, #284]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d115      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e07f      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e073      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003152:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d101      	bne.n	8003162 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06b      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003162:	4b39      	ldr	r3, [pc, #228]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f023 0203 	bic.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	4936      	ldr	r1, [pc, #216]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003170:	4313      	orrs	r3, r2
 8003172:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fd ffee 	bl	8001154 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317a:	e00a      	b.n	8003192 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800317c:	f7fd ffea 	bl	8001154 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e053      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003192:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 020c 	and.w	r2, r3, #12
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d1eb      	bne.n	800317c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031a4:	4b27      	ldr	r3, [pc, #156]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d210      	bcs.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 0207 	bic.w	r2, r3, #7
 80031ba:	4922      	ldr	r1, [pc, #136]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	4313      	orrs	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <HAL_RCC_ClockConfig+0x1c0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d001      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e032      	b.n	800323a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d008      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031e0:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	4916      	ldr	r1, [pc, #88]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031fe:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	490e      	ldr	r1, [pc, #56]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800320e:	4313      	orrs	r3, r2
 8003210:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003212:	f000 f821 	bl	8003258 <HAL_RCC_GetSysClockFreq>
 8003216:	4601      	mov	r1, r0
 8003218:	4b0b      	ldr	r3, [pc, #44]	; (8003248 <HAL_RCC_ClockConfig+0x1c4>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	091b      	lsrs	r3, r3, #4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	4a0a      	ldr	r2, [pc, #40]	; (800324c <HAL_RCC_ClockConfig+0x1c8>)
 8003224:	5cd3      	ldrb	r3, [r2, r3]
 8003226:	fa21 f303 	lsr.w	r3, r1, r3
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1cc>)
 800322c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_RCC_ClockConfig+0x1d0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd ff4c 	bl	80010d0 <HAL_InitTick>

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40022000 	.word	0x40022000
 8003248:	40021000 	.word	0x40021000
 800324c:	08007424 	.word	0x08007424
 8003250:	20000008 	.word	0x20000008
 8003254:	20000000 	.word	0x20000000

08003258 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003258:	b490      	push	{r4, r7}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800325e:	4b2a      	ldr	r3, [pc, #168]	; (8003308 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003260:	1d3c      	adds	r4, r7, #4
 8003262:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003264:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_RCC_GetSysClockFreq+0xb4>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800326e:	2300      	movs	r3, #0
 8003270:	61fb      	str	r3, [r7, #28]
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	2300      	movs	r3, #0
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003282:	4b23      	ldr	r3, [pc, #140]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b04      	cmp	r3, #4
 8003290:	d002      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x40>
 8003292:	2b08      	cmp	r3, #8
 8003294:	d003      	beq.n	800329e <HAL_RCC_GetSysClockFreq+0x46>
 8003296:	e02d      	b.n	80032f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 800329a:	623b      	str	r3, [r7, #32]
      break;
 800329c:	e02d      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032aa:	4413      	add	r3, r2
 80032ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80032b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032bc:	4b14      	ldr	r3, [pc, #80]	; (8003310 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	0c5b      	lsrs	r3, r3, #17
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032ca:	4413      	add	r3, r2
 80032cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80032d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	4a0f      	ldr	r2, [pc, #60]	; (8003314 <HAL_RCC_GetSysClockFreq+0xbc>)
 80032d6:	fb02 f203 	mul.w	r2, r2, r3
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
 80032e2:	e004      	b.n	80032ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	4a0c      	ldr	r2, [pc, #48]	; (8003318 <HAL_RCC_GetSysClockFreq+0xc0>)
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	623b      	str	r3, [r7, #32]
      break;
 80032f2:	e002      	b.n	80032fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032f4:	4b09      	ldr	r3, [pc, #36]	; (800331c <HAL_RCC_GetSysClockFreq+0xc4>)
 80032f6:	623b      	str	r3, [r7, #32]
      break;
 80032f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032fa:	6a3b      	ldr	r3, [r7, #32]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3728      	adds	r7, #40	; 0x28
 8003300:	46bd      	mov	sp, r7
 8003302:	bc90      	pop	{r4, r7}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	080073e8 	.word	0x080073e8
 800330c:	080073f8 	.word	0x080073f8
 8003310:	40021000 	.word	0x40021000
 8003314:	00b71b00 	.word	0x00b71b00
 8003318:	003d0900 	.word	0x003d0900
 800331c:	007a1200 	.word	0x007a1200

08003320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003324:	4b02      	ldr	r3, [pc, #8]	; (8003330 <HAL_RCC_GetHCLKFreq+0x10>)
 8003326:	681b      	ldr	r3, [r3, #0]
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	bc80      	pop	{r7}
 800332e:	4770      	bx	lr
 8003330:	20000008 	.word	0x20000008

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003338:	f7ff fff2 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 800333c:	4601      	mov	r1, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	0a1b      	lsrs	r3, r3, #8
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4a03      	ldr	r2, [pc, #12]	; (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5cd3      	ldrb	r3, [r2, r3]
 800334c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40021000 	.word	0x40021000
 8003358:	08007434 	.word	0x08007434

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003360:	f7ff ffde 	bl	8003320 <HAL_RCC_GetHCLKFreq>
 8003364:	4601      	mov	r1, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	0adb      	lsrs	r3, r3, #11
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4a03      	ldr	r2, [pc, #12]	; (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40021000 	.word	0x40021000
 8003380:	08007434 	.word	0x08007434

08003384 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <RCC_Delay+0x34>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <RCC_Delay+0x38>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033a0:	bf00      	nop
  }
  while (Delay --);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1e5a      	subs	r2, r3, #1
 80033a6:	60fa      	str	r2, [r7, #12]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f9      	bne.n	80033a0 <RCC_Delay+0x1c>
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000008 	.word	0x20000008
 80033bc:	10624dd3 	.word	0x10624dd3

080033c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e01d      	b.n	800340e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f001 ffec 	bl	80053c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 f902 	bl	8003608 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2201      	movs	r2, #1
 8003428:	6839      	ldr	r1, [r7, #0]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fad6 	bl	80039dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a10      	ldr	r2, [pc, #64]	; (8003478 <HAL_TIM_PWM_Start+0x60>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d107      	bne.n	800344a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003448:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2b06      	cmp	r3, #6
 800345a:	d007      	beq.n	800346c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00

0800347c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003492:	2302      	movs	r3, #2
 8003494:	e0b4      	b.n	8003600 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b0c      	cmp	r3, #12
 80034aa:	f200 809f 	bhi.w	80035ec <HAL_TIM_PWM_ConfigChannel+0x170>
 80034ae:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	080034e9 	.word	0x080034e9
 80034b8:	080035ed 	.word	0x080035ed
 80034bc:	080035ed 	.word	0x080035ed
 80034c0:	080035ed 	.word	0x080035ed
 80034c4:	08003529 	.word	0x08003529
 80034c8:	080035ed 	.word	0x080035ed
 80034cc:	080035ed 	.word	0x080035ed
 80034d0:	080035ed 	.word	0x080035ed
 80034d4:	0800356b 	.word	0x0800356b
 80034d8:	080035ed 	.word	0x080035ed
 80034dc:	080035ed 	.word	0x080035ed
 80034e0:	080035ed 	.word	0x080035ed
 80034e4:	080035ab 	.word	0x080035ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f8ec 	bl	80036cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699a      	ldr	r2, [r3, #24]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0208 	orr.w	r2, r2, #8
 8003502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699a      	ldr	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0204 	bic.w	r2, r2, #4
 8003512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6999      	ldr	r1, [r3, #24]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	619a      	str	r2, [r3, #24]
      break;
 8003526:	e062      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68b9      	ldr	r1, [r7, #8]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f932 	bl	8003798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6999      	ldr	r1, [r3, #24]
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	021a      	lsls	r2, r3, #8
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	619a      	str	r2, [r3, #24]
      break;
 8003568:	e041      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68b9      	ldr	r1, [r7, #8]
 8003570:	4618      	mov	r0, r3
 8003572:	f000 f97b 	bl	800386c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0208 	orr.w	r2, r2, #8
 8003584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0204 	bic.w	r2, r2, #4
 8003594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69d9      	ldr	r1, [r3, #28]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	430a      	orrs	r2, r1
 80035a6:	61da      	str	r2, [r3, #28]
      break;
 80035a8:	e021      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68b9      	ldr	r1, [r7, #8]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f9c5 	bl	8003940 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69d9      	ldr	r1, [r3, #28]
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	691b      	ldr	r3, [r3, #16]
 80035e0:	021a      	lsls	r2, r3, #8
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	61da      	str	r2, [r3, #28]
      break;
 80035ea:	e000      	b.n	80035ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80035ec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a29      	ldr	r2, [pc, #164]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00b      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003626:	d007      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a26      	ldr	r2, [pc, #152]	; (80036c4 <TIM_Base_SetConfig+0xbc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d003      	beq.n	8003638 <TIM_Base_SetConfig+0x30>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a25      	ldr	r2, [pc, #148]	; (80036c8 <TIM_Base_SetConfig+0xc0>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d108      	bne.n	800364a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1c      	ldr	r2, [pc, #112]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d00b      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003658:	d007      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <TIM_Base_SetConfig+0xbc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d003      	beq.n	800366a <TIM_Base_SetConfig+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <TIM_Base_SetConfig+0xc0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d108      	bne.n	800367c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	68fa      	ldr	r2, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <TIM_Base_SetConfig+0xb8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d103      	bne.n	80036b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	615a      	str	r2, [r3, #20]
}
 80036b6:	bf00      	nop
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	f023 0201 	bic.w	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f023 0302 	bic.w	r3, r3, #2
 8003714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10c      	bne.n	8003742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0308 	bic.w	r3, r3, #8
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a13      	ldr	r2, [pc, #76]	; (8003794 <TIM_OC1_SetConfig+0xc8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d111      	bne.n	800376e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	621a      	str	r2, [r3, #32]
}
 8003788:	bf00      	nop
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00

08003798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003798:	b480      	push	{r7}
 800379a:	b087      	sub	sp, #28
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	f023 0210 	bic.w	r2, r3, #16
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 0320 	bic.w	r3, r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a1d      	ldr	r2, [pc, #116]	; (8003868 <TIM_OC2_SetConfig+0xd0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <TIM_OC2_SetConfig+0xd0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d113      	bne.n	8003844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800382a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4313      	orrs	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	621a      	str	r2, [r3, #32]
}
 800385e:	bf00      	nop
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	40012c00 	.word	0x40012c00

0800386c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0303 	bic.w	r3, r3, #3
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	021b      	lsls	r3, r3, #8
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1d      	ldr	r2, [pc, #116]	; (800393c <TIM_OC3_SetConfig+0xd0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d10d      	bne.n	80038e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	021b      	lsls	r3, r3, #8
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a14      	ldr	r2, [pc, #80]	; (800393c <TIM_OC3_SetConfig+0xd0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d113      	bne.n	8003916 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4313      	orrs	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
}
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40012c00 	.word	0x40012c00

08003940 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69db      	ldr	r3, [r3, #28]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a0f      	ldr	r2, [pc, #60]	; (80039d8 <TIM_OC4_SetConfig+0x98>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d109      	bne.n	80039b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	40012c00 	.word	0x40012c00

080039dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2201      	movs	r2, #1
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	43db      	mvns	r3, r3
 80039fe:	401a      	ands	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a1a      	ldr	r2, [r3, #32]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 031f 	and.w	r3, r3, #31
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	621a      	str	r2, [r3, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e032      	b.n	8003aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr

08003aac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e03f      	b.n	8003b3e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d106      	bne.n	8003ad8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f001 fcc8 	bl	8005468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2224      	movs	r2, #36	; 0x24
 8003adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fb2f 	bl	8004154 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68da      	ldr	r2, [r3, #12]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003b56:	2300      	movs	r3, #0
 8003b58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	f040 8083 	bne.w	8003c6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <HAL_UART_Transmit+0x2e>
 8003b6e:	88fb      	ldrh	r3, [r7, #6]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e07b      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_UART_Transmit+0x40>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e074      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2221      	movs	r2, #33	; 0x21
 8003b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b9c:	f7fd fada 	bl	8001154 <HAL_GetTick>
 8003ba0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bae:	e042      	b.n	8003c36 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc6:	d122      	bne.n	8003c0e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	2180      	movs	r1, #128	; 0x80
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f000 f955 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e046      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d103      	bne.n	8003c06 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	3302      	adds	r3, #2
 8003c02:	60bb      	str	r3, [r7, #8]
 8003c04:	e017      	b.n	8003c36 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60bb      	str	r3, [r7, #8]
 8003c0c:	e013      	b.n	8003c36 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	; 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f932 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e023      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	781a      	ldrb	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1b7      	bne.n	8003bb0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f919 	bl	8003e82 <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00a      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e000      	b.n	8003c70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
  }
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3718      	adds	r7, #24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10d      	bne.n	8003cca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_UART_IRQHandler+0x52>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f003 0320 	and.w	r3, r3, #32
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f9c5 	bl	8004052 <UART_Receive_IT>
      return;
 8003cc8:	e0cc      	b.n	8003e64 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f000 80ab 	beq.w	8003e28 <HAL_UART_IRQHandler+0x1b0>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x70>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 80a0 	beq.w	8003e28 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_UART_IRQHandler+0x90>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	f043 0201 	orr.w	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_UART_IRQHandler+0xb0>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d20:	f043 0202 	orr.w	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_UART_IRQHandler+0xd0>
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_UART_IRQHandler+0xf0>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d005      	beq.n	8003d68 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d60:	f043 0208 	orr.w	r2, r3, #8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d078      	beq.n	8003e62 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0320 	and.w	r3, r3, #32
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_UART_IRQHandler+0x112>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f964 	bl	8004052 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	f003 0308 	and.w	r3, r3, #8
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d102      	bne.n	8003db2 <HAL_UART_IRQHandler+0x13a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d031      	beq.n	8003e16 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 f8af 	bl	8003f16 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695b      	ldr	r3, [r3, #20]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d023      	beq.n	8003e0e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_UART_IRQHandler+0x1f4>)
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7fd fb46 	bl	800147c <HAL_DMA_Abort_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d016      	beq.n	8003e24 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e00:	4610      	mov	r0, r2
 8003e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e04:	e00e      	b.n	8003e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f832 	bl	8003e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e0c:	e00a      	b.n	8003e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f82e 	bl	8003e70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	e006      	b.n	8003e24 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f82a 	bl	8003e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003e22:	e01e      	b.n	8003e62 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e24:	bf00      	nop
    return;
 8003e26:	e01c      	b.n	8003e62 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d008      	beq.n	8003e44 <HAL_UART_IRQHandler+0x1cc>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d003      	beq.n	8003e44 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 f89b 	bl	8003f78 <UART_Transmit_IT>
    return;
 8003e42:	e00f      	b.n	8003e64 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_UART_IRQHandler+0x1ec>
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f8e2 	bl	8004022 <UART_EndTransmit_IT>
    return;
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003e62:	bf00      	nop
  }
}
 8003e64:	3720      	adds	r7, #32
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	08003f51 	.word	0x08003f51

08003e70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e92:	e02c      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9a:	d028      	beq.n	8003eee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea2:	f7fd f957 	bl	8001154 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d21d      	bcs.n	8003eee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2220      	movs	r2, #32
 8003ede:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e00f      	b.n	8003f0e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	79fb      	ldrb	r3, [r7, #7]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d0c3      	beq.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f2c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0201 	bic.w	r2, r2, #1
 8003f3c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2220      	movs	r2, #32
 8003f42:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr

08003f50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f7ff ff80 	bl	8003e70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f70:	bf00      	nop
 8003f72:	3710      	adds	r7, #16
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b21      	cmp	r3, #33	; 0x21
 8003f8a:	d144      	bne.n	8004016 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f94:	d11a      	bne.n	8003fcc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003faa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d105      	bne.n	8003fc0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	1c9a      	adds	r2, r3, #2
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	621a      	str	r2, [r3, #32]
 8003fbe:	e00e      	b.n	8003fde <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	621a      	str	r2, [r3, #32]
 8003fca:	e008      	b.n	8003fde <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	1c59      	adds	r1, r3, #1
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6211      	str	r1, [r2, #32]
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	4619      	mov	r1, r3
 8003fec:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68da      	ldr	r2, [r3, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004000:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68da      	ldr	r2, [r3, #12]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004010:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b082      	sub	sp, #8
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004038:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fe0c 	bl	8004c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b22      	cmp	r3, #34	; 0x22
 8004064:	d171      	bne.n	800414a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800406e:	d123      	bne.n	80040b8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004074:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d10e      	bne.n	800409c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	b29b      	uxth	r3, r3
 8004086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	629a      	str	r2, [r3, #40]	; 0x28
 800409a:	e029      	b.n	80040f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	b29b      	uxth	r3, r3
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	629a      	str	r2, [r3, #40]	; 0x28
 80040b6:	e01b      	b.n	80040f0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6858      	ldr	r0, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6291      	str	r1, [r2, #40]	; 0x28
 80040d0:	b2c2      	uxtb	r2, r0
 80040d2:	701a      	strb	r2, [r3, #0]
 80040d4:	e00c      	b.n	80040f0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	1c58      	adds	r0, r3, #1
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	6288      	str	r0, [r1, #40]	; 0x28
 80040e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004100:	2b00      	cmp	r3, #0
 8004102:	d120      	bne.n	8004146 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68da      	ldr	r2, [r3, #12]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 0220 	bic.w	r2, r2, #32
 8004112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0201 	bic.w	r2, r2, #1
 8004132:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fd98 	bl	8004c72 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e002      	b.n	800414c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	e000      	b.n	800414c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800414a:	2302      	movs	r3, #2
  }
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	431a      	orrs	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	4313      	orrs	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800418e:	f023 030c 	bic.w	r3, r3, #12
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	68f9      	ldr	r1, [r7, #12]
 8004198:	430b      	orrs	r3, r1
 800419a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a52      	ldr	r2, [pc, #328]	; (8004300 <UART_SetConfig+0x1ac>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d14e      	bne.n	800425a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7ff f8ce 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80041c0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <UART_SetConfig+0x1b0>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	0119      	lsls	r1, r3, #4
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041f8:	4b42      	ldr	r3, [pc, #264]	; (8004304 <UART_SetConfig+0x1b0>)
 80041fa:	fba3 0302 	umull	r0, r3, r3, r2
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	2064      	movs	r0, #100	; 0x64
 8004202:	fb00 f303 	mul.w	r3, r0, r3
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	3332      	adds	r3, #50	; 0x32
 800420c:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <UART_SetConfig+0x1b0>)
 800420e:	fba2 2303 	umull	r2, r3, r2, r3
 8004212:	095b      	lsrs	r3, r3, #5
 8004214:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004218:	4419      	add	r1, r3
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	009a      	lsls	r2, r3, #2
 8004224:	441a      	add	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004230:	4b34      	ldr	r3, [pc, #208]	; (8004304 <UART_SetConfig+0x1b0>)
 8004232:	fba3 0302 	umull	r0, r3, r3, r2
 8004236:	095b      	lsrs	r3, r3, #5
 8004238:	2064      	movs	r0, #100	; 0x64
 800423a:	fb00 f303 	mul.w	r3, r0, r3
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	3332      	adds	r3, #50	; 0x32
 8004244:	4a2f      	ldr	r2, [pc, #188]	; (8004304 <UART_SetConfig+0x1b0>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	440a      	add	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004258:	e04d      	b.n	80042f6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7ff f86b 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 800425e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009a      	lsls	r2, r3, #2
 800426a:	441a      	add	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	4a23      	ldr	r2, [pc, #140]	; (8004304 <UART_SetConfig+0x1b0>)
 8004278:	fba2 2303 	umull	r2, r3, r2, r3
 800427c:	095b      	lsrs	r3, r3, #5
 800427e:	0119      	lsls	r1, r3, #4
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009a      	lsls	r2, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fbb2 f2f3 	udiv	r2, r2, r3
 8004296:	4b1b      	ldr	r3, [pc, #108]	; (8004304 <UART_SetConfig+0x1b0>)
 8004298:	fba3 0302 	umull	r0, r3, r3, r2
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	2064      	movs	r0, #100	; 0x64
 80042a0:	fb00 f303 	mul.w	r3, r0, r3
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	3332      	adds	r3, #50	; 0x32
 80042aa:	4a16      	ldr	r2, [pc, #88]	; (8004304 <UART_SetConfig+0x1b0>)
 80042ac:	fba2 2303 	umull	r2, r3, r2, r3
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b6:	4419      	add	r1, r3
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	009a      	lsls	r2, r3, #2
 80042c2:	441a      	add	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ce:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <UART_SetConfig+0x1b0>)
 80042d0:	fba3 0302 	umull	r0, r3, r3, r2
 80042d4:	095b      	lsrs	r3, r3, #5
 80042d6:	2064      	movs	r0, #100	; 0x64
 80042d8:	fb00 f303 	mul.w	r3, r0, r3
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	3332      	adds	r3, #50	; 0x32
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <UART_SetConfig+0x1b0>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	440a      	add	r2, r1
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	bf00      	nop
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40013800 	.word	0x40013800
 8004304:	51eb851f 	.word	0x51eb851f

08004308 <COMP_FILT_update>:
 * when the clock runs at 72MHz. 140 us of it is due to 2x atan2 calculation.
 * In order to improve performance a lookup table and interpolation technique
 * is used
 */

void COMP_FILT_update(int16_t *imu, COMP_FILT* DataStruct) {
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b08d      	sub	sp, #52	; 0x34
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
	// Convert imu readings into new roll pitch and yaw
	float GYRO_GAIN = 0.95;
 8004312:	4b51      	ldr	r3, [pc, #324]	; (8004458 <COMP_FILT_update+0x150>)
 8004314:	62fb      	str	r3, [r7, #44]	; 0x2c
	float ACC_GAIN = 0.05;
 8004316:	4b51      	ldr	r3, [pc, #324]	; (800445c <COMP_FILT_update+0x154>)
 8004318:	62bb      	str	r3, [r7, #40]	; 0x28
	float Ts = 0.1;
 800431a:	4b51      	ldr	r3, [pc, #324]	; (8004460 <COMP_FILT_update+0x158>)
 800431c:	627b      	str	r3, [r7, #36]	; 0x24
	float gyro_X = (float)imu[3] * RAW_GYRO_TO_RAD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3306      	adds	r3, #6
 8004322:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fc fca2 	bl	8000c70 <__aeabi_i2f>
 800432c:	4603      	mov	r3, r0
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc f87a 	bl	8000428 <__aeabi_f2d>
 8004334:	a346      	add	r3, pc, #280	; (adr r3, 8004450 <COMP_FILT_update+0x148>)
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f7fc f8cd 	bl	80004d8 <__aeabi_dmul>
 800433e:	4603      	mov	r3, r0
 8004340:	460c      	mov	r4, r1
 8004342:	4618      	mov	r0, r3
 8004344:	4621      	mov	r1, r4
 8004346:	f7fc fb89 	bl	8000a5c <__aeabi_d2f>
 800434a:	4603      	mov	r3, r0
 800434c:	623b      	str	r3, [r7, #32]
	float gyro_Y = (float)imu[4] * RAW_GYRO_TO_RAD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3308      	adds	r3, #8
 8004352:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc fc8a 	bl	8000c70 <__aeabi_i2f>
 800435c:	4603      	mov	r3, r0
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f862 	bl	8000428 <__aeabi_f2d>
 8004364:	a33a      	add	r3, pc, #232	; (adr r3, 8004450 <COMP_FILT_update+0x148>)
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f7fc f8b5 	bl	80004d8 <__aeabi_dmul>
 800436e:	4603      	mov	r3, r0
 8004370:	460c      	mov	r4, r1
 8004372:	4618      	mov	r0, r3
 8004374:	4621      	mov	r1, r4
 8004376:	f7fc fb71 	bl	8000a5c <__aeabi_d2f>
 800437a:	4603      	mov	r3, r0
 800437c:	61fb      	str	r3, [r7, #28]

	//float acc_X = (float)imu[0] * RAW_ACC_TO_MS2;
	//float acc_Y = (float)imu[1] *  RAW_ACC_TO_MS2;
	//float acc_Z = (float)imu[2] *  RAW_ACC_TO_MS2;
	//float acc_roll = atan2(acc_Y,acc_Z);
	float acc_roll = atan_lookup(imu[1],imu[2]);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3302      	adds	r3, #2
 8004382:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800438e:	4619      	mov	r1, r3
 8004390:	4610      	mov	r0, r2
 8004392:	f000 f8c1 	bl	8004518 <atan_lookup>
 8004396:	61b8      	str	r0, [r7, #24]

	// pitch = atan2(accX, acc magnitude
	// acc_pitch = atan2(-acc_X ,sqrt(acc_X^2 + acc_Y^2 + acc_Z^2 ));
	//float acc_pitch = atan2(-acc_X ,acc_Z);
	float acc_pitch = atan_lookup(-imu[0],imu[2]);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	425b      	negs	r3, r3
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	b21a      	sxth	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3304      	adds	r3, #4
 80043aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f000 f8b1 	bl	8004518 <atan_lookup>
 80043b6:	6178      	str	r0, [r7, #20]

	float roll = acc_roll * ACC_GAIN + (gyro_X * Ts + DataStruct->roll) * GYRO_GAIN;
 80043b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043ba:	69b8      	ldr	r0, [r7, #24]
 80043bc:	f7fc fcac 	bl	8000d18 <__aeabi_fmul>
 80043c0:	4603      	mov	r3, r0
 80043c2:	461c      	mov	r4, r3
 80043c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043c6:	6a38      	ldr	r0, [r7, #32]
 80043c8:	f7fc fca6 	bl	8000d18 <__aeabi_fmul>
 80043cc:	4603      	mov	r3, r0
 80043ce:	461a      	mov	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4619      	mov	r1, r3
 80043d6:	4610      	mov	r0, r2
 80043d8:	f7fc fb96 	bl	8000b08 <__addsf3>
 80043dc:	4603      	mov	r3, r0
 80043de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7fc fc99 	bl	8000d18 <__aeabi_fmul>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4619      	mov	r1, r3
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7fc fb8c 	bl	8000b08 <__addsf3>
 80043f0:	4603      	mov	r3, r0
 80043f2:	613b      	str	r3, [r7, #16]
	float pitch = acc_pitch * ACC_GAIN + (gyro_Y * Ts + DataStruct->pitch) * GYRO_GAIN;
 80043f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f7fc fc8e 	bl	8000d18 <__aeabi_fmul>
 80043fc:	4603      	mov	r3, r0
 80043fe:	461c      	mov	r4, r3
 8004400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f7fc fc88 	bl	8000d18 <__aeabi_fmul>
 8004408:	4603      	mov	r3, r0
 800440a:	461a      	mov	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fc fb78 	bl	8000b08 <__addsf3>
 8004418:	4603      	mov	r3, r0
 800441a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800441c:	4618      	mov	r0, r3
 800441e:	f7fc fc7b 	bl	8000d18 <__aeabi_fmul>
 8004422:	4603      	mov	r3, r0
 8004424:	4619      	mov	r1, r3
 8004426:	4620      	mov	r0, r4
 8004428:	f7fc fb6e 	bl	8000b08 <__addsf3>
 800442c:	4603      	mov	r3, r0
 800442e:	60fb      	str	r3, [r7, #12]

	DataStruct->roll = roll;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	601a      	str	r2, [r3, #0]
	DataStruct->pitch = pitch;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	605a      	str	r2, [r3, #4]
	DataStruct->yaw = 0.0;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	609a      	str	r2, [r3, #8]

}
 8004444:	bf00      	nop
 8004446:	3734      	adds	r7, #52	; 0x34
 8004448:	46bd      	mov	sp, r7
 800444a:	bd90      	pop	{r4, r7, pc}
 800444c:	f3af 8000 	nop.w
 8004450:	a320437e 	.word	0xa320437e
 8004454:	3f21767f 	.word	0x3f21767f
 8004458:	3f733333 	.word	0x3f733333
 800445c:	3d4ccccd 	.word	0x3d4ccccd
 8004460:	3dcccccd 	.word	0x3dcccccd
 8004464:	00000000 	.word	0x00000000

08004468 <atan_lookup_init>:

void atan_lookup_init(int xMin, int xMax, int yMin, int yMax, int delta){
 8004468:	b5b0      	push	{r4, r5, r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
	for (int x=0;x<LEN_X;x++){
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	e03d      	b.n	80044f8 <atan_lookup_init+0x90>
		for (int y=0;y<LEN_Y;y++){
 800447c:	2300      	movs	r3, #0
 800447e:	613b      	str	r3, [r7, #16]
 8004480:	e034      	b.n	80044ec <atan_lookup_init+0x84>
			atan_table[x*LEN_X+y] = atan2(xMin + x*delta, yMin + y*delta)*floatPiToInt16;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004486:	fb02 f203 	mul.w	r2, r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f7fb ffb8 	bl	8000404 <__aeabi_i2d>
 8004494:	4604      	mov	r4, r0
 8004496:	460d      	mov	r5, r1
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800449c:	fb02 f203 	mul.w	r2, r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4413      	add	r3, r2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb ffad 	bl	8000404 <__aeabi_i2d>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f002 fd1a 	bl	8006eea <atan2>
 80044b6:	a314      	add	r3, pc, #80	; (adr r3, 8004508 <atan_lookup_init+0xa0>)
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f7fc f80c 	bl	80004d8 <__aeabi_dmul>
 80044c0:	4603      	mov	r3, r0
 80044c2:	460c      	mov	r4, r1
 80044c4:	4618      	mov	r0, r3
 80044c6:	4621      	mov	r1, r4
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4613      	mov	r3, r2
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	4413      	add	r3, r2
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	461a      	mov	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	18d4      	adds	r4, r2, r3
 80044d8:	f7fc fa98 	bl	8000a0c <__aeabi_d2iz>
 80044dc:	4603      	mov	r3, r0
 80044de:	b21a      	sxth	r2, r3
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <atan_lookup_init+0xa8>)
 80044e2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (int y=0;y<LEN_Y;y++){
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	3301      	adds	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b2f      	cmp	r3, #47	; 0x2f
 80044f0:	ddc7      	ble.n	8004482 <atan_lookup_init+0x1a>
	for (int x=0;x<LEN_X;x++){
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	3301      	adds	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b2f      	cmp	r3, #47	; 0x2f
 80044fc:	ddbe      	ble.n	800447c <atan_lookup_init+0x14>
		}
	}
}
 80044fe:	bf00      	nop
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bdb0      	pop	{r4, r5, r7, pc}
 8004506:	bf00      	nop
 8004508:	624dd2f2 	.word	0x624dd2f2
 800450c:	40c45f30 	.word	0x40c45f30
 8004510:	2000008c 	.word	0x2000008c
 8004514:	00000000 	.word	0x00000000

08004518 <atan_lookup>:

float atan_lookup(int16_t x, int16_t y){
 8004518:	b5b0      	push	{r4, r5, r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af00      	add	r7, sp, #0
 800451e:	4603      	mov	r3, r0
 8004520:	460a      	mov	r2, r1
 8004522:	80fb      	strh	r3, [r7, #6]
 8004524:	4613      	mov	r3, r2
 8004526:	80bb      	strh	r3, [r7, #4]
    // calculate the indices. remember that its 1d array so the value is at
    // x_index * LEN_X + y_index

	// if x is negative compute everything as for positive and change the output
	// to negative
	uint8_t neg_sign = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (x<0){
 800452e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004532:	2b00      	cmp	r3, #0
 8004534:	da06      	bge.n	8004544 <atan_lookup+0x2c>
		x=-x;
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	425b      	negs	r3, r3
 800453a:	b29b      	uxth	r3, r3
 800453c:	80fb      	strh	r3, [r7, #6]
		neg_sign = 1;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

    // taking advantage from the fact that resolution is set to 256
    // the division operation can be performed by bit shifting left by 8
    int x_index = x>>RES_SHIFT_DIVIDE;
 8004544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004548:	121b      	asrs	r3, r3, #8
 800454a:	b21b      	sxth	r3, r3
 800454c:	62bb      	str	r3, [r7, #40]	; 0x28
    int y_index = (y-Y_MIN)>>RES_SHIFT_DIVIDE;
 800454e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004552:	f5a3 53f5 	sub.w	r3, r3, #7840	; 0x1ea0
 8004556:	3b10      	subs	r3, #16
 8004558:	121b      	asrs	r3, r3, #8
 800455a:	627b      	str	r3, [r7, #36]	; 0x24

    // Check if the values are covered by the lookup table. if not then
    // calculate the atan the usual way.
    if ((x_index >= LEN_X) || (y_index >= LEN_Y)){
 800455c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455e:	2b2f      	cmp	r3, #47	; 0x2f
 8004560:	dc02      	bgt.n	8004568 <atan_lookup+0x50>
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	2b2f      	cmp	r3, #47	; 0x2f
 8004566:	dd38      	ble.n	80045da <atan_lookup+0xc2>
    	if (neg_sign == 1){
 8004568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800456c:	2b01      	cmp	r3, #1
 800456e:	d11a      	bne.n	80045a6 <atan_lookup+0x8e>
    		return atan2(-x,y);
 8004570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004574:	425b      	negs	r3, r3
 8004576:	4618      	mov	r0, r3
 8004578:	f7fb ff44 	bl	8000404 <__aeabi_i2d>
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f7fb ff3d 	bl	8000404 <__aeabi_i2d>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4620      	mov	r0, r4
 8004590:	4629      	mov	r1, r5
 8004592:	f002 fcaa 	bl	8006eea <atan2>
 8004596:	4603      	mov	r3, r0
 8004598:	460c      	mov	r4, r1
 800459a:	4618      	mov	r0, r3
 800459c:	4621      	mov	r1, r4
 800459e:	f7fc fa5d 	bl	8000a5c <__aeabi_d2f>
 80045a2:	4603      	mov	r3, r0
 80045a4:	e087      	b.n	80046b6 <atan_lookup+0x19e>
    	}
    	else {
    		return atan2(x,y);
 80045a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fb ff2a 	bl	8000404 <__aeabi_i2d>
 80045b0:	4604      	mov	r4, r0
 80045b2:	460d      	mov	r5, r1
 80045b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fb ff23 	bl	8000404 <__aeabi_i2d>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4620      	mov	r0, r4
 80045c4:	4629      	mov	r1, r5
 80045c6:	f002 fc90 	bl	8006eea <atan2>
 80045ca:	4603      	mov	r3, r0
 80045cc:	460c      	mov	r4, r1
 80045ce:	4618      	mov	r0, r3
 80045d0:	4621      	mov	r1, r4
 80045d2:	f7fc fa43 	bl	8000a5c <__aeabi_d2f>
 80045d6:	4603      	mov	r3, r0
 80045d8:	e06d      	b.n	80046b6 <atan_lookup+0x19e>
    	}
    }

    // Get the values from lookup table
    int16_t base_val = atan_table[x_index*LEN_X+y_index];
 80045da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045dc:	4613      	mov	r3, r2
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	4413      	add	r3, r2
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	461a      	mov	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	4413      	add	r3, r2
 80045ea:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <atan_lookup+0x1b0>)
 80045ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f0:	847b      	strh	r3, [r7, #34]	; 0x22
    int16_t next_x_val = atan_table[(x_index+1)*LEN_X+y_index];
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	1c5a      	adds	r2, r3, #1
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	461a      	mov	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	4413      	add	r3, r2
 8004604:	4a30      	ldr	r2, [pc, #192]	; (80046c8 <atan_lookup+0x1b0>)
 8004606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800460a:	843b      	strh	r3, [r7, #32]
    int16_t next_y_val = atan_table[x_index*LEN_X+y_index+1];
 800460c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800460e:	4613      	mov	r3, r2
 8004610:	005b      	lsls	r3, r3, #1
 8004612:	4413      	add	r3, r2
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	461a      	mov	r2, r3
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	4413      	add	r3, r2
 800461c:	3301      	adds	r3, #1
 800461e:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <atan_lookup+0x1b0>)
 8004620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004624:	83fb      	strh	r3, [r7, #30]

    // compute reminder from the division. because the resolution is 256
    // modulo operation can be translated to bitwise AND. val%divisior
    // is val & divisor-1. 256-1 = hex 0xFF
    int16_t rem_x = x & 0xFF;
 8004626:	88fb      	ldrh	r3, [r7, #6]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	83bb      	strh	r3, [r7, #28]
    int16_t rem_y = y & 0xFF;
 800462c:	88bb      	ldrh	r3, [r7, #4]
 800462e:	b2db      	uxtb	r3, r3
 8004630:	837b      	strh	r3, [r7, #26]

    // compute change in values for interval from base to next_x* mod(x,interval)
    //
    int dx = ((next_x_val - base_val)* rem_x ) >> RES_SHIFT_DIVIDE;
 8004632:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8004636:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8004640:	fb02 f303 	mul.w	r3, r2, r3
 8004644:	121b      	asrs	r3, r3, #8
 8004646:	617b      	str	r3, [r7, #20]
    int dy = ((next_y_val - base_val)* rem_y ) >> RES_SHIFT_DIVIDE;
 8004648:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800464c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8004656:	fb02 f303 	mul.w	r3, r2, r3
 800465a:	121b      	asrs	r3, r3, #8
 800465c:	613b      	str	r3, [r7, #16]

    int output = base_val + dx +dy;
 800465e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4413      	add	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]

    if (neg_sign == 1) {
 800466c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004670:	2b01      	cmp	r3, #1
 8004672:	d111      	bne.n	8004698 <atan_lookup+0x180>
    	return -output*int16PiToFloat;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	425b      	negs	r3, r3
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb fec3 	bl	8000404 <__aeabi_i2d>
 800467e:	a310      	add	r3, pc, #64	; (adr r3, 80046c0 <atan_lookup+0x1a8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fc f852 	bl	800072c <__aeabi_ddiv>
 8004688:	4603      	mov	r3, r0
 800468a:	460c      	mov	r4, r1
 800468c:	4618      	mov	r0, r3
 800468e:	4621      	mov	r1, r4
 8004690:	f7fc f9e4 	bl	8000a5c <__aeabi_d2f>
 8004694:	4603      	mov	r3, r0
 8004696:	e00e      	b.n	80046b6 <atan_lookup+0x19e>
    }
    else {
    	return output*int16PiToFloat;
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fb feb3 	bl	8000404 <__aeabi_i2d>
 800469e:	a308      	add	r3, pc, #32	; (adr r3, 80046c0 <atan_lookup+0x1a8>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f7fc f842 	bl	800072c <__aeabi_ddiv>
 80046a8:	4603      	mov	r3, r0
 80046aa:	460c      	mov	r4, r1
 80046ac:	4618      	mov	r0, r3
 80046ae:	4621      	mov	r1, r4
 80046b0:	f7fc f9d4 	bl	8000a5c <__aeabi_d2f>
 80046b4:	4603      	mov	r3, r0
    }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3730      	adds	r7, #48	; 0x30
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bdb0      	pop	{r4, r5, r7, pc}
 80046be:	bf00      	nop
 80046c0:	624dd2f2 	.word	0x624dd2f2
 80046c4:	40c45f30 	.word	0x40c45f30
 80046c8:	2000008c 	.word	0x2000008c

080046cc <debugPrintStr>:
#include "stdio.h"
#include "string.h"



void debugPrintStr(char _out[]){
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) _out, strlen(_out), 10);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fb fd3b 	bl	8000150 <strlen>
 80046da:	4603      	mov	r3, r0
 80046dc:	b29a      	uxth	r2, r3
 80046de:	230a      	movs	r3, #10
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4803      	ldr	r0, [pc, #12]	; (80046f0 <debugPrintStr+0x24>)
 80046e4:	f7ff fa2f 	bl	8003b46 <HAL_UART_Transmit>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	2000129c 	.word	0x2000129c

080046f4 <debugPrintInt>:

void debugPrintInt(int num){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	char str_num[10];

	// convert 123 to string [buf]
	itoa(num, str_num, 10);
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	220a      	movs	r2, #10
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f001 f895 	bl	8005834 <itoa>

	debugPrintStr(str_num);
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff ffdc 	bl	80046cc <debugPrintStr>


}
 8004714:	bf00      	nop
 8004716:	3718      	adds	r7, #24
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <debugPrintFloat>:


void debugPrintFloat(float num) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	//int ndigits : It is number of digits.
	//char * buf : It is character pointer, in this
	//variable string converted value will be copied.

	char str_num[10];
	int ndigits = 5;
 8004724:	2305      	movs	r3, #5
 8004726:	617b      	str	r3, [r7, #20]
	gcvt(num, ndigits, &str_num);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fb fe7d 	bl	8000428 <__aeabi_f2d>
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	f001 f818 	bl	8005768 <gcvt>
	debugPrintStr(str_num);
 8004738:	f107 0308 	add.w	r3, r7, #8
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ffc5 	bl	80046cc <debugPrintStr>


}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b0b4      	sub	sp, #208	; 0xd0
 8004750:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004752:	f7fc fca7 	bl	80010a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004756:	f000 f8db 	bl	8004910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800475a:	f000 fa17 	bl	8004b8c <MX_GPIO_Init>
  MX_DMA_Init();
 800475e:	f000 f9ef 	bl	8004b40 <MX_DMA_Init>
  MX_I2C2_Init();
 8004762:	f000 f91b 	bl	800499c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8004766:	f000 f9c1 	bl	8004aec <MX_USART1_UART_Init>
  MX_TIM4_Init();
 800476a:	f000 f945 	bl	80049f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ///////////////////////

  // LED logic is reversed. HIGH = LED off
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800476e:	2201      	movs	r2, #1
 8004770:	2110      	movs	r1, #16
 8004772:	4861      	ldr	r0, [pc, #388]	; (80048f8 <main+0x1ac>)
 8004774:	f7fd f958 	bl	8001a28 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8004778:	2201      	movs	r2, #1
 800477a:	2108      	movs	r1, #8
 800477c:	485e      	ldr	r0, [pc, #376]	; (80048f8 <main+0x1ac>)
 800477e:	f7fd f953 	bl	8001a28 <HAL_GPIO_WritePin>
  // init mpu6050 structs
  SD_MPU6050 mpu1;
  SD_MPU6050_Result result ;

  // setup the mpu6050
  result = SD_MPU6050_Init(&hi2c2,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8004782:	f107 0118 	add.w	r1, r7, #24
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2300      	movs	r3, #0
 800478c:	2200      	movs	r2, #0
 800478e:	485b      	ldr	r0, [pc, #364]	; (80048fc <main+0x1b0>)
 8004790:	f000 fb91 	bl	8004eb6 <SD_MPU6050_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
  HAL_Delay(500);
 800479a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800479e:	f7fc fce3 	bl	8001168 <HAL_Delay>
  if(result == SD_MPU6050_Result_Ok){
 80047a2:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d112      	bne.n	80047d0 <main+0x84>
	  debugPrintStr("mpu6050 ok \n");
 80047aa:	4855      	ldr	r0, [pc, #340]	; (8004900 <main+0x1b4>)
 80047ac:	f7ff ff8e 	bl	80046cc <debugPrintStr>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	  while(1); // Stop code. something is wrong with mpu6050
  }

  // precalculate atan lookup table
  atan_lookup_init(X_MIN, X_MAX, Y_MIN, Y_MAX ,RES_LOOKUP);
 80047b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	f644 63b0 	movw	r3, #20144	; 0x4eb0
 80047ba:	f641 62b0 	movw	r2, #7856	; 0x1eb0
 80047be:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80047c2:	2000      	movs	r0, #0
 80047c4:	f7ff fe50 	bl	8004468 <atan_lookup_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  // Blink green LED 5 times to indicate that setup was successful
  for (int i=0;i<4;i++){
 80047c8:	2300      	movs	r3, #0
 80047ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047ce:	e015      	b.n	80047fc <main+0xb0>
	  debugPrintStr("mpu6050 error \n");
 80047d0:	484c      	ldr	r0, [pc, #304]	; (8004904 <main+0x1b8>)
 80047d2:	f7ff ff7b 	bl	80046cc <debugPrintStr>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80047d6:	2200      	movs	r2, #0
 80047d8:	2110      	movs	r1, #16
 80047da:	4847      	ldr	r0, [pc, #284]	; (80048f8 <main+0x1ac>)
 80047dc:	f7fd f924 	bl	8001a28 <HAL_GPIO_WritePin>
	  while(1); // Stop code. something is wrong with mpu6050
 80047e0:	e7fe      	b.n	80047e0 <main+0x94>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80047e2:	2108      	movs	r1, #8
 80047e4:	4844      	ldr	r0, [pc, #272]	; (80048f8 <main+0x1ac>)
 80047e6:	f7fd f937 	bl	8001a58 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80047ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047ee:	f7fc fcbb 	bl	8001168 <HAL_Delay>
  for (int i=0;i<4;i++){
 80047f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80047fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004800:	2b03      	cmp	r3, #3
 8004802:	ddee      	ble.n	80047e2 <main+0x96>
	  // x positive - ESC connector
	  // y positive - usb connector
	  // z positive - down (SwD pins)
	  int16_t IMU[5];

	  SD_MPU6050_ReadAccelerometer(&hi2c2,&mpu1);
 8004804:	f107 0318 	add.w	r3, r7, #24
 8004808:	4619      	mov	r1, r3
 800480a:	483c      	ldr	r0, [pc, #240]	; (80048fc <main+0x1b0>)
 800480c:	f000 fcd4 	bl	80051b8 <SD_MPU6050_ReadAccelerometer>
	  IMU[0] = mpu1.Accelerometer_X;
 8004810:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8004814:	81bb      	strh	r3, [r7, #12]
	  IMU[0] = -IMU[0]; // Flip the sign to fit the convention
 8004816:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800481a:	b29b      	uxth	r3, r3
 800481c:	425b      	negs	r3, r3
 800481e:	b29b      	uxth	r3, r3
 8004820:	b21b      	sxth	r3, r3
 8004822:	81bb      	strh	r3, [r7, #12]
	  IMU[1] = mpu1.Accelerometer_Y;
 8004824:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004828:	81fb      	strh	r3, [r7, #14]
	  IMU[2] = mpu1.Accelerometer_Z;
 800482a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800482e:	823b      	strh	r3, [r7, #16]

	  SD_MPU6050_ReadGyroscope(&hi2c2,&mpu1);
 8004830:	f107 0318 	add.w	r3, r7, #24
 8004834:	4619      	mov	r1, r3
 8004836:	4831      	ldr	r0, [pc, #196]	; (80048fc <main+0x1b0>)
 8004838:	f000 fd08 	bl	800524c <SD_MPU6050_ReadGyroscope>
	  IMU[3] = mpu1.Gyroscope_X;
 800483c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004840:	827b      	strh	r3, [r7, #18]
	  IMU[4] = mpu1.Gyroscope_Y;
 8004842:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004846:	82bb      	strh	r3, [r7, #20]
	  IMU[4] = -IMU[4]; // Flip the sign to fit the convention
 8004848:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800484c:	b29b      	uxth	r3, r3
 800484e:	425b      	negs	r3, r3
 8004850:	b29b      	uxth	r3, r3
 8004852:	b21b      	sxth	r3, r3
 8004854:	82bb      	strh	r3, [r7, #20]
	  IMU[5] = mpu1.Gyroscope_Z;
 8004856:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800485a:	82fb      	strh	r3, [r7, #22]
	  IMU[5] = -IMU[5]; // Flip the sign to fit the convention
 800485c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004860:	b29b      	uxth	r3, r3
 8004862:	425b      	negs	r3, r3
 8004864:	b29b      	uxth	r3, r3
 8004866:	b21b      	sxth	r3, r3
 8004868:	82fb      	strh	r3, [r7, #22]



	  float RPY[2];
	  COMP_FILT_update(IMU, &comp_filt);
 800486a:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800486e:	f107 030c 	add.w	r3, r7, #12
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fd47 	bl	8004308 <COMP_FILT_update>


	  RPY[0] = comp_filt.roll;
 800487a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800487e:	607b      	str	r3, [r7, #4]
	  RPY[1] = comp_filt.pitch;
 8004880:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004884:	60bb      	str	r3, [r7, #8]
	  RPY[2] = comp_filt.yaw;
 8004886:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800488a:	60fb      	str	r3, [r7, #12]


	  debugPrintFloat(RPY[0]);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff ff44 	bl	800471c <debugPrintFloat>
	  debugPrintStr(", ");
 8004894:	481c      	ldr	r0, [pc, #112]	; (8004908 <main+0x1bc>)
 8004896:	f7ff ff19 	bl	80046cc <debugPrintStr>
	  debugPrintFloat(RPY[1]);
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff ff3d 	bl	800471c <debugPrintFloat>
	  debugPrintStr(", ");
 80048a2:	4819      	ldr	r0, [pc, #100]	; (8004908 <main+0x1bc>)
 80048a4:	f7ff ff12 	bl	80046cc <debugPrintStr>
	  debugPrintFloat(RPY[2]);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7ff ff36 	bl	800471c <debugPrintFloat>
	  debugPrintStr("\n");
 80048b0:	4816      	ldr	r0, [pc, #88]	; (800490c <main+0x1c0>)
 80048b2:	f7ff ff0b 	bl	80046cc <debugPrintStr>

	  // update pid. outputs available in rpy_pid_data->out[i]
	  rpy_pid_update(RPY, &rpy_pid_data,&rpy_pid_val);
 80048b6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80048ba:	f107 0184 	add.w	r1, r7, #132	; 0x84
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f9e5 	bl	8004c90 <rpy_pid_update>

	  // 48000 = 2ms
	  // 24000 = 1ms
	  pwm_setvalue(48000, TIM_CHANNEL_1);
 80048c6:	2100      	movs	r1, #0
 80048c8:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80048cc:	f000 f9a8 	bl	8004c20 <pwm_setvalue>
	  pwm_setvalue(48000, TIM_CHANNEL_2);
 80048d0:	2104      	movs	r1, #4
 80048d2:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80048d6:	f000 f9a3 	bl	8004c20 <pwm_setvalue>
	  pwm_setvalue(48000, TIM_CHANNEL_3);
 80048da:	2108      	movs	r1, #8
 80048dc:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80048e0:	f000 f99e 	bl	8004c20 <pwm_setvalue>
	  pwm_setvalue(48000, TIM_CHANNEL_4);
 80048e4:	210c      	movs	r1, #12
 80048e6:	f64b 3080 	movw	r0, #48000	; 0xbb80
 80048ea:	f000 f999 	bl	8004c20 <pwm_setvalue>
	  HAL_Delay(100);
 80048ee:	2064      	movs	r0, #100	; 0x64
 80048f0:	f7fc fc3a 	bl	8001168 <HAL_Delay>
  {
 80048f4:	e786      	b.n	8004804 <main+0xb8>
 80048f6:	bf00      	nop
 80048f8:	40010c00 	.word	0x40010c00
 80048fc:	2000131c 	.word	0x2000131c
 8004900:	080073fc 	.word	0x080073fc
 8004904:	0800740c 	.word	0x0800740c
 8004908:	0800741c 	.word	0x0800741c
 800490c:	08007420 	.word	0x08007420

08004910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b090      	sub	sp, #64	; 0x40
 8004914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004916:	f107 0318 	add.w	r3, r7, #24
 800491a:	2228      	movs	r2, #40	; 0x28
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 ff8a 	bl	8005838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004924:	1d3b      	adds	r3, r7, #4
 8004926:	2200      	movs	r2, #0
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	605a      	str	r2, [r3, #4]
 800492c:	609a      	str	r2, [r3, #8]
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004932:	2301      	movs	r3, #1
 8004934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800493c:	2300      	movs	r3, #0
 800493e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004940:	2301      	movs	r3, #1
 8004942:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004944:	2302      	movs	r3, #2
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004948:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800494c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800494e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004952:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004954:	f107 0318 	add.w	r3, r7, #24
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe f913 	bl	8002b84 <HAL_RCC_OscConfig>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8004964:	f000 f98e 	bl	8004c84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004968:	230f      	movs	r3, #15
 800496a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800496c:	2302      	movs	r3, #2
 800496e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004970:	2300      	movs	r3, #0
 8004972:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004974:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800497e:	1d3b      	adds	r3, r7, #4
 8004980:	2102      	movs	r1, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f7fe fb7e 	bl	8003084 <HAL_RCC_ClockConfig>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800498e:	f000 f979 	bl	8004c84 <Error_Handler>
  }
}
 8004992:	bf00      	nop
 8004994:	3740      	adds	r7, #64	; 0x40
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
	...

0800499c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <MX_I2C2_Init+0x50>)
 80049a2:	4a13      	ldr	r2, [pc, #76]	; (80049f0 <MX_I2C2_Init+0x54>)
 80049a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80049a6:	4b11      	ldr	r3, [pc, #68]	; (80049ec <MX_I2C2_Init+0x50>)
 80049a8:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <MX_I2C2_Init+0x58>)
 80049aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80049ac:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <MX_I2C2_Init+0x50>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <MX_I2C2_Init+0x50>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <MX_I2C2_Init+0x50>)
 80049ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80049c0:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <MX_I2C2_Init+0x50>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <MX_I2C2_Init+0x50>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <MX_I2C2_Init+0x50>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <MX_I2C2_Init+0x50>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80049d8:	4804      	ldr	r0, [pc, #16]	; (80049ec <MX_I2C2_Init+0x50>)
 80049da:	f7fd f855 	bl	8001a88 <HAL_I2C_Init>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80049e4:	f000 f94e 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80049e8:	bf00      	nop
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	2000131c 	.word	0x2000131c
 80049f0:	40005800 	.word	0x40005800
 80049f4:	000186a0 	.word	0x000186a0

080049f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	615a      	str	r2, [r3, #20]
 8004a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004a1a:	4b32      	ldr	r3, [pc, #200]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a1c:	4a32      	ldr	r2, [pc, #200]	; (8004ae8 <MX_TIM4_Init+0xf0>)
 8004a1e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8004a20:	4b30      	ldr	r3, [pc, #192]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a22:	2202      	movs	r2, #2
 8004a24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 53333;
 8004a2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a2e:	f24d 0255 	movw	r2, #53333	; 0xd055
 8004a32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a34:	4b2b      	ldr	r3, [pc, #172]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004a40:	4828      	ldr	r0, [pc, #160]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a42:	f7fe fcbd 	bl	80033c0 <HAL_TIM_PWM_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004a4c:	f000 f91a 	bl	8004c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004a58:	f107 0320 	add.w	r3, r7, #32
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4821      	ldr	r0, [pc, #132]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a60:	f7fe ffe0 	bl	8003a24 <HAL_TIMEx_MasterConfigSynchronization>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004a6a:	f000 f90b 	bl	8004c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a6e:	2360      	movs	r3, #96	; 0x60
 8004a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	2200      	movs	r2, #0
 8004a82:	4619      	mov	r1, r3
 8004a84:	4817      	ldr	r0, [pc, #92]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a86:	f7fe fcf9 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004a90:	f000 f8f8 	bl	8004c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	2204      	movs	r2, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4812      	ldr	r0, [pc, #72]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004a9c:	f7fe fcee 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004aa6:	f000 f8ed 	bl	8004c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aaa:	1d3b      	adds	r3, r7, #4
 8004aac:	2208      	movs	r2, #8
 8004aae:	4619      	mov	r1, r3
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004ab2:	f7fe fce3 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8004abc:	f000 f8e2 	bl	8004c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004ac0:	1d3b      	adds	r3, r7, #4
 8004ac2:	220c      	movs	r2, #12
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4807      	ldr	r0, [pc, #28]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004ac8:	f7fe fcd8 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8004ad2:	f000 f8d7 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004ad6:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <MX_TIM4_Init+0xec>)
 8004ad8:	f000 fc92 	bl	8005400 <HAL_TIM_MspPostInit>

}
 8004adc:	bf00      	nop
 8004ade:	3728      	adds	r7, #40	; 0x28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	200012dc 	.word	0x200012dc
 8004ae8:	40000800 	.word	0x40000800

08004aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004af0:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004af2:	4a12      	ldr	r2, [pc, #72]	; (8004b3c <MX_USART1_UART_Init+0x50>)
 8004af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004af6:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b12:	220c      	movs	r2, #12
 8004b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <MX_USART1_UART_Init+0x4c>)
 8004b24:	f7fe ffc2 	bl	8003aac <HAL_UART_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004b2e:	f000 f8a9 	bl	8004c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	2000129c 	.word	0x2000129c
 8004b3c:	40013800 	.word	0x40013800

08004b40 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b46:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <MX_DMA_Init+0x48>)
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	4a0f      	ldr	r2, [pc, #60]	; (8004b88 <MX_DMA_Init+0x48>)
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	6153      	str	r3, [r2, #20]
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <MX_DMA_Init+0x48>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004b5e:	2200      	movs	r2, #0
 8004b60:	2100      	movs	r1, #0
 8004b62:	200e      	movs	r0, #14
 8004b64:	f7fc fbf9 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004b68:	200e      	movs	r0, #14
 8004b6a:	f7fc fc12 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2100      	movs	r1, #0
 8004b72:	200f      	movs	r0, #15
 8004b74:	f7fc fbf1 	bl	800135a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004b78:	200f      	movs	r0, #15
 8004b7a:	f7fc fc0a 	bl	8001392 <HAL_NVIC_EnableIRQ>

}
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	40021000 	.word	0x40021000

08004b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b92:	f107 0310 	add.w	r3, r7, #16
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
 8004b9c:	609a      	str	r2, [r3, #8]
 8004b9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ba0:	4b1d      	ldr	r3, [pc, #116]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	4a1c      	ldr	r2, [pc, #112]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004ba6:	f043 0320 	orr.w	r3, r3, #32
 8004baa:	6193      	str	r3, [r2, #24]
 8004bac:	4b1a      	ldr	r3, [pc, #104]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	f003 0320 	and.w	r3, r3, #32
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb8:	4b17      	ldr	r3, [pc, #92]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	6193      	str	r3, [r2, #24]
 8004bc4:	4b14      	ldr	r3, [pc, #80]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bd0:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	4a10      	ldr	r2, [pc, #64]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bd6:	f043 0304 	orr.w	r3, r3, #4
 8004bda:	6193      	str	r3, [r2, #24]
 8004bdc:	4b0e      	ldr	r3, [pc, #56]	; (8004c18 <MX_GPIO_Init+0x8c>)
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	607b      	str	r3, [r7, #4]
 8004be6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8004be8:	2200      	movs	r2, #0
 8004bea:	2118      	movs	r1, #24
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <MX_GPIO_Init+0x90>)
 8004bee:	f7fc ff1b 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004bf2:	2318      	movs	r3, #24
 8004bf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bfe:	2302      	movs	r3, #2
 8004c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c02:	f107 0310 	add.w	r3, r7, #16
 8004c06:	4619      	mov	r1, r3
 8004c08:	4804      	ldr	r0, [pc, #16]	; (8004c1c <MX_GPIO_Init+0x90>)
 8004c0a:	f7fc fdb3 	bl	8001774 <HAL_GPIO_Init>

}
 8004c0e:	bf00      	nop
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40010c00 	.word	0x40010c00

08004c20 <pwm_setvalue>:
/* USER CODE BEGIN 4 */
///////////////////////


void pwm_setvalue(uint16_t value, uint32_t channel)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08a      	sub	sp, #40	; 0x28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4603      	mov	r3, r0
 8004c28:	6039      	str	r1, [r7, #0]
 8004c2a:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c2c:	2360      	movs	r3, #96	; 0x60
 8004c2e:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = value;
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	61fb      	str	r3, [r7, #28]
    HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	2200      	movs	r2, #0
 8004c42:	4619      	mov	r1, r3
 8004c44:	4805      	ldr	r0, [pc, #20]	; (8004c5c <pwm_setvalue+0x3c>)
 8004c46:	f7fe fc19 	bl	800347c <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(&htim4, channel);
 8004c4a:	6839      	ldr	r1, [r7, #0]
 8004c4c:	4803      	ldr	r0, [pc, #12]	; (8004c5c <pwm_setvalue+0x3c>)
 8004c4e:	f7fe fbe3 	bl	8003418 <HAL_TIM_PWM_Start>
}
 8004c52:	bf00      	nop
 8004c54:	3728      	adds	r7, #40	; 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	200012dc 	.word	0x200012dc

08004c60 <HAL_UART_TxCpltCallback>:


// UART transmit callback function. called once the transmission is finished
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart1,buffer_rx,10);
	// UART transmission is finished.
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <HAL_UART_RxCpltCallback>:

// UART receive callback function. called once the buffer is full
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
	//char msg[4] = {'t','e','s','t'};
	//HAL_UART_Transmit(&huart1,msg,4, 4);
	//HAL_UART_Transmit_DMA(&huart1,buffer_tx,10);


}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bc80      	pop	{r7}
 8004c8e:	4770      	bx	lr

08004c90 <rpy_pid_update>:
	pid->satMin[2] = 1;

}


void rpy_pid_update(float *meas, RPY_PID_DATA* data, RPY_PID_VAL* pid) {
 8004c90:	b5b0      	push	{r4, r5, r7, lr}
 8004c92:	b08a      	sub	sp, #40	; 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]


	// Loop through all pid's (roll,pitch,yaw)
	for(int i = 0; i<3; i++){
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca0:	e101      	b.n	8004ea6 <rpy_pid_update+0x216>

		// Calculate error
		float err = data->sp[i] - meas[i];
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f7fb ff25 	bl	8000b04 <__aeabi_fsub>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	623b      	str	r3, [r7, #32]

		// Derivative filtering
		float errFilt = data->prevErrFilt[i] + pid->Ts*pid->kn[i] * (err- data->prevErrFilt[i]);
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	685c      	ldr	r4, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	f7fc f81c 	bl	8000d18 <__aeabi_fmul>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	461d      	mov	r5, r3
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	3308      	adds	r3, #8
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6a38      	ldr	r0, [r7, #32]
 8004cf4:	f7fb ff06 	bl	8000b04 <__aeabi_fsub>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7fc f80b 	bl	8000d18 <__aeabi_fmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4619      	mov	r1, r3
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7fb fefe 	bl	8000b08 <__addsf3>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	61fb      	str	r3, [r7, #28]

		// Derivative error
		float derErr = (errFilt - data->prevErrFilt[i]) * pid->freq;
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	3308      	adds	r3, #8
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	69f8      	ldr	r0, [r7, #28]
 8004d20:	f7fb fef0 	bl	8000b04 <__aeabi_fsub>
 8004d24:	4603      	mov	r3, r0
 8004d26:	461a      	mov	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f7fb fff2 	bl	8000d18 <__aeabi_fmul>
 8004d34:	4603      	mov	r3, r0
 8004d36:	61bb      	str	r3, [r7, #24]

		// Update prev filtered error
		data->prevErrFilt[i] = errFilt;
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	605a      	str	r2, [r3, #4]

		// Integral error = ki * error * sampling time
		float intErr = pid->ki[i] * err * pid->Ts ;
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	3302      	adds	r3, #2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	6a39      	ldr	r1, [r7, #32]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fb ffdf 	bl	8000d18 <__aeabi_fmul>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fb ffd7 	bl	8000d18 <__aeabi_fmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	617b      	str	r3, [r7, #20]

		// output
		float out = pid->kp[i]*err + intErr + data->intTot[i] + pid->kd[i] * derErr;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d76:	6a39      	ldr	r1, [r7, #32]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb ffcd 	bl	8000d18 <__aeabi_fmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	6979      	ldr	r1, [r7, #20]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fec0 	bl	8000b08 <__addsf3>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d90:	3206      	adds	r2, #6
 8004d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d96:	4619      	mov	r1, r3
 8004d98:	f7fb feb6 	bl	8000b08 <__addsf3>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	461c      	mov	r4, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da4:	3206      	adds	r2, #6
 8004da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb ffb3 	bl	8000d18 <__aeabi_fmul>
 8004db2:	4603      	mov	r3, r0
 8004db4:	4619      	mov	r1, r3
 8004db6:	4620      	mov	r0, r4
 8004db8:	f7fb fea6 	bl	8000b08 <__addsf3>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	613b      	str	r3, [r7, #16]

		// Saturate output
		if (out > pid->satMax[i]) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc4:	320c      	adds	r2, #12
 8004dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6938      	ldr	r0, [r7, #16]
 8004dce:	f7fc f95f 	bl	8001090 <__aeabi_fcmpgt>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01f      	beq.n	8004e18 <rpy_pid_update+0x188>
			data->out[i] = out;
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3302      	adds	r3, #2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	4413      	add	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	605a      	str	r2, [r3, #4]
			if (intErr < 0) data->intTot[i] += intErr;
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	6978      	ldr	r0, [r7, #20]
 8004dec:	f7fc f932 	bl	8001054 <__aeabi_fcmplt>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d054      	beq.n	8004ea0 <rpy_pid_update+0x210>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	3206      	adds	r2, #6
 8004dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e00:	6979      	ldr	r1, [r7, #20]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fe80 	bl	8000b08 <__addsf3>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e10:	3206      	adds	r2, #6
 8004e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e16:	e043      	b.n	8004ea0 <rpy_pid_update+0x210>
		}
		else if (out < pid->satMin[i]) {
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	330e      	adds	r3, #14
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	4619      	mov	r1, r3
 8004e26:	6938      	ldr	r0, [r7, #16]
 8004e28:	f7fc f914 	bl	8001054 <__aeabi_fcmplt>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01f      	beq.n	8004e72 <rpy_pid_update+0x1e2>
			data->out[i] = out;
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	3302      	adds	r3, #2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	693a      	ldr	r2, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]
			if (intErr > 0) data->intTot[i] += intErr;
 8004e40:	f04f 0100 	mov.w	r1, #0
 8004e44:	6978      	ldr	r0, [r7, #20]
 8004e46:	f7fc f923 	bl	8001090 <__aeabi_fcmpgt>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d027      	beq.n	8004ea0 <rpy_pid_update+0x210>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e54:	3206      	adds	r2, #6
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fb fe53 	bl	8000b08 <__addsf3>
 8004e62:	4603      	mov	r3, r0
 8004e64:	4619      	mov	r1, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6a:	3206      	adds	r2, #6
 8004e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004e70:	e016      	b.n	8004ea0 <rpy_pid_update+0x210>
		}
		else {
			data->out[i] = out;
 8004e72:	68ba      	ldr	r2, [r7, #8]
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	3302      	adds	r3, #2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	605a      	str	r2, [r3, #4]
			data->intTot[i] += intErr;
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e84:	3206      	adds	r2, #6
 8004e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8a:	6979      	ldr	r1, [r7, #20]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fb fe3b 	bl	8000b08 <__addsf3>
 8004e92:	4603      	mov	r3, r0
 8004e94:	4619      	mov	r1, r3
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e9a:	3206      	adds	r2, #6
 8004e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i = 0; i<3; i++){
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	f77f aefa 	ble.w	8004ca2 <rpy_pid_update+0x12>
		}
	}
}
 8004eae:	bf00      	nop
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bdb0      	pop	{r4, r5, r7, pc}

08004eb6 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8004eb6:	b580      	push	{r7, lr}
 8004eb8:	b08a      	sub	sp, #40	; 0x28
 8004eba:	af02      	add	r7, sp, #8
 8004ebc:	60f8      	str	r0, [r7, #12]
 8004ebe:	60b9      	str	r1, [r7, #8]
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	71fb      	strb	r3, [r7, #7]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8004ecc:	2375      	movs	r3, #117	; 0x75
 8004ece:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8004ed4:	79fb      	ldrb	r3, [r7, #7]
 8004ed6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 8004ee6:	7efb      	ldrb	r3, [r7, #27]
 8004ee8:	b299      	uxth	r1, r3
 8004eea:	2305      	movs	r3, #5
 8004eec:	2202      	movs	r2, #2
 8004eee:	69f8      	ldr	r0, [r7, #28]
 8004ef0:	f7fd fa1e 	bl	8002330 <HAL_I2C_IsDeviceReady>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e050      	b.n	8004fa0 <SD_MPU6050_Init+0xea>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8004efe:	7efb      	ldrb	r3, [r7, #27]
 8004f00:	b299      	uxth	r1, r3
 8004f02:	f107 021a 	add.w	r2, r7, #26
 8004f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	69f8      	ldr	r0, [r7, #28]
 8004f10:	f7fc fee2 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e040      	b.n	8004fa0 <SD_MPU6050_Init+0xea>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 8004f1e:	7efb      	ldrb	r3, [r7, #27]
 8004f20:	b299      	uxth	r1, r3
 8004f22:	f107 0219 	add.w	r2, r7, #25
 8004f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	69f8      	ldr	r0, [r7, #28]
 8004f30:	f7fc ffd0 	bl	8001ed4 <HAL_I2C_Master_Receive>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d007      	beq.n	8004f4a <SD_MPU6050_Init+0x94>
		{
			return SD_MPU6050_Result_Error;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e030      	b.n	8004fa0 <SD_MPU6050_Init+0xea>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				debugPrintInt(temp);
 8004f3e:	7e7b      	ldrb	r3, [r7, #25]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff fbd7 	bl	80046f4 <debugPrintInt>
				return SD_MPU6050_Result_DeviceInvalid;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e02a      	b.n	8004fa0 <SD_MPU6050_Init+0xea>
		while(temp != MPU6050_I_AM)
 8004f4a:	bf00      	nop
 8004f4c:	7e7b      	ldrb	r3, [r7, #25]
 8004f4e:	2b70      	cmp	r3, #112	; 0x70
 8004f50:	d1f5      	bne.n	8004f3e <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 8004f52:	236b      	movs	r3, #107	; 0x6b
 8004f54:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 8004f56:	2300      	movs	r3, #0
 8004f58:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8004f5a:	7efb      	ldrb	r3, [r7, #27]
 8004f5c:	b299      	uxth	r1, r3
 8004f5e:	f107 0214 	add.w	r2, r7, #20
 8004f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	2302      	movs	r3, #2
 8004f6a:	69f8      	ldr	r0, [r7, #28]
 8004f6c:	f7fc feb4 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <SD_MPU6050_Init+0xc4>
		{
					return SD_MPU6050_Result_Error;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e012      	b.n	8004fa0 <SD_MPU6050_Init+0xea>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8004f7a:	2207      	movs	r2, #7
 8004f7c:	68b9      	ldr	r1, [r7, #8]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f000 f812 	bl	8004fa8 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8004f84:	79bb      	ldrb	r3, [r7, #6]
 8004f86:	461a      	mov	r2, r3
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f830 	bl	8004ff0 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8004f90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004f94:	461a      	mov	r2, r3
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f000 f899 	bl	80050d0 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b088      	sub	sp, #32
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8004fc0:	2319      	movs	r3, #25
 8004fc2:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8004fc4:	79fb      	ldrb	r3, [r7, #7]
 8004fc6:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8004fc8:	bf00      	nop
 8004fca:	7cfb      	ldrb	r3, [r7, #19]
 8004fcc:	b299      	uxth	r1, r3
 8004fce:	f107 0210 	add.w	r2, r7, #16
 8004fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2302      	movs	r3, #2
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7fc fe7c 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1f1      	bne.n	8004fca <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3718      	adds	r7, #24
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8005008:	231c      	movs	r3, #28
 800500a:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 800500c:	bf00      	nop
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	b299      	uxth	r1, r3
 8005012:	f107 0211 	add.w	r2, r7, #17
 8005016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2301      	movs	r3, #1
 800501e:	6978      	ldr	r0, [r7, #20]
 8005020:	f7fc fe5a 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1f1      	bne.n	800500e <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800502a:	bf00      	nop
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	b299      	uxth	r1, r3
 8005030:	f107 0212 	add.w	r2, r7, #18
 8005034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2301      	movs	r3, #1
 800503c:	6978      	ldr	r0, [r7, #20]
 800503e:	f7fc ff49 	bl	8001ed4 <HAL_I2C_Master_Receive>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f1      	bne.n	800502c <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8005048:	7cbb      	ldrb	r3, [r7, #18]
 800504a:	b25b      	sxtb	r3, r3
 800504c:	f023 0318 	bic.w	r3, r3, #24
 8005050:	b25a      	sxtb	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	b25b      	sxtb	r3, r3
 8005058:	4313      	orrs	r3, r2
 800505a:	b25b      	sxtb	r3, r3
 800505c:	b2db      	uxtb	r3, r3
 800505e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005060:	bf00      	nop
 8005062:	7cfb      	ldrb	r3, [r7, #19]
 8005064:	b299      	uxth	r1, r3
 8005066:	f107 0212 	add.w	r2, r7, #18
 800506a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	2301      	movs	r3, #1
 8005072:	6978      	ldr	r0, [r7, #20]
 8005074:	f7fc fe30 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1f1      	bne.n	8005062 <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d81f      	bhi.n	80050c4 <SD_MPU6050_SetAccelerometer+0xd4>
 8005084:	a201      	add	r2, pc, #4	; (adr r2, 800508c <SD_MPU6050_SetAccelerometer+0x9c>)
 8005086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508a:	bf00      	nop
 800508c:	0800509d 	.word	0x0800509d
 8005090:	080050a7 	.word	0x080050a7
 8005094:	080050b1 	.word	0x080050b1
 8005098:	080050bb 	.word	0x080050bb
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80050a2:	609a      	str	r2, [r3, #8]
			break;
 80050a4:	e00f      	b.n	80050c6 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80050ac:	609a      	str	r2, [r3, #8]
			break;
 80050ae:	e00a      	b.n	80050c6 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80050b6:	609a      	str	r2, [r3, #8]
			break;
 80050b8:	e005      	b.n	80050c6 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80050c0:	609a      	str	r2, [r3, #8]
			break;
 80050c2:	e000      	b.n	80050c6 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 80050c4:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	4613      	mov	r3, r2
 80050dc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80050e8:	231b      	movs	r3, #27
 80050ea:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80050ec:	bf00      	nop
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	b299      	uxth	r1, r3
 80050f2:	f107 0211 	add.w	r2, r7, #17
 80050f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2301      	movs	r3, #1
 80050fe:	6978      	ldr	r0, [r7, #20]
 8005100:	f7fc fdea 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1f1      	bne.n	80050ee <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800510a:	bf00      	nop
 800510c:	7cfb      	ldrb	r3, [r7, #19]
 800510e:	b299      	uxth	r1, r3
 8005110:	f107 0212 	add.w	r2, r7, #18
 8005114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	2301      	movs	r3, #1
 800511c:	6978      	ldr	r0, [r7, #20]
 800511e:	f7fc fed9 	bl	8001ed4 <HAL_I2C_Master_Receive>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1f1      	bne.n	800510c <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8005128:	7cbb      	ldrb	r3, [r7, #18]
 800512a:	b25b      	sxtb	r3, r3
 800512c:	f023 0318 	bic.w	r3, r3, #24
 8005130:	b25a      	sxtb	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	b25b      	sxtb	r3, r3
 8005138:	4313      	orrs	r3, r2
 800513a:	b25b      	sxtb	r3, r3
 800513c:	b2db      	uxtb	r3, r3
 800513e:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8005140:	bf00      	nop
 8005142:	7cfb      	ldrb	r3, [r7, #19]
 8005144:	b299      	uxth	r1, r3
 8005146:	f107 0212 	add.w	r2, r7, #18
 800514a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	2301      	movs	r3, #1
 8005152:	6978      	ldr	r0, [r7, #20]
 8005154:	f7fc fdc0 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1f1      	bne.n	8005142 <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d81b      	bhi.n	800519c <SD_MPU6050_SetGyroscope+0xcc>
 8005164:	a201      	add	r2, pc, #4	; (adr r2, 800516c <SD_MPU6050_SetGyroscope+0x9c>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	0800517d 	.word	0x0800517d
 8005170:	08005185 	.word	0x08005185
 8005174:	0800518d 	.word	0x0800518d
 8005178:	08005195 	.word	0x08005195
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	4a0a      	ldr	r2, [pc, #40]	; (80051a8 <SD_MPU6050_SetGyroscope+0xd8>)
 8005180:	605a      	str	r2, [r3, #4]
				break;
 8005182:	e00c      	b.n	800519e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	4a09      	ldr	r2, [pc, #36]	; (80051ac <SD_MPU6050_SetGyroscope+0xdc>)
 8005188:	605a      	str	r2, [r3, #4]
				break;
 800518a:	e008      	b.n	800519e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <SD_MPU6050_SetGyroscope+0xe0>)
 8005190:	605a      	str	r2, [r3, #4]
				break;
 8005192:	e004      	b.n	800519e <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	4a07      	ldr	r2, [pc, #28]	; (80051b4 <SD_MPU6050_SetGyroscope+0xe4>)
 8005198:	605a      	str	r2, [r3, #4]
				break;
 800519a:	e000      	b.n	800519e <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 800519c:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	3bfa232d 	.word	0x3bfa232d
 80051ac:	3c7a232d 	.word	0x3c7a232d
 80051b0:	3cf9c190 	.word	0x3cf9c190
 80051b4:	3d79c190 	.word	0x3d79c190

080051b8 <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af02      	add	r7, sp, #8
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 80051c2:	233b      	movs	r3, #59	; 0x3b
 80051c4:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	74fb      	strb	r3, [r7, #19]

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80051d0:	bf00      	nop
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	b299      	uxth	r1, r3
 80051d6:	f107 020b 	add.w	r2, r7, #11
 80051da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051de:	9300      	str	r3, [sp, #0]
 80051e0:	2301      	movs	r3, #1
 80051e2:	6978      	ldr	r0, [r7, #20]
 80051e4:	f7fc fd78 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f1      	bne.n	80051d2 <SD_MPU6050_ReadAccelerometer+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80051ee:	bf00      	nop
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	b299      	uxth	r1, r3
 80051f4:	f107 020c 	add.w	r2, r7, #12
 80051f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	2306      	movs	r3, #6
 8005200:	6978      	ldr	r0, [r7, #20]
 8005202:	f7fc fe67 	bl	8001ed4 <HAL_I2C_Master_Receive>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <SD_MPU6050_ReadAccelerometer+0x38>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 800520c:	7b3b      	ldrb	r3, [r7, #12]
 800520e:	021b      	lsls	r3, r3, #8
 8005210:	b21a      	sxth	r2, r3
 8005212:	7b7b      	ldrb	r3, [r7, #13]
 8005214:	b21b      	sxth	r3, r3
 8005216:	4313      	orrs	r3, r2
 8005218:	b21a      	sxth	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	b21a      	sxth	r2, r3
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	b21b      	sxth	r3, r3
 8005228:	4313      	orrs	r3, r2
 800522a:	b21a      	sxth	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8005230:	7c3b      	ldrb	r3, [r7, #16]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	b21a      	sxth	r2, r3
 8005236:	7c7b      	ldrb	r3, [r7, #17]
 8005238:	b21b      	sxth	r3, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	b21a      	sxth	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	821a      	strh	r2, [r3, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3718      	adds	r7, #24
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b088      	sub	sp, #32
 8005250:	af02      	add	r7, sp, #8
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 8005256:	2343      	movs	r3, #67	; 0x43
 8005258:	72fb      	strb	r3, [r7, #11]
	I2C_HandleTypeDef* Handle = I2Cx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	74fb      	strb	r3, [r7, #19]

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8005264:	bf00      	nop
 8005266:	7cfb      	ldrb	r3, [r7, #19]
 8005268:	b299      	uxth	r1, r3
 800526a:	f107 020b 	add.w	r2, r7, #11
 800526e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	2301      	movs	r3, #1
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7fc fd2e 	bl	8001cd8 <HAL_I2C_Master_Transmit>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f1      	bne.n	8005266 <SD_MPU6050_ReadGyroscope+0x1a>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 8005282:	bf00      	nop
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	b299      	uxth	r1, r3
 8005288:	f107 020c 	add.w	r2, r7, #12
 800528c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	2306      	movs	r3, #6
 8005294:	6978      	ldr	r0, [r7, #20]
 8005296:	f7fc fe1d 	bl	8001ed4 <HAL_I2C_Master_Receive>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1f1      	bne.n	8005284 <SD_MPU6050_ReadGyroscope+0x38>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 80052a0:	7b3b      	ldrb	r3, [r7, #12]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	b21a      	sxth	r2, r3
 80052a6:	7b7b      	ldrb	r3, [r7, #13]
 80052a8:	b21b      	sxth	r3, r3
 80052aa:	4313      	orrs	r3, r2
 80052ac:	b21a      	sxth	r2, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 80052b2:	7bbb      	ldrb	r3, [r7, #14]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	b21a      	sxth	r2, r3
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	b21b      	sxth	r3, r3
 80052bc:	4313      	orrs	r3, r2
 80052be:	b21a      	sxth	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 80052c4:	7c3b      	ldrb	r3, [r7, #16]
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	b21a      	sxth	r2, r3
 80052ca:	7c7b      	ldrb	r3, [r7, #17]
 80052cc:	b21b      	sxth	r3, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	b21a      	sxth	r2, r3
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80052e6:	4b15      	ldr	r3, [pc, #84]	; (800533c <HAL_MspInit+0x5c>)
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	4a14      	ldr	r2, [pc, #80]	; (800533c <HAL_MspInit+0x5c>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	6193      	str	r3, [r2, #24]
 80052f2:	4b12      	ldr	r3, [pc, #72]	; (800533c <HAL_MspInit+0x5c>)
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <HAL_MspInit+0x5c>)
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	4a0e      	ldr	r2, [pc, #56]	; (800533c <HAL_MspInit+0x5c>)
 8005304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005308:	61d3      	str	r3, [r2, #28]
 800530a:	4b0c      	ldr	r3, [pc, #48]	; (800533c <HAL_MspInit+0x5c>)
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005312:	607b      	str	r3, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005316:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_MspInit+0x60>)
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	4a04      	ldr	r2, [pc, #16]	; (8005340 <HAL_MspInit+0x60>)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	40021000 	.word	0x40021000
 8005340:	40010000 	.word	0x40010000

08005344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	f107 0310 	add.w	r3, r7, #16
 8005350:	2200      	movs	r2, #0
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	609a      	str	r2, [r3, #8]
 8005358:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a16      	ldr	r2, [pc, #88]	; (80053b8 <HAL_I2C_MspInit+0x74>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d124      	bne.n	80053ae <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_I2C_MspInit+0x78>)
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	4a14      	ldr	r2, [pc, #80]	; (80053bc <HAL_I2C_MspInit+0x78>)
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	6193      	str	r3, [r2, #24]
 8005370:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_I2C_MspInit+0x78>)
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800537c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005380:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005382:	2312      	movs	r3, #18
 8005384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005386:	2303      	movs	r3, #3
 8005388:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538a:	f107 0310 	add.w	r3, r7, #16
 800538e:	4619      	mov	r1, r3
 8005390:	480b      	ldr	r0, [pc, #44]	; (80053c0 <HAL_I2C_MspInit+0x7c>)
 8005392:	f7fc f9ef 	bl	8001774 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005396:	4b09      	ldr	r3, [pc, #36]	; (80053bc <HAL_I2C_MspInit+0x78>)
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_I2C_MspInit+0x78>)
 800539c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053a0:	61d3      	str	r3, [r2, #28]
 80053a2:	4b06      	ldr	r3, [pc, #24]	; (80053bc <HAL_I2C_MspInit+0x78>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053aa:	60bb      	str	r3, [r7, #8]
 80053ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80053ae:	bf00      	nop
 80053b0:	3720      	adds	r7, #32
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40005800 	.word	0x40005800
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40010c00 	.word	0x40010c00

080053c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a09      	ldr	r2, [pc, #36]	; (80053f8 <HAL_TIM_PWM_MspInit+0x34>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d10b      	bne.n	80053ee <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_TIM_PWM_MspInit+0x38>)
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	4a08      	ldr	r2, [pc, #32]	; (80053fc <HAL_TIM_PWM_MspInit+0x38>)
 80053dc:	f043 0304 	orr.w	r3, r3, #4
 80053e0:	61d3      	str	r3, [r2, #28]
 80053e2:	4b06      	ldr	r3, [pc, #24]	; (80053fc <HAL_TIM_PWM_MspInit+0x38>)
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0304 	and.w	r3, r3, #4
 80053ea:	60fb      	str	r3, [r7, #12]
 80053ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80053ee:	bf00      	nop
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bc80      	pop	{r7}
 80053f6:	4770      	bx	lr
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40021000 	.word	0x40021000

08005400 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b088      	sub	sp, #32
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005408:	f107 0310 	add.w	r3, r7, #16
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	609a      	str	r2, [r3, #8]
 8005414:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a10      	ldr	r2, [pc, #64]	; (800545c <HAL_TIM_MspPostInit+0x5c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d118      	bne.n	8005452 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <HAL_TIM_MspPostInit+0x60>)
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	4a0e      	ldr	r2, [pc, #56]	; (8005460 <HAL_TIM_MspPostInit+0x60>)
 8005426:	f043 0308 	orr.w	r3, r3, #8
 800542a:	6193      	str	r3, [r2, #24]
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <HAL_TIM_MspPostInit+0x60>)
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	f003 0308 	and.w	r3, r3, #8
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005438:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800543c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543e:	2302      	movs	r3, #2
 8005440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005442:	2302      	movs	r3, #2
 8005444:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005446:	f107 0310 	add.w	r3, r7, #16
 800544a:	4619      	mov	r1, r3
 800544c:	4805      	ldr	r0, [pc, #20]	; (8005464 <HAL_TIM_MspPostInit+0x64>)
 800544e:	f7fc f991 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005452:	bf00      	nop
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40000800 	.word	0x40000800
 8005460:	40021000 	.word	0x40021000
 8005464:	40010c00 	.word	0x40010c00

08005468 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005470:	f107 0310 	add.w	r3, r7, #16
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	605a      	str	r2, [r3, #4]
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a47      	ldr	r2, [pc, #284]	; (80055a0 <HAL_UART_MspInit+0x138>)
 8005484:	4293      	cmp	r3, r2
 8005486:	f040 8086 	bne.w	8005596 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800548a:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4a45      	ldr	r2, [pc, #276]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 8005490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005494:	6193      	str	r3, [r2, #24]
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054a2:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	4a3f      	ldr	r2, [pc, #252]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 80054a8:	f043 0304 	orr.w	r3, r3, #4
 80054ac:	6193      	str	r3, [r2, #24]
 80054ae:	4b3d      	ldr	r3, [pc, #244]	; (80055a4 <HAL_UART_MspInit+0x13c>)
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	60bb      	str	r3, [r7, #8]
 80054b8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c0:	2302      	movs	r3, #2
 80054c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80054c4:	2303      	movs	r3, #3
 80054c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c8:	f107 0310 	add.w	r3, r7, #16
 80054cc:	4619      	mov	r1, r3
 80054ce:	4836      	ldr	r0, [pc, #216]	; (80055a8 <HAL_UART_MspInit+0x140>)
 80054d0:	f7fc f950 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054e2:	f107 0310 	add.w	r3, r7, #16
 80054e6:	4619      	mov	r1, r3
 80054e8:	482f      	ldr	r0, [pc, #188]	; (80055a8 <HAL_UART_MspInit+0x140>)
 80054ea:	f7fc f943 	bl	8001774 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80054ee:	4b2f      	ldr	r3, [pc, #188]	; (80055ac <HAL_UART_MspInit+0x144>)
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <HAL_UART_MspInit+0x148>)
 80054f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054f4:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <HAL_UART_MspInit+0x144>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054fa:	4b2c      	ldr	r3, [pc, #176]	; (80055ac <HAL_UART_MspInit+0x144>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005500:	4b2a      	ldr	r3, [pc, #168]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005506:	4b29      	ldr	r3, [pc, #164]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005508:	2200      	movs	r2, #0
 800550a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800550c:	4b27      	ldr	r3, [pc, #156]	; (80055ac <HAL_UART_MspInit+0x144>)
 800550e:	2200      	movs	r2, #0
 8005510:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005512:	4b26      	ldr	r3, [pc, #152]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005514:	2200      	movs	r2, #0
 8005516:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005518:	4b24      	ldr	r3, [pc, #144]	; (80055ac <HAL_UART_MspInit+0x144>)
 800551a:	2200      	movs	r2, #0
 800551c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800551e:	4823      	ldr	r0, [pc, #140]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005520:	f7fb ff52 	bl	80013c8 <HAL_DMA_Init>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800552a:	f7ff fbab 	bl	8004c84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005532:	635a      	str	r2, [r3, #52]	; 0x34
 8005534:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <HAL_UART_MspInit+0x144>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 800553c:	4a1e      	ldr	r2, [pc, #120]	; (80055b8 <HAL_UART_MspInit+0x150>)
 800553e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005540:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005542:	2210      	movs	r2, #16
 8005544:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005548:	2200      	movs	r2, #0
 800554a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800554c:	4b19      	ldr	r3, [pc, #100]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005552:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005554:	2200      	movs	r2, #0
 8005556:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005558:	4b16      	ldr	r3, [pc, #88]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 800555a:	2200      	movs	r2, #0
 800555c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800555e:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005560:	2200      	movs	r2, #0
 8005562:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005564:	4b13      	ldr	r3, [pc, #76]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005566:	2200      	movs	r2, #0
 8005568:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800556a:	4812      	ldr	r0, [pc, #72]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 800556c:	f7fb ff2c 	bl	80013c8 <HAL_DMA_Init>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8005576:	f7ff fb85 	bl	8004c84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a0d      	ldr	r2, [pc, #52]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 800557e:	631a      	str	r2, [r3, #48]	; 0x30
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <HAL_UART_MspInit+0x14c>)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8005586:	2200      	movs	r2, #0
 8005588:	2100      	movs	r1, #0
 800558a:	2025      	movs	r0, #37	; 0x25
 800558c:	f7fb fee5 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005590:	2025      	movs	r0, #37	; 0x25
 8005592:	f7fb fefe 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005596:	bf00      	nop
 8005598:	3720      	adds	r7, #32
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40013800 	.word	0x40013800
 80055a4:	40021000 	.word	0x40021000
 80055a8:	40010800 	.word	0x40010800
 80055ac:	200013c0 	.word	0x200013c0
 80055b0:	40020058 	.word	0x40020058
 80055b4:	2000137c 	.word	0x2000137c
 80055b8:	40020044 	.word	0x40020044

080055bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80055c0:	bf00      	nop
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bc80      	pop	{r7}
 80055c6:	4770      	bx	lr

080055c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	// System failed!
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2110      	movs	r1, #16
 80055d0:	4801      	ldr	r0, [pc, #4]	; (80055d8 <HardFault_Handler+0x10>)
 80055d2:	f7fc fa29 	bl	8001a28 <HAL_GPIO_WritePin>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80055d6:	e7fe      	b.n	80055d6 <HardFault_Handler+0xe>
 80055d8:	40010c00 	.word	0x40010c00

080055dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80055dc:	b480      	push	{r7}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */


  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80055e0:	e7fe      	b.n	80055e0 <MemManage_Handler+0x4>

080055e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80055e2:	b480      	push	{r7}
 80055e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80055e6:	e7fe      	b.n	80055e6 <BusFault_Handler+0x4>

080055e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80055ec:	e7fe      	b.n	80055ec <UsageFault_Handler+0x4>

080055ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80055ee:	b480      	push	{r7}
 80055f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80055f2:	bf00      	nop
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80055fa:	b480      	push	{r7}
 80055fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80055fe:	bf00      	nop
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005616:	f7fb fd8b 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800561a:	bf00      	nop
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005624:	4802      	ldr	r0, [pc, #8]	; (8005630 <DMA1_Channel4_IRQHandler+0x10>)
 8005626:	f7fb ff9f 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800562a:	bf00      	nop
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2000137c 	.word	0x2000137c

08005634 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005638:	4802      	ldr	r0, [pc, #8]	; (8005644 <DMA1_Channel5_IRQHandler+0x10>)
 800563a:	f7fb ff95 	bl	8001568 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	200013c0 	.word	0x200013c0

08005648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800564c:	4802      	ldr	r0, [pc, #8]	; (8005658 <USART1_IRQHandler+0x10>)
 800564e:	f7fe fb13 	bl	8003c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	2000129c 	.word	0x2000129c

0800565c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005664:	4b11      	ldr	r3, [pc, #68]	; (80056ac <_sbrk+0x50>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d102      	bne.n	8005672 <_sbrk+0x16>
		heap_end = &end;
 800566c:	4b0f      	ldr	r3, [pc, #60]	; (80056ac <_sbrk+0x50>)
 800566e:	4a10      	ldr	r2, [pc, #64]	; (80056b0 <_sbrk+0x54>)
 8005670:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005672:	4b0e      	ldr	r3, [pc, #56]	; (80056ac <_sbrk+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005678:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <_sbrk+0x50>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4413      	add	r3, r2
 8005680:	466a      	mov	r2, sp
 8005682:	4293      	cmp	r3, r2
 8005684:	d907      	bls.n	8005696 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005686:	f000 f893 	bl	80057b0 <__errno>
 800568a:	4602      	mov	r2, r0
 800568c:	230c      	movs	r3, #12
 800568e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005694:	e006      	b.n	80056a4 <_sbrk+0x48>
	}

	heap_end += incr;
 8005696:	4b05      	ldr	r3, [pc, #20]	; (80056ac <_sbrk+0x50>)
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4413      	add	r3, r2
 800569e:	4a03      	ldr	r2, [pc, #12]	; (80056ac <_sbrk+0x50>)
 80056a0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80056a2:	68fb      	ldr	r3, [r7, #12]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	2000128c 	.word	0x2000128c
 80056b0:	20001408 	.word	0x20001408

080056b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80056b8:	4b15      	ldr	r3, [pc, #84]	; (8005710 <SystemInit+0x5c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <SystemInit+0x5c>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80056c4:	4b12      	ldr	r3, [pc, #72]	; (8005710 <SystemInit+0x5c>)
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	4911      	ldr	r1, [pc, #68]	; (8005710 <SystemInit+0x5c>)
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <SystemInit+0x60>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	; (8005710 <SystemInit+0x5c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a0e      	ldr	r2, [pc, #56]	; (8005710 <SystemInit+0x5c>)
 80056d6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80056da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056de:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <SystemInit+0x5c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0a      	ldr	r2, [pc, #40]	; (8005710 <SystemInit+0x5c>)
 80056e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80056ec:	4b08      	ldr	r3, [pc, #32]	; (8005710 <SystemInit+0x5c>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4a07      	ldr	r2, [pc, #28]	; (8005710 <SystemInit+0x5c>)
 80056f2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80056f6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80056f8:	4b05      	ldr	r3, [pc, #20]	; (8005710 <SystemInit+0x5c>)
 80056fa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80056fe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <SystemInit+0x64>)
 8005702:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005706:	609a      	str	r2, [r3, #8]
#endif 
}
 8005708:	bf00      	nop
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr
 8005710:	40021000 	.word	0x40021000
 8005714:	f8ff0000 	.word	0xf8ff0000
 8005718:	e000ed00 	.word	0xe000ed00

0800571c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800571c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800571e:	e003      	b.n	8005728 <LoopCopyDataInit>

08005720 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005720:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005722:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005724:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005726:	3104      	adds	r1, #4

08005728 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005728:	480a      	ldr	r0, [pc, #40]	; (8005754 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800572c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800572e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005730:	d3f6      	bcc.n	8005720 <CopyDataInit>
  ldr r2, =_sbss
 8005732:	4a0a      	ldr	r2, [pc, #40]	; (800575c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005734:	e002      	b.n	800573c <LoopFillZerobss>

08005736 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005736:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005738:	f842 3b04 	str.w	r3, [r2], #4

0800573c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800573c:	4b08      	ldr	r3, [pc, #32]	; (8005760 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800573e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005740:	d3f9      	bcc.n	8005736 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005742:	f7ff ffb7 	bl	80056b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005746:	f000 f839 	bl	80057bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800574a:	f7fe ffff 	bl	800474c <main>
  bx lr
 800574e:	4770      	bx	lr
  ldr r3, =_sidata
 8005750:	080075c0 	.word	0x080075c0
  ldr r0, =_sdata
 8005754:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005758:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800575c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8005760:	20001408 	.word	0x20001408

08005764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005764:	e7fe      	b.n	8005764 <ADC1_2_IRQHandler>
	...

08005768 <gcvt>:
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576a:	461c      	mov	r4, r3
 800576c:	b085      	sub	sp, #20
 800576e:	2300      	movs	r3, #0
 8005770:	4615      	mov	r5, r2
 8005772:	2200      	movs	r2, #0
 8005774:	4606      	mov	r6, r0
 8005776:	460f      	mov	r7, r1
 8005778:	f7fb f920 	bl	80009bc <__aeabi_dcmplt>
 800577c:	4623      	mov	r3, r4
 800577e:	b118      	cbz	r0, 8005788 <gcvt+0x20>
 8005780:	222d      	movs	r2, #45	; 0x2d
 8005782:	3d01      	subs	r5, #1
 8005784:	f803 2b01 	strb.w	r2, [r3], #1
 8005788:	2267      	movs	r2, #103	; 0x67
 800578a:	2100      	movs	r1, #0
 800578c:	e9cd 5300 	strd	r5, r3, [sp]
 8005790:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8005794:	4905      	ldr	r1, [pc, #20]	; (80057ac <gcvt+0x44>)
 8005796:	4632      	mov	r2, r6
 8005798:	463b      	mov	r3, r7
 800579a:	6808      	ldr	r0, [r1, #0]
 800579c:	f000 f908 	bl	80059b0 <_gcvt>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	bf14      	ite	ne
 80057a4:	4620      	movne	r0, r4
 80057a6:	2000      	moveq	r0, #0
 80057a8:	b005      	add	sp, #20
 80057aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ac:	2000000c 	.word	0x2000000c

080057b0 <__errno>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	; (80057b8 <__errno+0x8>)
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	2000000c 	.word	0x2000000c

080057bc <__libc_init_array>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	2500      	movs	r5, #0
 80057c0:	4e0c      	ldr	r6, [pc, #48]	; (80057f4 <__libc_init_array+0x38>)
 80057c2:	4c0d      	ldr	r4, [pc, #52]	; (80057f8 <__libc_init_array+0x3c>)
 80057c4:	1ba4      	subs	r4, r4, r6
 80057c6:	10a4      	asrs	r4, r4, #2
 80057c8:	42a5      	cmp	r5, r4
 80057ca:	d109      	bne.n	80057e0 <__libc_init_array+0x24>
 80057cc:	f001 fdfe 	bl	80073cc <_init>
 80057d0:	2500      	movs	r5, #0
 80057d2:	4e0a      	ldr	r6, [pc, #40]	; (80057fc <__libc_init_array+0x40>)
 80057d4:	4c0a      	ldr	r4, [pc, #40]	; (8005800 <__libc_init_array+0x44>)
 80057d6:	1ba4      	subs	r4, r4, r6
 80057d8:	10a4      	asrs	r4, r4, #2
 80057da:	42a5      	cmp	r5, r4
 80057dc:	d105      	bne.n	80057ea <__libc_init_array+0x2e>
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057e4:	4798      	blx	r3
 80057e6:	3501      	adds	r5, #1
 80057e8:	e7ee      	b.n	80057c8 <__libc_init_array+0xc>
 80057ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80057ee:	4798      	blx	r3
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7f2      	b.n	80057da <__libc_init_array+0x1e>
 80057f4:	080075b8 	.word	0x080075b8
 80057f8:	080075b8 	.word	0x080075b8
 80057fc:	080075b8 	.word	0x080075b8
 8005800:	080075bc 	.word	0x080075bc

08005804 <__itoa>:
 8005804:	1e93      	subs	r3, r2, #2
 8005806:	2b22      	cmp	r3, #34	; 0x22
 8005808:	b510      	push	{r4, lr}
 800580a:	460c      	mov	r4, r1
 800580c:	d904      	bls.n	8005818 <__itoa+0x14>
 800580e:	2300      	movs	r3, #0
 8005810:	461c      	mov	r4, r3
 8005812:	700b      	strb	r3, [r1, #0]
 8005814:	4620      	mov	r0, r4
 8005816:	bd10      	pop	{r4, pc}
 8005818:	2a0a      	cmp	r2, #10
 800581a:	d109      	bne.n	8005830 <__itoa+0x2c>
 800581c:	2800      	cmp	r0, #0
 800581e:	da07      	bge.n	8005830 <__itoa+0x2c>
 8005820:	232d      	movs	r3, #45	; 0x2d
 8005822:	700b      	strb	r3, [r1, #0]
 8005824:	2101      	movs	r1, #1
 8005826:	4240      	negs	r0, r0
 8005828:	4421      	add	r1, r4
 800582a:	f000 f80d 	bl	8005848 <__utoa>
 800582e:	e7f1      	b.n	8005814 <__itoa+0x10>
 8005830:	2100      	movs	r1, #0
 8005832:	e7f9      	b.n	8005828 <__itoa+0x24>

08005834 <itoa>:
 8005834:	f7ff bfe6 	b.w	8005804 <__itoa>

08005838 <memset>:
 8005838:	4603      	mov	r3, r0
 800583a:	4402      	add	r2, r0
 800583c:	4293      	cmp	r3, r2
 800583e:	d100      	bne.n	8005842 <memset+0xa>
 8005840:	4770      	bx	lr
 8005842:	f803 1b01 	strb.w	r1, [r3], #1
 8005846:	e7f9      	b.n	800583c <memset+0x4>

08005848 <__utoa>:
 8005848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800584a:	b08b      	sub	sp, #44	; 0x2c
 800584c:	4605      	mov	r5, r0
 800584e:	460c      	mov	r4, r1
 8005850:	466e      	mov	r6, sp
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <__utoa+0x78>)
 8005854:	f103 0c20 	add.w	ip, r3, #32
 8005858:	4637      	mov	r7, r6
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	6859      	ldr	r1, [r3, #4]
 800585e:	3308      	adds	r3, #8
 8005860:	c703      	stmia	r7!, {r0, r1}
 8005862:	4563      	cmp	r3, ip
 8005864:	463e      	mov	r6, r7
 8005866:	d1f7      	bne.n	8005858 <__utoa+0x10>
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	791b      	ldrb	r3, [r3, #4]
 800586c:	6038      	str	r0, [r7, #0]
 800586e:	713b      	strb	r3, [r7, #4]
 8005870:	1e93      	subs	r3, r2, #2
 8005872:	2b22      	cmp	r3, #34	; 0x22
 8005874:	f04f 0300 	mov.w	r3, #0
 8005878:	d904      	bls.n	8005884 <__utoa+0x3c>
 800587a:	7023      	strb	r3, [r4, #0]
 800587c:	461c      	mov	r4, r3
 800587e:	4620      	mov	r0, r4
 8005880:	b00b      	add	sp, #44	; 0x2c
 8005882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005884:	1e66      	subs	r6, r4, #1
 8005886:	fbb5 f0f2 	udiv	r0, r5, r2
 800588a:	fb02 5510 	mls	r5, r2, r0, r5
 800588e:	af0a      	add	r7, sp, #40	; 0x28
 8005890:	443d      	add	r5, r7
 8005892:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8005896:	1c59      	adds	r1, r3, #1
 8005898:	f806 5f01 	strb.w	r5, [r6, #1]!
 800589c:	4605      	mov	r5, r0
 800589e:	b968      	cbnz	r0, 80058bc <__utoa+0x74>
 80058a0:	4622      	mov	r2, r4
 80058a2:	5460      	strb	r0, [r4, r1]
 80058a4:	4423      	add	r3, r4
 80058a6:	1b19      	subs	r1, r3, r4
 80058a8:	1b10      	subs	r0, r2, r4
 80058aa:	4281      	cmp	r1, r0
 80058ac:	dde7      	ble.n	800587e <__utoa+0x36>
 80058ae:	7811      	ldrb	r1, [r2, #0]
 80058b0:	7818      	ldrb	r0, [r3, #0]
 80058b2:	f802 0b01 	strb.w	r0, [r2], #1
 80058b6:	f803 1901 	strb.w	r1, [r3], #-1
 80058ba:	e7f4      	b.n	80058a6 <__utoa+0x5e>
 80058bc:	460b      	mov	r3, r1
 80058be:	e7e2      	b.n	8005886 <__utoa+0x3e>
 80058c0:	0800743c 	.word	0x0800743c

080058c4 <print_e>:
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	b08b      	sub	sp, #44	; 0x2c
 80058c8:	460f      	mov	r7, r1
 80058ca:	a908      	add	r1, sp, #32
 80058cc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80058ce:	9104      	str	r1, [sp, #16]
 80058d0:	a907      	add	r1, sp, #28
 80058d2:	9103      	str	r1, [sp, #12]
 80058d4:	a909      	add	r1, sp, #36	; 0x24
 80058d6:	9102      	str	r1, [sp, #8]
 80058d8:	1c61      	adds	r1, r4, #1
 80058da:	9101      	str	r1, [sp, #4]
 80058dc:	2102      	movs	r1, #2
 80058de:	9100      	str	r1, [sp, #0]
 80058e0:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 80058e4:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80058e6:	f000 fd37 	bl	8006358 <_dtoa_r>
 80058ea:	f242 730f 	movw	r3, #9999	; 0x270f
 80058ee:	4601      	mov	r1, r0
 80058f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058f2:	4298      	cmp	r0, r3
 80058f4:	d104      	bne.n	8005900 <print_e+0x3c>
 80058f6:	4638      	mov	r0, r7
 80058f8:	f000 fc98 	bl	800622c <strcpy>
 80058fc:	b00b      	add	sp, #44	; 0x2c
 80058fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005900:	780b      	ldrb	r3, [r1, #0]
 8005902:	703b      	strb	r3, [r7, #0]
 8005904:	2d00      	cmp	r5, #0
 8005906:	d142      	bne.n	800598e <print_e+0xca>
 8005908:	2c00      	cmp	r4, #0
 800590a:	d140      	bne.n	800598e <print_e+0xca>
 800590c:	1c7b      	adds	r3, r7, #1
 800590e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005912:	b10a      	cbz	r2, 8005918 <print_e+0x54>
 8005914:	2c00      	cmp	r4, #0
 8005916:	dc3e      	bgt.n	8005996 <print_e+0xd2>
 8005918:	2e67      	cmp	r6, #103	; 0x67
 800591a:	d043      	beq.n	80059a4 <print_e+0xe0>
 800591c:	2e47      	cmp	r6, #71	; 0x47
 800591e:	d043      	beq.n	80059a8 <print_e+0xe4>
 8005920:	461a      	mov	r2, r3
 8005922:	2730      	movs	r7, #48	; 0x30
 8005924:	191d      	adds	r5, r3, r4
 8005926:	1aa9      	subs	r1, r5, r2
 8005928:	2900      	cmp	r1, #0
 800592a:	dc38      	bgt.n	800599e <print_e+0xda>
 800592c:	2c00      	cmp	r4, #0
 800592e:	bfa8      	it	ge
 8005930:	191b      	addge	r3, r3, r4
 8005932:	1e41      	subs	r1, r0, #1
 8005934:	2900      	cmp	r1, #0
 8005936:	9109      	str	r1, [sp, #36]	; 0x24
 8005938:	461a      	mov	r2, r3
 800593a:	bfb7      	itett	lt
 800593c:	212d      	movlt	r1, #45	; 0x2d
 800593e:	212b      	movge	r1, #43	; 0x2b
 8005940:	f1c0 0001 	rsblt	r0, r0, #1
 8005944:	9009      	strlt	r0, [sp, #36]	; 0x24
 8005946:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005948:	f802 6b02 	strb.w	r6, [r2], #2
 800594c:	bfb4      	ite	lt
 800594e:	7059      	strblt	r1, [r3, #1]
 8005950:	7059      	strbge	r1, [r3, #1]
 8005952:	2863      	cmp	r0, #99	; 0x63
 8005954:	dd0b      	ble.n	800596e <print_e+0xaa>
 8005956:	2164      	movs	r1, #100	; 0x64
 8005958:	fb90 f1f1 	sdiv	r1, r0, r1
 800595c:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8005960:	1cda      	adds	r2, r3, #3
 8005962:	709c      	strb	r4, [r3, #2]
 8005964:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8005968:	fb03 0101 	mla	r1, r3, r1, r0
 800596c:	9109      	str	r1, [sp, #36]	; 0x24
 800596e:	230a      	movs	r3, #10
 8005970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005972:	fb91 f3f3 	sdiv	r3, r1, r3
 8005976:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800597a:	7010      	strb	r0, [r2, #0]
 800597c:	f06f 0009 	mvn.w	r0, #9
 8005980:	fb00 1303 	mla	r3, r0, r3, r1
 8005984:	3330      	adds	r3, #48	; 0x30
 8005986:	7053      	strb	r3, [r2, #1]
 8005988:	2300      	movs	r3, #0
 800598a:	7093      	strb	r3, [r2, #2]
 800598c:	e7b6      	b.n	80058fc <print_e+0x38>
 800598e:	222e      	movs	r2, #46	; 0x2e
 8005990:	1cbb      	adds	r3, r7, #2
 8005992:	707a      	strb	r2, [r7, #1]
 8005994:	e7bb      	b.n	800590e <print_e+0x4a>
 8005996:	f803 2b01 	strb.w	r2, [r3], #1
 800599a:	3c01      	subs	r4, #1
 800599c:	e7b7      	b.n	800590e <print_e+0x4a>
 800599e:	f802 7b01 	strb.w	r7, [r2], #1
 80059a2:	e7c0      	b.n	8005926 <print_e+0x62>
 80059a4:	2665      	movs	r6, #101	; 0x65
 80059a6:	e7c4      	b.n	8005932 <print_e+0x6e>
 80059a8:	2645      	movs	r6, #69	; 0x45
 80059aa:	e7c2      	b.n	8005932 <print_e+0x6e>
 80059ac:	0000      	movs	r0, r0
	...

080059b0 <_gcvt>:
 80059b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80059b4:	4617      	mov	r7, r2
 80059b6:	461d      	mov	r5, r3
 80059b8:	b08b      	sub	sp, #44	; 0x2c
 80059ba:	4681      	mov	r9, r0
 80059bc:	e9dd 6412 	ldrd	r6, r4, [sp, #72]	; 0x48
 80059c0:	2200      	movs	r2, #0
 80059c2:	2300      	movs	r3, #0
 80059c4:	4638      	mov	r0, r7
 80059c6:	4629      	mov	r1, r5
 80059c8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80059cc:	f7fa fff6 	bl	80009bc <__aeabi_dcmplt>
 80059d0:	b108      	cbz	r0, 80059d6 <_gcvt+0x26>
 80059d2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 80059d6:	2200      	movs	r2, #0
 80059d8:	2300      	movs	r3, #0
 80059da:	4638      	mov	r0, r7
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa ffe3 	bl	80009a8 <__aeabi_dcmpeq>
 80059e2:	b138      	cbz	r0, 80059f4 <_gcvt+0x44>
 80059e4:	2330      	movs	r3, #48	; 0x30
 80059e6:	7023      	strb	r3, [r4, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	7063      	strb	r3, [r4, #1]
 80059ec:	4620      	mov	r0, r4
 80059ee:	b00b      	add	sp, #44	; 0x2c
 80059f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80059f4:	a352      	add	r3, pc, #328	; (adr r3, 8005b40 <_gcvt+0x190>)
 80059f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fa:	4638      	mov	r0, r7
 80059fc:	4629      	mov	r1, r5
 80059fe:	f7fa ffe7 	bl	80009d0 <__aeabi_dcmple>
 8005a02:	b168      	cbz	r0, 8005a20 <_gcvt+0x70>
 8005a04:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8005a08:	3e01      	subs	r6, #1
 8005a0a:	9301      	str	r3, [sp, #4]
 8005a0c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005a10:	9600      	str	r6, [sp, #0]
 8005a12:	463a      	mov	r2, r7
 8005a14:	462b      	mov	r3, r5
 8005a16:	4621      	mov	r1, r4
 8005a18:	4648      	mov	r0, r9
 8005a1a:	f7ff ff53 	bl	80058c4 <print_e>
 8005a1e:	e7e5      	b.n	80059ec <_gcvt+0x3c>
 8005a20:	4630      	mov	r0, r6
 8005a22:	f000 fb6f 	bl	8006104 <_mprec_log10>
 8005a26:	463a      	mov	r2, r7
 8005a28:	462b      	mov	r3, r5
 8005a2a:	f7fa ffd1 	bl	80009d0 <__aeabi_dcmple>
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	d1e8      	bne.n	8005a04 <_gcvt+0x54>
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b44      	ldr	r3, [pc, #272]	; (8005b48 <_gcvt+0x198>)
 8005a36:	4629      	mov	r1, r5
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7fa ffbf 	bl	80009bc <__aeabi_dcmplt>
 8005a3e:	a909      	add	r1, sp, #36	; 0x24
 8005a40:	aa08      	add	r2, sp, #32
 8005a42:	ab07      	add	r3, sp, #28
 8005a44:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8005a48:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8005a4c:	b388      	cbz	r0, 8005ab2 <_gcvt+0x102>
 8005a4e:	2303      	movs	r3, #3
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	463a      	mov	r2, r7
 8005a54:	462b      	mov	r3, r5
 8005a56:	4648      	mov	r0, r9
 8005a58:	f000 fc7e 	bl	8006358 <_dtoa_r>
 8005a5c:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a60:	9a07      	ldr	r2, [sp, #28]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d027      	beq.n	8005ab6 <_gcvt+0x106>
 8005a66:	4623      	mov	r3, r4
 8005a68:	4426      	add	r6, r4
 8005a6a:	4607      	mov	r7, r0
 8005a6c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8005a70:	1af2      	subs	r2, r6, r3
 8005a72:	9d07      	ldr	r5, [sp, #28]
 8005a74:	b349      	cbz	r1, 8005aca <_gcvt+0x11a>
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	dc22      	bgt.n	8005ac0 <_gcvt+0x110>
 8005a7a:	f1b8 0f00 	cmp.w	r8, #0
 8005a7e:	d102      	bne.n	8005a86 <_gcvt+0xd6>
 8005a80:	7839      	ldrb	r1, [r7, #0]
 8005a82:	2900      	cmp	r1, #0
 8005a84:	d049      	beq.n	8005b1a <_gcvt+0x16a>
 8005a86:	429c      	cmp	r4, r3
 8005a88:	bf04      	itt	eq
 8005a8a:	2130      	moveq	r1, #48	; 0x30
 8005a8c:	7021      	strbeq	r1, [r4, #0]
 8005a8e:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8005a92:	f04f 0000 	mov.w	r0, #0
 8005a96:	f04f 0630 	mov.w	r6, #48	; 0x30
 8005a9a:	bf08      	it	eq
 8005a9c:	1c63      	addeq	r3, r4, #1
 8005a9e:	7019      	strb	r1, [r3, #0]
 8005aa0:	9907      	ldr	r1, [sp, #28]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	2900      	cmp	r1, #0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	db24      	blt.n	8005af4 <_gcvt+0x144>
 8005aaa:	b100      	cbz	r0, 8005aae <_gcvt+0xfe>
 8005aac:	9107      	str	r1, [sp, #28]
 8005aae:	1e79      	subs	r1, r7, #1
 8005ab0:	e02b      	b.n	8005b0a <_gcvt+0x15a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e7cc      	b.n	8005a50 <_gcvt+0xa0>
 8005ab6:	4601      	mov	r1, r0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fbb7 	bl	800622c <strcpy>
 8005abe:	e795      	b.n	80059ec <_gcvt+0x3c>
 8005ac0:	3d01      	subs	r5, #1
 8005ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac6:	9507      	str	r5, [sp, #28]
 8005ac8:	e7cf      	b.n	8005a6a <_gcvt+0xba>
 8005aca:	1aad      	subs	r5, r5, r2
 8005acc:	2630      	movs	r6, #48	; 0x30
 8005ace:	e005      	b.n	8005adc <_gcvt+0x12c>
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	dd06      	ble.n	8005ae2 <_gcvt+0x132>
 8005ad4:	2101      	movs	r1, #1
 8005ad6:	f803 6b01 	strb.w	r6, [r3], #1
 8005ada:	3a01      	subs	r2, #1
 8005adc:	18a8      	adds	r0, r5, r2
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	dcf6      	bgt.n	8005ad0 <_gcvt+0x120>
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	d0c9      	beq.n	8005a7a <_gcvt+0xca>
 8005ae6:	9007      	str	r0, [sp, #28]
 8005ae8:	e7c7      	b.n	8005a7a <_gcvt+0xca>
 8005aea:	f803 6b01 	strb.w	r6, [r3], #1
 8005aee:	3a01      	subs	r2, #1
 8005af0:	2001      	movs	r0, #1
 8005af2:	e7d7      	b.n	8005aa4 <_gcvt+0xf4>
 8005af4:	2a00      	cmp	r2, #0
 8005af6:	f101 0101 	add.w	r1, r1, #1
 8005afa:	dcf6      	bgt.n	8005aea <_gcvt+0x13a>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	d0d6      	beq.n	8005aae <_gcvt+0xfe>
 8005b00:	9507      	str	r5, [sp, #28]
 8005b02:	e7d4      	b.n	8005aae <_gcvt+0xfe>
 8005b04:	f803 0b01 	strb.w	r0, [r3], #1
 8005b08:	3a01      	subs	r2, #1
 8005b0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005b0e:	b108      	cbz	r0, 8005b14 <_gcvt+0x164>
 8005b10:	2a00      	cmp	r2, #0
 8005b12:	dcf7      	bgt.n	8005b04 <_gcvt+0x154>
 8005b14:	f1b8 0f00 	cmp.w	r8, #0
 8005b18:	d10b      	bne.n	8005b32 <_gcvt+0x182>
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	e765      	b.n	80059ec <_gcvt+0x3c>
 8005b20:	f801 6b01 	strb.w	r6, [r1], #1
 8005b24:	1a68      	subs	r0, r5, r1
 8005b26:	2800      	cmp	r0, #0
 8005b28:	dcfa      	bgt.n	8005b20 <_gcvt+0x170>
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	bfa8      	it	ge
 8005b2e:	189b      	addge	r3, r3, r2
 8005b30:	e7f3      	b.n	8005b1a <_gcvt+0x16a>
 8005b32:	4619      	mov	r1, r3
 8005b34:	189d      	adds	r5, r3, r2
 8005b36:	2630      	movs	r6, #48	; 0x30
 8005b38:	e7f4      	b.n	8005b24 <_gcvt+0x174>
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w
 8005b40:	eb1c432d 	.word	0xeb1c432d
 8005b44:	3f1a36e2 	.word	0x3f1a36e2
 8005b48:	3ff00000 	.word	0x3ff00000

08005b4c <_Balloc>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b50:	4604      	mov	r4, r0
 8005b52:	460e      	mov	r6, r1
 8005b54:	b93d      	cbnz	r5, 8005b66 <_Balloc+0x1a>
 8005b56:	2010      	movs	r0, #16
 8005b58:	f001 f9b2 	bl	8006ec0 <malloc>
 8005b5c:	6260      	str	r0, [r4, #36]	; 0x24
 8005b5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b62:	6005      	str	r5, [r0, #0]
 8005b64:	60c5      	str	r5, [r0, #12]
 8005b66:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b68:	68eb      	ldr	r3, [r5, #12]
 8005b6a:	b183      	cbz	r3, 8005b8e <_Balloc+0x42>
 8005b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b74:	b9b8      	cbnz	r0, 8005ba6 <_Balloc+0x5a>
 8005b76:	2101      	movs	r1, #1
 8005b78:	fa01 f506 	lsl.w	r5, r1, r6
 8005b7c:	1d6a      	adds	r2, r5, #5
 8005b7e:	0092      	lsls	r2, r2, #2
 8005b80:	4620      	mov	r0, r4
 8005b82:	f000 fadb 	bl	800613c <_calloc_r>
 8005b86:	b160      	cbz	r0, 8005ba2 <_Balloc+0x56>
 8005b88:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b8c:	e00e      	b.n	8005bac <_Balloc+0x60>
 8005b8e:	2221      	movs	r2, #33	; 0x21
 8005b90:	2104      	movs	r1, #4
 8005b92:	4620      	mov	r0, r4
 8005b94:	f000 fad2 	bl	800613c <_calloc_r>
 8005b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b9a:	60e8      	str	r0, [r5, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1e4      	bne.n	8005b6c <_Balloc+0x20>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
 8005ba6:	6802      	ldr	r2, [r0, #0]
 8005ba8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005bac:	2300      	movs	r3, #0
 8005bae:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005bb2:	e7f7      	b.n	8005ba4 <_Balloc+0x58>

08005bb4 <_Bfree>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460d      	mov	r5, r1
 8005bbc:	b93c      	cbnz	r4, 8005bce <_Bfree+0x1a>
 8005bbe:	2010      	movs	r0, #16
 8005bc0:	f001 f97e 	bl	8006ec0 <malloc>
 8005bc4:	6270      	str	r0, [r6, #36]	; 0x24
 8005bc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bca:	6004      	str	r4, [r0, #0]
 8005bcc:	60c4      	str	r4, [r0, #12]
 8005bce:	b13d      	cbz	r5, 8005be0 <_Bfree+0x2c>
 8005bd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bd2:	686a      	ldr	r2, [r5, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bda:	6029      	str	r1, [r5, #0]
 8005bdc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005be0:	bd70      	pop	{r4, r5, r6, pc}

08005be2 <__multadd>:
 8005be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005be6:	461f      	mov	r7, r3
 8005be8:	4606      	mov	r6, r0
 8005bea:	460c      	mov	r4, r1
 8005bec:	2300      	movs	r3, #0
 8005bee:	690d      	ldr	r5, [r1, #16]
 8005bf0:	f101 0c14 	add.w	ip, r1, #20
 8005bf4:	f8dc 0000 	ldr.w	r0, [ip]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b281      	uxth	r1, r0
 8005bfc:	fb02 7101 	mla	r1, r2, r1, r7
 8005c00:	0c00      	lsrs	r0, r0, #16
 8005c02:	0c0f      	lsrs	r7, r1, #16
 8005c04:	fb02 7000 	mla	r0, r2, r0, r7
 8005c08:	b289      	uxth	r1, r1
 8005c0a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c0e:	429d      	cmp	r5, r3
 8005c10:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c14:	f84c 1b04 	str.w	r1, [ip], #4
 8005c18:	dcec      	bgt.n	8005bf4 <__multadd+0x12>
 8005c1a:	b1d7      	cbz	r7, 8005c52 <__multadd+0x70>
 8005c1c:	68a3      	ldr	r3, [r4, #8]
 8005c1e:	42ab      	cmp	r3, r5
 8005c20:	dc12      	bgt.n	8005c48 <__multadd+0x66>
 8005c22:	6861      	ldr	r1, [r4, #4]
 8005c24:	4630      	mov	r0, r6
 8005c26:	3101      	adds	r1, #1
 8005c28:	f7ff ff90 	bl	8005b4c <_Balloc>
 8005c2c:	4680      	mov	r8, r0
 8005c2e:	6922      	ldr	r2, [r4, #16]
 8005c30:	f104 010c 	add.w	r1, r4, #12
 8005c34:	3202      	adds	r2, #2
 8005c36:	0092      	lsls	r2, r2, #2
 8005c38:	300c      	adds	r0, #12
 8005c3a:	f001 f949 	bl	8006ed0 <memcpy>
 8005c3e:	4621      	mov	r1, r4
 8005c40:	4630      	mov	r0, r6
 8005c42:	f7ff ffb7 	bl	8005bb4 <_Bfree>
 8005c46:	4644      	mov	r4, r8
 8005c48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c4c:	3501      	adds	r5, #1
 8005c4e:	615f      	str	r7, [r3, #20]
 8005c50:	6125      	str	r5, [r4, #16]
 8005c52:	4620      	mov	r0, r4
 8005c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c58 <__hi0bits>:
 8005c58:	0c02      	lsrs	r2, r0, #16
 8005c5a:	0412      	lsls	r2, r2, #16
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b9b2      	cbnz	r2, 8005c8e <__hi0bits+0x36>
 8005c60:	0403      	lsls	r3, r0, #16
 8005c62:	2010      	movs	r0, #16
 8005c64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c68:	bf04      	itt	eq
 8005c6a:	021b      	lsleq	r3, r3, #8
 8005c6c:	3008      	addeq	r0, #8
 8005c6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c72:	bf04      	itt	eq
 8005c74:	011b      	lsleq	r3, r3, #4
 8005c76:	3004      	addeq	r0, #4
 8005c78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c7c:	bf04      	itt	eq
 8005c7e:	009b      	lsleq	r3, r3, #2
 8005c80:	3002      	addeq	r0, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	db06      	blt.n	8005c94 <__hi0bits+0x3c>
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	d503      	bpl.n	8005c92 <__hi0bits+0x3a>
 8005c8a:	3001      	adds	r0, #1
 8005c8c:	4770      	bx	lr
 8005c8e:	2000      	movs	r0, #0
 8005c90:	e7e8      	b.n	8005c64 <__hi0bits+0xc>
 8005c92:	2020      	movs	r0, #32
 8005c94:	4770      	bx	lr

08005c96 <__lo0bits>:
 8005c96:	6803      	ldr	r3, [r0, #0]
 8005c98:	4601      	mov	r1, r0
 8005c9a:	f013 0207 	ands.w	r2, r3, #7
 8005c9e:	d00b      	beq.n	8005cb8 <__lo0bits+0x22>
 8005ca0:	07da      	lsls	r2, r3, #31
 8005ca2:	d423      	bmi.n	8005cec <__lo0bits+0x56>
 8005ca4:	0798      	lsls	r0, r3, #30
 8005ca6:	bf49      	itett	mi
 8005ca8:	085b      	lsrmi	r3, r3, #1
 8005caa:	089b      	lsrpl	r3, r3, #2
 8005cac:	2001      	movmi	r0, #1
 8005cae:	600b      	strmi	r3, [r1, #0]
 8005cb0:	bf5c      	itt	pl
 8005cb2:	600b      	strpl	r3, [r1, #0]
 8005cb4:	2002      	movpl	r0, #2
 8005cb6:	4770      	bx	lr
 8005cb8:	b298      	uxth	r0, r3
 8005cba:	b9a8      	cbnz	r0, 8005ce8 <__lo0bits+0x52>
 8005cbc:	2010      	movs	r0, #16
 8005cbe:	0c1b      	lsrs	r3, r3, #16
 8005cc0:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005cc4:	bf04      	itt	eq
 8005cc6:	0a1b      	lsreq	r3, r3, #8
 8005cc8:	3008      	addeq	r0, #8
 8005cca:	071a      	lsls	r2, r3, #28
 8005ccc:	bf04      	itt	eq
 8005cce:	091b      	lsreq	r3, r3, #4
 8005cd0:	3004      	addeq	r0, #4
 8005cd2:	079a      	lsls	r2, r3, #30
 8005cd4:	bf04      	itt	eq
 8005cd6:	089b      	lsreq	r3, r3, #2
 8005cd8:	3002      	addeq	r0, #2
 8005cda:	07da      	lsls	r2, r3, #31
 8005cdc:	d402      	bmi.n	8005ce4 <__lo0bits+0x4e>
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	d006      	beq.n	8005cf0 <__lo0bits+0x5a>
 8005ce2:	3001      	adds	r0, #1
 8005ce4:	600b      	str	r3, [r1, #0]
 8005ce6:	4770      	bx	lr
 8005ce8:	4610      	mov	r0, r2
 8005cea:	e7e9      	b.n	8005cc0 <__lo0bits+0x2a>
 8005cec:	2000      	movs	r0, #0
 8005cee:	4770      	bx	lr
 8005cf0:	2020      	movs	r0, #32
 8005cf2:	4770      	bx	lr

08005cf4 <__i2b>:
 8005cf4:	b510      	push	{r4, lr}
 8005cf6:	460c      	mov	r4, r1
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	f7ff ff27 	bl	8005b4c <_Balloc>
 8005cfe:	2201      	movs	r2, #1
 8005d00:	6144      	str	r4, [r0, #20]
 8005d02:	6102      	str	r2, [r0, #16]
 8005d04:	bd10      	pop	{r4, pc}

08005d06 <__multiply>:
 8005d06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0a:	4614      	mov	r4, r2
 8005d0c:	690a      	ldr	r2, [r1, #16]
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	4688      	mov	r8, r1
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bfbe      	ittt	lt
 8005d16:	460b      	movlt	r3, r1
 8005d18:	46a0      	movlt	r8, r4
 8005d1a:	461c      	movlt	r4, r3
 8005d1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d20:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d24:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d2c:	eb07 0609 	add.w	r6, r7, r9
 8005d30:	42b3      	cmp	r3, r6
 8005d32:	bfb8      	it	lt
 8005d34:	3101      	addlt	r1, #1
 8005d36:	f7ff ff09 	bl	8005b4c <_Balloc>
 8005d3a:	f100 0514 	add.w	r5, r0, #20
 8005d3e:	462b      	mov	r3, r5
 8005d40:	2200      	movs	r2, #0
 8005d42:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005d46:	4573      	cmp	r3, lr
 8005d48:	d316      	bcc.n	8005d78 <__multiply+0x72>
 8005d4a:	f104 0214 	add.w	r2, r4, #20
 8005d4e:	f108 0114 	add.w	r1, r8, #20
 8005d52:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005d56:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	9b00      	ldr	r3, [sp, #0]
 8005d5e:	9201      	str	r2, [sp, #4]
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d80c      	bhi.n	8005d7e <__multiply+0x78>
 8005d64:	2e00      	cmp	r6, #0
 8005d66:	dd03      	ble.n	8005d70 <__multiply+0x6a>
 8005d68:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05d      	beq.n	8005e2c <__multiply+0x126>
 8005d70:	6106      	str	r6, [r0, #16]
 8005d72:	b003      	add	sp, #12
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	f843 2b04 	str.w	r2, [r3], #4
 8005d7c:	e7e3      	b.n	8005d46 <__multiply+0x40>
 8005d7e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005d82:	f1bb 0f00 	cmp.w	fp, #0
 8005d86:	d023      	beq.n	8005dd0 <__multiply+0xca>
 8005d88:	4689      	mov	r9, r1
 8005d8a:	46ac      	mov	ip, r5
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	f859 4b04 	ldr.w	r4, [r9], #4
 8005d94:	f8dc a000 	ldr.w	sl, [ip]
 8005d98:	b2a3      	uxth	r3, r4
 8005d9a:	fa1f fa8a 	uxth.w	sl, sl
 8005d9e:	fb0b a303 	mla	r3, fp, r3, sl
 8005da2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005da6:	f8dc 4000 	ldr.w	r4, [ip]
 8005daa:	4443      	add	r3, r8
 8005dac:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005db0:	fb0b 840a 	mla	r4, fp, sl, r8
 8005db4:	46e2      	mov	sl, ip
 8005db6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005dc0:	454f      	cmp	r7, r9
 8005dc2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005dc6:	f84a 3b04 	str.w	r3, [sl], #4
 8005dca:	d82b      	bhi.n	8005e24 <__multiply+0x11e>
 8005dcc:	f8cc 8004 	str.w	r8, [ip, #4]
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	3204      	adds	r2, #4
 8005dd4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005dd8:	f1ba 0f00 	cmp.w	sl, #0
 8005ddc:	d020      	beq.n	8005e20 <__multiply+0x11a>
 8005dde:	4689      	mov	r9, r1
 8005de0:	46a8      	mov	r8, r5
 8005de2:	f04f 0b00 	mov.w	fp, #0
 8005de6:	682b      	ldr	r3, [r5, #0]
 8005de8:	f8b9 c000 	ldrh.w	ip, [r9]
 8005dec:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	fb0a 440c 	mla	r4, sl, ip, r4
 8005df6:	46c4      	mov	ip, r8
 8005df8:	445c      	add	r4, fp
 8005dfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005dfe:	f84c 3b04 	str.w	r3, [ip], #4
 8005e02:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e06:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e0a:	0c1b      	lsrs	r3, r3, #16
 8005e0c:	fb0a b303 	mla	r3, sl, r3, fp
 8005e10:	454f      	cmp	r7, r9
 8005e12:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e16:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e1a:	d805      	bhi.n	8005e28 <__multiply+0x122>
 8005e1c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e20:	3504      	adds	r5, #4
 8005e22:	e79b      	b.n	8005d5c <__multiply+0x56>
 8005e24:	46d4      	mov	ip, sl
 8005e26:	e7b3      	b.n	8005d90 <__multiply+0x8a>
 8005e28:	46e0      	mov	r8, ip
 8005e2a:	e7dd      	b.n	8005de8 <__multiply+0xe2>
 8005e2c:	3e01      	subs	r6, #1
 8005e2e:	e799      	b.n	8005d64 <__multiply+0x5e>

08005e30 <__pow5mult>:
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	4615      	mov	r5, r2
 8005e36:	f012 0203 	ands.w	r2, r2, #3
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	460f      	mov	r7, r1
 8005e3e:	d007      	beq.n	8005e50 <__pow5mult+0x20>
 8005e40:	4c21      	ldr	r4, [pc, #132]	; (8005ec8 <__pow5mult+0x98>)
 8005e42:	3a01      	subs	r2, #1
 8005e44:	2300      	movs	r3, #0
 8005e46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e4a:	f7ff feca 	bl	8005be2 <__multadd>
 8005e4e:	4607      	mov	r7, r0
 8005e50:	10ad      	asrs	r5, r5, #2
 8005e52:	d035      	beq.n	8005ec0 <__pow5mult+0x90>
 8005e54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e56:	b93c      	cbnz	r4, 8005e68 <__pow5mult+0x38>
 8005e58:	2010      	movs	r0, #16
 8005e5a:	f001 f831 	bl	8006ec0 <malloc>
 8005e5e:	6270      	str	r0, [r6, #36]	; 0x24
 8005e60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e64:	6004      	str	r4, [r0, #0]
 8005e66:	60c4      	str	r4, [r0, #12]
 8005e68:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e70:	b94c      	cbnz	r4, 8005e86 <__pow5mult+0x56>
 8005e72:	f240 2171 	movw	r1, #625	; 0x271
 8005e76:	4630      	mov	r0, r6
 8005e78:	f7ff ff3c 	bl	8005cf4 <__i2b>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4604      	mov	r4, r0
 8005e80:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e84:	6003      	str	r3, [r0, #0]
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	07eb      	lsls	r3, r5, #31
 8005e8c:	d50a      	bpl.n	8005ea4 <__pow5mult+0x74>
 8005e8e:	4639      	mov	r1, r7
 8005e90:	4622      	mov	r2, r4
 8005e92:	4630      	mov	r0, r6
 8005e94:	f7ff ff37 	bl	8005d06 <__multiply>
 8005e98:	4681      	mov	r9, r0
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff fe89 	bl	8005bb4 <_Bfree>
 8005ea2:	464f      	mov	r7, r9
 8005ea4:	106d      	asrs	r5, r5, #1
 8005ea6:	d00b      	beq.n	8005ec0 <__pow5mult+0x90>
 8005ea8:	6820      	ldr	r0, [r4, #0]
 8005eaa:	b938      	cbnz	r0, 8005ebc <__pow5mult+0x8c>
 8005eac:	4622      	mov	r2, r4
 8005eae:	4621      	mov	r1, r4
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7ff ff28 	bl	8005d06 <__multiply>
 8005eb6:	6020      	str	r0, [r4, #0]
 8005eb8:	f8c0 8000 	str.w	r8, [r0]
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	e7e4      	b.n	8005e8a <__pow5mult+0x5a>
 8005ec0:	4638      	mov	r0, r7
 8005ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ec6:	bf00      	nop
 8005ec8:	08007558 	.word	0x08007558

08005ecc <__lshift>:
 8005ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	6923      	ldr	r3, [r4, #16]
 8005ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005edc:	eb0a 0903 	add.w	r9, sl, r3
 8005ee0:	6849      	ldr	r1, [r1, #4]
 8005ee2:	68a3      	ldr	r3, [r4, #8]
 8005ee4:	f109 0501 	add.w	r5, r9, #1
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	db32      	blt.n	8005f52 <__lshift+0x86>
 8005eec:	4638      	mov	r0, r7
 8005eee:	f7ff fe2d 	bl	8005b4c <_Balloc>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4680      	mov	r8, r0
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f100 0114 	add.w	r1, r0, #20
 8005efc:	4553      	cmp	r3, sl
 8005efe:	db2b      	blt.n	8005f58 <__lshift+0x8c>
 8005f00:	6920      	ldr	r0, [r4, #16]
 8005f02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f06:	f104 0314 	add.w	r3, r4, #20
 8005f0a:	f016 021f 	ands.w	r2, r6, #31
 8005f0e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f16:	d025      	beq.n	8005f64 <__lshift+0x98>
 8005f18:	2000      	movs	r0, #0
 8005f1a:	f1c2 0e20 	rsb	lr, r2, #32
 8005f1e:	468a      	mov	sl, r1
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	4096      	lsls	r6, r2
 8005f24:	4330      	orrs	r0, r6
 8005f26:	f84a 0b04 	str.w	r0, [sl], #4
 8005f2a:	f853 0b04 	ldr.w	r0, [r3], #4
 8005f2e:	459c      	cmp	ip, r3
 8005f30:	fa20 f00e 	lsr.w	r0, r0, lr
 8005f34:	d814      	bhi.n	8005f60 <__lshift+0x94>
 8005f36:	6048      	str	r0, [r1, #4]
 8005f38:	b108      	cbz	r0, 8005f3e <__lshift+0x72>
 8005f3a:	f109 0502 	add.w	r5, r9, #2
 8005f3e:	3d01      	subs	r5, #1
 8005f40:	4638      	mov	r0, r7
 8005f42:	f8c8 5010 	str.w	r5, [r8, #16]
 8005f46:	4621      	mov	r1, r4
 8005f48:	f7ff fe34 	bl	8005bb4 <_Bfree>
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f52:	3101      	adds	r1, #1
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	e7c7      	b.n	8005ee8 <__lshift+0x1c>
 8005f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	e7cd      	b.n	8005efc <__lshift+0x30>
 8005f60:	4651      	mov	r1, sl
 8005f62:	e7dc      	b.n	8005f1e <__lshift+0x52>
 8005f64:	3904      	subs	r1, #4
 8005f66:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f6a:	459c      	cmp	ip, r3
 8005f6c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f70:	d8f9      	bhi.n	8005f66 <__lshift+0x9a>
 8005f72:	e7e4      	b.n	8005f3e <__lshift+0x72>

08005f74 <__mcmp>:
 8005f74:	6903      	ldr	r3, [r0, #16]
 8005f76:	690a      	ldr	r2, [r1, #16]
 8005f78:	b530      	push	{r4, r5, lr}
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	d10c      	bne.n	8005f98 <__mcmp+0x24>
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	3014      	adds	r0, #20
 8005f82:	3114      	adds	r1, #20
 8005f84:	1884      	adds	r4, r0, r2
 8005f86:	4411      	add	r1, r2
 8005f88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f90:	4295      	cmp	r5, r2
 8005f92:	d003      	beq.n	8005f9c <__mcmp+0x28>
 8005f94:	d305      	bcc.n	8005fa2 <__mcmp+0x2e>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4618      	mov	r0, r3
 8005f9a:	bd30      	pop	{r4, r5, pc}
 8005f9c:	42a0      	cmp	r0, r4
 8005f9e:	d3f3      	bcc.n	8005f88 <__mcmp+0x14>
 8005fa0:	e7fa      	b.n	8005f98 <__mcmp+0x24>
 8005fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fa6:	e7f7      	b.n	8005f98 <__mcmp+0x24>

08005fa8 <__mdiff>:
 8005fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	460d      	mov	r5, r1
 8005fae:	4607      	mov	r7, r0
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	f7ff ffdd 	bl	8005f74 <__mcmp>
 8005fba:	1e06      	subs	r6, r0, #0
 8005fbc:	d108      	bne.n	8005fd0 <__mdiff+0x28>
 8005fbe:	4631      	mov	r1, r6
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f7ff fdc3 	bl	8005b4c <_Balloc>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	bfa4      	itt	ge
 8005fd2:	4623      	movge	r3, r4
 8005fd4:	462c      	movge	r4, r5
 8005fd6:	4638      	mov	r0, r7
 8005fd8:	6861      	ldr	r1, [r4, #4]
 8005fda:	bfa6      	itte	ge
 8005fdc:	461d      	movge	r5, r3
 8005fde:	2600      	movge	r6, #0
 8005fe0:	2601      	movlt	r6, #1
 8005fe2:	f7ff fdb3 	bl	8005b4c <_Balloc>
 8005fe6:	f04f 0e00 	mov.w	lr, #0
 8005fea:	60c6      	str	r6, [r0, #12]
 8005fec:	692b      	ldr	r3, [r5, #16]
 8005fee:	6926      	ldr	r6, [r4, #16]
 8005ff0:	f104 0214 	add.w	r2, r4, #20
 8005ff4:	f105 0914 	add.w	r9, r5, #20
 8005ff8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ffc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006000:	f100 0114 	add.w	r1, r0, #20
 8006004:	f852 ab04 	ldr.w	sl, [r2], #4
 8006008:	f859 5b04 	ldr.w	r5, [r9], #4
 800600c:	fa1f f38a 	uxth.w	r3, sl
 8006010:	4473      	add	r3, lr
 8006012:	b2ac      	uxth	r4, r5
 8006014:	1b1b      	subs	r3, r3, r4
 8006016:	0c2c      	lsrs	r4, r5, #16
 8006018:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800601c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8006020:	b29b      	uxth	r3, r3
 8006022:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8006026:	45c8      	cmp	r8, r9
 8006028:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800602c:	4694      	mov	ip, r2
 800602e:	f841 4b04 	str.w	r4, [r1], #4
 8006032:	d8e7      	bhi.n	8006004 <__mdiff+0x5c>
 8006034:	45bc      	cmp	ip, r7
 8006036:	d304      	bcc.n	8006042 <__mdiff+0x9a>
 8006038:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800603c:	b183      	cbz	r3, 8006060 <__mdiff+0xb8>
 800603e:	6106      	str	r6, [r0, #16]
 8006040:	e7c4      	b.n	8005fcc <__mdiff+0x24>
 8006042:	f85c 4b04 	ldr.w	r4, [ip], #4
 8006046:	b2a2      	uxth	r2, r4
 8006048:	4472      	add	r2, lr
 800604a:	1413      	asrs	r3, r2, #16
 800604c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006050:	b292      	uxth	r2, r2
 8006052:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006056:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800605a:	f841 2b04 	str.w	r2, [r1], #4
 800605e:	e7e9      	b.n	8006034 <__mdiff+0x8c>
 8006060:	3e01      	subs	r6, #1
 8006062:	e7e9      	b.n	8006038 <__mdiff+0x90>

08006064 <__d2b>:
 8006064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006068:	461c      	mov	r4, r3
 800606a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800606e:	2101      	movs	r1, #1
 8006070:	4690      	mov	r8, r2
 8006072:	f7ff fd6b 	bl	8005b4c <_Balloc>
 8006076:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800607a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800607e:	4607      	mov	r7, r0
 8006080:	bb34      	cbnz	r4, 80060d0 <__d2b+0x6c>
 8006082:	9201      	str	r2, [sp, #4]
 8006084:	f1b8 0200 	subs.w	r2, r8, #0
 8006088:	d027      	beq.n	80060da <__d2b+0x76>
 800608a:	a802      	add	r0, sp, #8
 800608c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8006090:	f7ff fe01 	bl	8005c96 <__lo0bits>
 8006094:	9900      	ldr	r1, [sp, #0]
 8006096:	b1f0      	cbz	r0, 80060d6 <__d2b+0x72>
 8006098:	9a01      	ldr	r2, [sp, #4]
 800609a:	f1c0 0320 	rsb	r3, r0, #32
 800609e:	fa02 f303 	lsl.w	r3, r2, r3
 80060a2:	430b      	orrs	r3, r1
 80060a4:	40c2      	lsrs	r2, r0
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	9201      	str	r2, [sp, #4]
 80060aa:	9b01      	ldr	r3, [sp, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf14      	ite	ne
 80060b0:	2102      	movne	r1, #2
 80060b2:	2101      	moveq	r1, #1
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	6139      	str	r1, [r7, #16]
 80060b8:	b1c4      	cbz	r4, 80060ec <__d2b+0x88>
 80060ba:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80060be:	4404      	add	r4, r0
 80060c0:	6034      	str	r4, [r6, #0]
 80060c2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80060c6:	6028      	str	r0, [r5, #0]
 80060c8:	4638      	mov	r0, r7
 80060ca:	b002      	add	sp, #8
 80060cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060d4:	e7d5      	b.n	8006082 <__d2b+0x1e>
 80060d6:	6179      	str	r1, [r7, #20]
 80060d8:	e7e7      	b.n	80060aa <__d2b+0x46>
 80060da:	a801      	add	r0, sp, #4
 80060dc:	f7ff fddb 	bl	8005c96 <__lo0bits>
 80060e0:	2101      	movs	r1, #1
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	6139      	str	r1, [r7, #16]
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	3020      	adds	r0, #32
 80060ea:	e7e5      	b.n	80060b8 <__d2b+0x54>
 80060ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80060f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80060f4:	6030      	str	r0, [r6, #0]
 80060f6:	6918      	ldr	r0, [r3, #16]
 80060f8:	f7ff fdae 	bl	8005c58 <__hi0bits>
 80060fc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006100:	e7e1      	b.n	80060c6 <__d2b+0x62>
	...

08006104 <_mprec_log10>:
 8006104:	2817      	cmp	r0, #23
 8006106:	b5d0      	push	{r4, r6, r7, lr}
 8006108:	4604      	mov	r4, r0
 800610a:	dc05      	bgt.n	8006118 <_mprec_log10+0x14>
 800610c:	4b08      	ldr	r3, [pc, #32]	; (8006130 <_mprec_log10+0x2c>)
 800610e:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 8006112:	e9d4 0100 	ldrd	r0, r1, [r4]
 8006116:	bdd0      	pop	{r4, r6, r7, pc}
 8006118:	2000      	movs	r0, #0
 800611a:	2600      	movs	r6, #0
 800611c:	4905      	ldr	r1, [pc, #20]	; (8006134 <_mprec_log10+0x30>)
 800611e:	4f06      	ldr	r7, [pc, #24]	; (8006138 <_mprec_log10+0x34>)
 8006120:	4632      	mov	r2, r6
 8006122:	463b      	mov	r3, r7
 8006124:	f7fa f9d8 	bl	80004d8 <__aeabi_dmul>
 8006128:	3c01      	subs	r4, #1
 800612a:	d1f9      	bne.n	8006120 <_mprec_log10+0x1c>
 800612c:	e7f3      	b.n	8006116 <_mprec_log10+0x12>
 800612e:	bf00      	nop
 8006130:	08007490 	.word	0x08007490
 8006134:	3ff00000 	.word	0x3ff00000
 8006138:	40240000 	.word	0x40240000

0800613c <_calloc_r>:
 800613c:	b538      	push	{r3, r4, r5, lr}
 800613e:	fb02 f401 	mul.w	r4, r2, r1
 8006142:	4621      	mov	r1, r4
 8006144:	f000 f808 	bl	8006158 <_malloc_r>
 8006148:	4605      	mov	r5, r0
 800614a:	b118      	cbz	r0, 8006154 <_calloc_r+0x18>
 800614c:	4622      	mov	r2, r4
 800614e:	2100      	movs	r1, #0
 8006150:	f7ff fb72 	bl	8005838 <memset>
 8006154:	4628      	mov	r0, r5
 8006156:	bd38      	pop	{r3, r4, r5, pc}

08006158 <_malloc_r>:
 8006158:	b570      	push	{r4, r5, r6, lr}
 800615a:	1ccd      	adds	r5, r1, #3
 800615c:	f025 0503 	bic.w	r5, r5, #3
 8006160:	3508      	adds	r5, #8
 8006162:	2d0c      	cmp	r5, #12
 8006164:	bf38      	it	cc
 8006166:	250c      	movcc	r5, #12
 8006168:	2d00      	cmp	r5, #0
 800616a:	4606      	mov	r6, r0
 800616c:	db01      	blt.n	8006172 <_malloc_r+0x1a>
 800616e:	42a9      	cmp	r1, r5
 8006170:	d903      	bls.n	800617a <_malloc_r+0x22>
 8006172:	230c      	movs	r3, #12
 8006174:	6033      	str	r3, [r6, #0]
 8006176:	2000      	movs	r0, #0
 8006178:	bd70      	pop	{r4, r5, r6, pc}
 800617a:	f000 feb4 	bl	8006ee6 <__malloc_lock>
 800617e:	4a21      	ldr	r2, [pc, #132]	; (8006204 <_malloc_r+0xac>)
 8006180:	6814      	ldr	r4, [r2, #0]
 8006182:	4621      	mov	r1, r4
 8006184:	b991      	cbnz	r1, 80061ac <_malloc_r+0x54>
 8006186:	4c20      	ldr	r4, [pc, #128]	; (8006208 <_malloc_r+0xb0>)
 8006188:	6823      	ldr	r3, [r4, #0]
 800618a:	b91b      	cbnz	r3, 8006194 <_malloc_r+0x3c>
 800618c:	4630      	mov	r0, r6
 800618e:	f000 f83d 	bl	800620c <_sbrk_r>
 8006192:	6020      	str	r0, [r4, #0]
 8006194:	4629      	mov	r1, r5
 8006196:	4630      	mov	r0, r6
 8006198:	f000 f838 	bl	800620c <_sbrk_r>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d124      	bne.n	80061ea <_malloc_r+0x92>
 80061a0:	230c      	movs	r3, #12
 80061a2:	4630      	mov	r0, r6
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	f000 fe9f 	bl	8006ee8 <__malloc_unlock>
 80061aa:	e7e4      	b.n	8006176 <_malloc_r+0x1e>
 80061ac:	680b      	ldr	r3, [r1, #0]
 80061ae:	1b5b      	subs	r3, r3, r5
 80061b0:	d418      	bmi.n	80061e4 <_malloc_r+0x8c>
 80061b2:	2b0b      	cmp	r3, #11
 80061b4:	d90f      	bls.n	80061d6 <_malloc_r+0x7e>
 80061b6:	600b      	str	r3, [r1, #0]
 80061b8:	18cc      	adds	r4, r1, r3
 80061ba:	50cd      	str	r5, [r1, r3]
 80061bc:	4630      	mov	r0, r6
 80061be:	f000 fe93 	bl	8006ee8 <__malloc_unlock>
 80061c2:	f104 000b 	add.w	r0, r4, #11
 80061c6:	1d23      	adds	r3, r4, #4
 80061c8:	f020 0007 	bic.w	r0, r0, #7
 80061cc:	1ac3      	subs	r3, r0, r3
 80061ce:	d0d3      	beq.n	8006178 <_malloc_r+0x20>
 80061d0:	425a      	negs	r2, r3
 80061d2:	50e2      	str	r2, [r4, r3]
 80061d4:	e7d0      	b.n	8006178 <_malloc_r+0x20>
 80061d6:	684b      	ldr	r3, [r1, #4]
 80061d8:	428c      	cmp	r4, r1
 80061da:	bf16      	itet	ne
 80061dc:	6063      	strne	r3, [r4, #4]
 80061de:	6013      	streq	r3, [r2, #0]
 80061e0:	460c      	movne	r4, r1
 80061e2:	e7eb      	b.n	80061bc <_malloc_r+0x64>
 80061e4:	460c      	mov	r4, r1
 80061e6:	6849      	ldr	r1, [r1, #4]
 80061e8:	e7cc      	b.n	8006184 <_malloc_r+0x2c>
 80061ea:	1cc4      	adds	r4, r0, #3
 80061ec:	f024 0403 	bic.w	r4, r4, #3
 80061f0:	42a0      	cmp	r0, r4
 80061f2:	d005      	beq.n	8006200 <_malloc_r+0xa8>
 80061f4:	1a21      	subs	r1, r4, r0
 80061f6:	4630      	mov	r0, r6
 80061f8:	f000 f808 	bl	800620c <_sbrk_r>
 80061fc:	3001      	adds	r0, #1
 80061fe:	d0cf      	beq.n	80061a0 <_malloc_r+0x48>
 8006200:	6025      	str	r5, [r4, #0]
 8006202:	e7db      	b.n	80061bc <_malloc_r+0x64>
 8006204:	20001290 	.word	0x20001290
 8006208:	20001294 	.word	0x20001294

0800620c <_sbrk_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	2300      	movs	r3, #0
 8006210:	4c05      	ldr	r4, [pc, #20]	; (8006228 <_sbrk_r+0x1c>)
 8006212:	4605      	mov	r5, r0
 8006214:	4608      	mov	r0, r1
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	f7ff fa20 	bl	800565c <_sbrk>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_sbrk_r+0x1a>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	b103      	cbz	r3, 8006226 <_sbrk_r+0x1a>
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20001404 	.word	0x20001404

0800622c <strcpy>:
 800622c:	4603      	mov	r3, r0
 800622e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006232:	f803 2b01 	strb.w	r2, [r3], #1
 8006236:	2a00      	cmp	r2, #0
 8006238:	d1f9      	bne.n	800622e <strcpy+0x2>
 800623a:	4770      	bx	lr

0800623c <quorem>:
 800623c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	6903      	ldr	r3, [r0, #16]
 8006242:	690c      	ldr	r4, [r1, #16]
 8006244:	4680      	mov	r8, r0
 8006246:	42a3      	cmp	r3, r4
 8006248:	f2c0 8084 	blt.w	8006354 <quorem+0x118>
 800624c:	3c01      	subs	r4, #1
 800624e:	f101 0714 	add.w	r7, r1, #20
 8006252:	f100 0614 	add.w	r6, r0, #20
 8006256:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800625a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800625e:	3501      	adds	r5, #1
 8006260:	fbb0 f5f5 	udiv	r5, r0, r5
 8006264:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006268:	eb06 030c 	add.w	r3, r6, ip
 800626c:	eb07 090c 	add.w	r9, r7, ip
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	b39d      	cbz	r5, 80062dc <quorem+0xa0>
 8006274:	f04f 0a00 	mov.w	sl, #0
 8006278:	4638      	mov	r0, r7
 800627a:	46b6      	mov	lr, r6
 800627c:	46d3      	mov	fp, sl
 800627e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006282:	b293      	uxth	r3, r2
 8006284:	fb05 a303 	mla	r3, r5, r3, sl
 8006288:	0c12      	lsrs	r2, r2, #16
 800628a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800628e:	fb05 a202 	mla	r2, r5, r2, sl
 8006292:	b29b      	uxth	r3, r3
 8006294:	ebab 0303 	sub.w	r3, fp, r3
 8006298:	f8de b000 	ldr.w	fp, [lr]
 800629c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80062a0:	fa1f fb8b 	uxth.w	fp, fp
 80062a4:	445b      	add	r3, fp
 80062a6:	fa1f fb82 	uxth.w	fp, r2
 80062aa:	f8de 2000 	ldr.w	r2, [lr]
 80062ae:	4581      	cmp	r9, r0
 80062b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80062b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062be:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80062c2:	f84e 3b04 	str.w	r3, [lr], #4
 80062c6:	d2da      	bcs.n	800627e <quorem+0x42>
 80062c8:	f856 300c 	ldr.w	r3, [r6, ip]
 80062cc:	b933      	cbnz	r3, 80062dc <quorem+0xa0>
 80062ce:	9b01      	ldr	r3, [sp, #4]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	429e      	cmp	r6, r3
 80062d4:	461a      	mov	r2, r3
 80062d6:	d331      	bcc.n	800633c <quorem+0x100>
 80062d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80062dc:	4640      	mov	r0, r8
 80062de:	f7ff fe49 	bl	8005f74 <__mcmp>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	db26      	blt.n	8006334 <quorem+0xf8>
 80062e6:	4630      	mov	r0, r6
 80062e8:	f04f 0c00 	mov.w	ip, #0
 80062ec:	3501      	adds	r5, #1
 80062ee:	f857 1b04 	ldr.w	r1, [r7], #4
 80062f2:	f8d0 e000 	ldr.w	lr, [r0]
 80062f6:	b28b      	uxth	r3, r1
 80062f8:	ebac 0303 	sub.w	r3, ip, r3
 80062fc:	fa1f f28e 	uxth.w	r2, lr
 8006300:	4413      	add	r3, r2
 8006302:	0c0a      	lsrs	r2, r1, #16
 8006304:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006308:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006312:	45b9      	cmp	r9, r7
 8006314:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006318:	f840 3b04 	str.w	r3, [r0], #4
 800631c:	d2e7      	bcs.n	80062ee <quorem+0xb2>
 800631e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006322:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006326:	b92a      	cbnz	r2, 8006334 <quorem+0xf8>
 8006328:	3b04      	subs	r3, #4
 800632a:	429e      	cmp	r6, r3
 800632c:	461a      	mov	r2, r3
 800632e:	d30b      	bcc.n	8006348 <quorem+0x10c>
 8006330:	f8c8 4010 	str.w	r4, [r8, #16]
 8006334:	4628      	mov	r0, r5
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	3b04      	subs	r3, #4
 8006340:	2a00      	cmp	r2, #0
 8006342:	d1c9      	bne.n	80062d8 <quorem+0x9c>
 8006344:	3c01      	subs	r4, #1
 8006346:	e7c4      	b.n	80062d2 <quorem+0x96>
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	3b04      	subs	r3, #4
 800634c:	2a00      	cmp	r2, #0
 800634e:	d1ef      	bne.n	8006330 <quorem+0xf4>
 8006350:	3c01      	subs	r4, #1
 8006352:	e7ea      	b.n	800632a <quorem+0xee>
 8006354:	2000      	movs	r0, #0
 8006356:	e7ee      	b.n	8006336 <quorem+0xfa>

08006358 <_dtoa_r>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	461f      	mov	r7, r3
 8006360:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006362:	b095      	sub	sp, #84	; 0x54
 8006364:	4604      	mov	r4, r0
 8006366:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800636a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800636e:	b93d      	cbnz	r5, 8006380 <_dtoa_r+0x28>
 8006370:	2010      	movs	r0, #16
 8006372:	f000 fda5 	bl	8006ec0 <malloc>
 8006376:	6260      	str	r0, [r4, #36]	; 0x24
 8006378:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800637c:	6005      	str	r5, [r0, #0]
 800637e:	60c5      	str	r5, [r0, #12]
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	b151      	cbz	r1, 800639c <_dtoa_r+0x44>
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	2301      	movs	r3, #1
 800638a:	4093      	lsls	r3, r2
 800638c:	604a      	str	r2, [r1, #4]
 800638e:	608b      	str	r3, [r1, #8]
 8006390:	4620      	mov	r0, r4
 8006392:	f7ff fc0f 	bl	8005bb4 <_Bfree>
 8006396:	2200      	movs	r2, #0
 8006398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	1e3b      	subs	r3, r7, #0
 800639e:	bfaf      	iteee	ge
 80063a0:	2300      	movge	r3, #0
 80063a2:	2201      	movlt	r2, #1
 80063a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	9303      	strlt	r3, [sp, #12]
 80063aa:	bfac      	ite	ge
 80063ac:	f8c8 3000 	strge.w	r3, [r8]
 80063b0:	f8c8 2000 	strlt.w	r2, [r8]
 80063b4:	4bae      	ldr	r3, [pc, #696]	; (8006670 <_dtoa_r+0x318>)
 80063b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80063ba:	ea33 0308 	bics.w	r3, r3, r8
 80063be:	d11b      	bne.n	80063f8 <_dtoa_r+0xa0>
 80063c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80063c4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	b923      	cbnz	r3, 80063d6 <_dtoa_r+0x7e>
 80063cc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f000 8545 	beq.w	8006e60 <_dtoa_r+0xb08>
 80063d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80063d8:	b953      	cbnz	r3, 80063f0 <_dtoa_r+0x98>
 80063da:	4ba6      	ldr	r3, [pc, #664]	; (8006674 <_dtoa_r+0x31c>)
 80063dc:	e021      	b.n	8006422 <_dtoa_r+0xca>
 80063de:	4ba6      	ldr	r3, [pc, #664]	; (8006678 <_dtoa_r+0x320>)
 80063e0:	9306      	str	r3, [sp, #24]
 80063e2:	3308      	adds	r3, #8
 80063e4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	9806      	ldr	r0, [sp, #24]
 80063ea:	b015      	add	sp, #84	; 0x54
 80063ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f0:	4ba0      	ldr	r3, [pc, #640]	; (8006674 <_dtoa_r+0x31c>)
 80063f2:	9306      	str	r3, [sp, #24]
 80063f4:	3303      	adds	r3, #3
 80063f6:	e7f5      	b.n	80063e4 <_dtoa_r+0x8c>
 80063f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80063fc:	2200      	movs	r2, #0
 80063fe:	2300      	movs	r3, #0
 8006400:	4630      	mov	r0, r6
 8006402:	4639      	mov	r1, r7
 8006404:	f7fa fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8006408:	4682      	mov	sl, r0
 800640a:	b160      	cbz	r0, 8006426 <_dtoa_r+0xce>
 800640c:	2301      	movs	r3, #1
 800640e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8520 	beq.w	8006e5a <_dtoa_r+0xb02>
 800641a:	4b98      	ldr	r3, [pc, #608]	; (800667c <_dtoa_r+0x324>)
 800641c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	3b01      	subs	r3, #1
 8006422:	9306      	str	r3, [sp, #24]
 8006424:	e7e0      	b.n	80063e8 <_dtoa_r+0x90>
 8006426:	ab12      	add	r3, sp, #72	; 0x48
 8006428:	9301      	str	r3, [sp, #4]
 800642a:	ab13      	add	r3, sp, #76	; 0x4c
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	4632      	mov	r2, r6
 8006430:	463b      	mov	r3, r7
 8006432:	4620      	mov	r0, r4
 8006434:	f7ff fe16 	bl	8006064 <__d2b>
 8006438:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800643c:	4683      	mov	fp, r0
 800643e:	2d00      	cmp	r5, #0
 8006440:	d07d      	beq.n	800653e <_dtoa_r+0x1e6>
 8006442:	46b0      	mov	r8, r6
 8006444:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006448:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800644c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006450:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006454:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8006458:	2200      	movs	r2, #0
 800645a:	4b89      	ldr	r3, [pc, #548]	; (8006680 <_dtoa_r+0x328>)
 800645c:	4640      	mov	r0, r8
 800645e:	4649      	mov	r1, r9
 8006460:	f7f9 fe82 	bl	8000168 <__aeabi_dsub>
 8006464:	a37c      	add	r3, pc, #496	; (adr r3, 8006658 <_dtoa_r+0x300>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	a37c      	add	r3, pc, #496	; (adr r3, 8006660 <_dtoa_r+0x308>)
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f7f9 fe7a 	bl	800016c <__adddf3>
 8006478:	4606      	mov	r6, r0
 800647a:	4628      	mov	r0, r5
 800647c:	460f      	mov	r7, r1
 800647e:	f7f9 ffc1 	bl	8000404 <__aeabi_i2d>
 8006482:	a379      	add	r3, pc, #484	; (adr r3, 8006668 <_dtoa_r+0x310>)
 8006484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006488:	f7fa f826 	bl	80004d8 <__aeabi_dmul>
 800648c:	4602      	mov	r2, r0
 800648e:	460b      	mov	r3, r1
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7f9 fe6a 	bl	800016c <__adddf3>
 8006498:	4606      	mov	r6, r0
 800649a:	460f      	mov	r7, r1
 800649c:	f7fa fab6 	bl	8000a0c <__aeabi_d2iz>
 80064a0:	2200      	movs	r2, #0
 80064a2:	4682      	mov	sl, r0
 80064a4:	2300      	movs	r3, #0
 80064a6:	4630      	mov	r0, r6
 80064a8:	4639      	mov	r1, r7
 80064aa:	f7fa fa87 	bl	80009bc <__aeabi_dcmplt>
 80064ae:	b148      	cbz	r0, 80064c4 <_dtoa_r+0x16c>
 80064b0:	4650      	mov	r0, sl
 80064b2:	f7f9 ffa7 	bl	8000404 <__aeabi_i2d>
 80064b6:	4632      	mov	r2, r6
 80064b8:	463b      	mov	r3, r7
 80064ba:	f7fa fa75 	bl	80009a8 <__aeabi_dcmpeq>
 80064be:	b908      	cbnz	r0, 80064c4 <_dtoa_r+0x16c>
 80064c0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064c4:	f1ba 0f16 	cmp.w	sl, #22
 80064c8:	d85a      	bhi.n	8006580 <_dtoa_r+0x228>
 80064ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ce:	496d      	ldr	r1, [pc, #436]	; (8006684 <_dtoa_r+0x32c>)
 80064d0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80064d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064d8:	f7fa fa8e 	bl	80009f8 <__aeabi_dcmpgt>
 80064dc:	2800      	cmp	r0, #0
 80064de:	d051      	beq.n	8006584 <_dtoa_r+0x22c>
 80064e0:	2300      	movs	r3, #0
 80064e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80064e6:	930d      	str	r3, [sp, #52]	; 0x34
 80064e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80064ea:	1b5d      	subs	r5, r3, r5
 80064ec:	1e6b      	subs	r3, r5, #1
 80064ee:	9307      	str	r3, [sp, #28]
 80064f0:	bf43      	ittte	mi
 80064f2:	2300      	movmi	r3, #0
 80064f4:	f1c5 0901 	rsbmi	r9, r5, #1
 80064f8:	9307      	strmi	r3, [sp, #28]
 80064fa:	f04f 0900 	movpl.w	r9, #0
 80064fe:	f1ba 0f00 	cmp.w	sl, #0
 8006502:	db41      	blt.n	8006588 <_dtoa_r+0x230>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800650a:	4453      	add	r3, sl
 800650c:	9307      	str	r3, [sp, #28]
 800650e:	2300      	movs	r3, #0
 8006510:	9308      	str	r3, [sp, #32]
 8006512:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006514:	2b09      	cmp	r3, #9
 8006516:	f200 808f 	bhi.w	8006638 <_dtoa_r+0x2e0>
 800651a:	2b05      	cmp	r3, #5
 800651c:	bfc4      	itt	gt
 800651e:	3b04      	subgt	r3, #4
 8006520:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006522:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006524:	bfc8      	it	gt
 8006526:	2500      	movgt	r5, #0
 8006528:	f1a3 0302 	sub.w	r3, r3, #2
 800652c:	bfd8      	it	le
 800652e:	2501      	movle	r5, #1
 8006530:	2b03      	cmp	r3, #3
 8006532:	f200 808d 	bhi.w	8006650 <_dtoa_r+0x2f8>
 8006536:	e8df f003 	tbb	[pc, r3]
 800653a:	7d7b      	.short	0x7d7b
 800653c:	6f2f      	.short	0x6f2f
 800653e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006542:	441d      	add	r5, r3
 8006544:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006548:	2820      	cmp	r0, #32
 800654a:	dd13      	ble.n	8006574 <_dtoa_r+0x21c>
 800654c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006550:	9b02      	ldr	r3, [sp, #8]
 8006552:	fa08 f800 	lsl.w	r8, r8, r0
 8006556:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800655a:	fa23 f000 	lsr.w	r0, r3, r0
 800655e:	ea48 0000 	orr.w	r0, r8, r0
 8006562:	f7f9 ff3f 	bl	80003e4 <__aeabi_ui2d>
 8006566:	2301      	movs	r3, #1
 8006568:	4680      	mov	r8, r0
 800656a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800656e:	3d01      	subs	r5, #1
 8006570:	9310      	str	r3, [sp, #64]	; 0x40
 8006572:	e771      	b.n	8006458 <_dtoa_r+0x100>
 8006574:	9b02      	ldr	r3, [sp, #8]
 8006576:	f1c0 0020 	rsb	r0, r0, #32
 800657a:	fa03 f000 	lsl.w	r0, r3, r0
 800657e:	e7f0      	b.n	8006562 <_dtoa_r+0x20a>
 8006580:	2301      	movs	r3, #1
 8006582:	e7b0      	b.n	80064e6 <_dtoa_r+0x18e>
 8006584:	900d      	str	r0, [sp, #52]	; 0x34
 8006586:	e7af      	b.n	80064e8 <_dtoa_r+0x190>
 8006588:	f1ca 0300 	rsb	r3, sl, #0
 800658c:	9308      	str	r3, [sp, #32]
 800658e:	2300      	movs	r3, #0
 8006590:	eba9 090a 	sub.w	r9, r9, sl
 8006594:	930c      	str	r3, [sp, #48]	; 0x30
 8006596:	e7bc      	b.n	8006512 <_dtoa_r+0x1ba>
 8006598:	2301      	movs	r3, #1
 800659a:	9309      	str	r3, [sp, #36]	; 0x24
 800659c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dd74      	ble.n	800668c <_dtoa_r+0x334>
 80065a2:	4698      	mov	r8, r3
 80065a4:	9304      	str	r3, [sp, #16]
 80065a6:	2200      	movs	r2, #0
 80065a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80065aa:	6072      	str	r2, [r6, #4]
 80065ac:	2204      	movs	r2, #4
 80065ae:	f102 0014 	add.w	r0, r2, #20
 80065b2:	4298      	cmp	r0, r3
 80065b4:	6871      	ldr	r1, [r6, #4]
 80065b6:	d96e      	bls.n	8006696 <_dtoa_r+0x33e>
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7ff fac7 	bl	8005b4c <_Balloc>
 80065be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f1b8 0f0e 	cmp.w	r8, #14
 80065c8:	9306      	str	r3, [sp, #24]
 80065ca:	f200 80ed 	bhi.w	80067a8 <_dtoa_r+0x450>
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	f000 80ea 	beq.w	80067a8 <_dtoa_r+0x450>
 80065d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d8:	f1ba 0f00 	cmp.w	sl, #0
 80065dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80065e0:	dd77      	ble.n	80066d2 <_dtoa_r+0x37a>
 80065e2:	4a28      	ldr	r2, [pc, #160]	; (8006684 <_dtoa_r+0x32c>)
 80065e4:	f00a 030f 	and.w	r3, sl, #15
 80065e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80065ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065f0:	06f0      	lsls	r0, r6, #27
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80065fa:	d568      	bpl.n	80066ce <_dtoa_r+0x376>
 80065fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006600:	4b21      	ldr	r3, [pc, #132]	; (8006688 <_dtoa_r+0x330>)
 8006602:	2503      	movs	r5, #3
 8006604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006608:	f7fa f890 	bl	800072c <__aeabi_ddiv>
 800660c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006610:	f006 060f 	and.w	r6, r6, #15
 8006614:	4f1c      	ldr	r7, [pc, #112]	; (8006688 <_dtoa_r+0x330>)
 8006616:	e04f      	b.n	80066b8 <_dtoa_r+0x360>
 8006618:	2301      	movs	r3, #1
 800661a:	9309      	str	r3, [sp, #36]	; 0x24
 800661c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800661e:	4453      	add	r3, sl
 8006620:	f103 0801 	add.w	r8, r3, #1
 8006624:	9304      	str	r3, [sp, #16]
 8006626:	4643      	mov	r3, r8
 8006628:	2b01      	cmp	r3, #1
 800662a:	bfb8      	it	lt
 800662c:	2301      	movlt	r3, #1
 800662e:	e7ba      	b.n	80065a6 <_dtoa_r+0x24e>
 8006630:	2300      	movs	r3, #0
 8006632:	e7b2      	b.n	800659a <_dtoa_r+0x242>
 8006634:	2300      	movs	r3, #0
 8006636:	e7f0      	b.n	800661a <_dtoa_r+0x2c2>
 8006638:	2501      	movs	r5, #1
 800663a:	2300      	movs	r3, #0
 800663c:	9509      	str	r5, [sp, #36]	; 0x24
 800663e:	931e      	str	r3, [sp, #120]	; 0x78
 8006640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006644:	2200      	movs	r2, #0
 8006646:	9304      	str	r3, [sp, #16]
 8006648:	4698      	mov	r8, r3
 800664a:	2312      	movs	r3, #18
 800664c:	921f      	str	r2, [sp, #124]	; 0x7c
 800664e:	e7aa      	b.n	80065a6 <_dtoa_r+0x24e>
 8006650:	2301      	movs	r3, #1
 8006652:	9309      	str	r3, [sp, #36]	; 0x24
 8006654:	e7f4      	b.n	8006640 <_dtoa_r+0x2e8>
 8006656:	bf00      	nop
 8006658:	636f4361 	.word	0x636f4361
 800665c:	3fd287a7 	.word	0x3fd287a7
 8006660:	8b60c8b3 	.word	0x8b60c8b3
 8006664:	3fc68a28 	.word	0x3fc68a28
 8006668:	509f79fb 	.word	0x509f79fb
 800666c:	3fd34413 	.word	0x3fd34413
 8006670:	7ff00000 	.word	0x7ff00000
 8006674:	0800756d 	.word	0x0800756d
 8006678:	08007564 	.word	0x08007564
 800667c:	08007572 	.word	0x08007572
 8006680:	3ff80000 	.word	0x3ff80000
 8006684:	08007490 	.word	0x08007490
 8006688:	08007468 	.word	0x08007468
 800668c:	2301      	movs	r3, #1
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	4698      	mov	r8, r3
 8006692:	461a      	mov	r2, r3
 8006694:	e7da      	b.n	800664c <_dtoa_r+0x2f4>
 8006696:	3101      	adds	r1, #1
 8006698:	6071      	str	r1, [r6, #4]
 800669a:	0052      	lsls	r2, r2, #1
 800669c:	e787      	b.n	80065ae <_dtoa_r+0x256>
 800669e:	07f1      	lsls	r1, r6, #31
 80066a0:	d508      	bpl.n	80066b4 <_dtoa_r+0x35c>
 80066a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066aa:	f7f9 ff15 	bl	80004d8 <__aeabi_dmul>
 80066ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80066b2:	3501      	adds	r5, #1
 80066b4:	1076      	asrs	r6, r6, #1
 80066b6:	3708      	adds	r7, #8
 80066b8:	2e00      	cmp	r6, #0
 80066ba:	d1f0      	bne.n	800669e <_dtoa_r+0x346>
 80066bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80066c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c4:	f7fa f832 	bl	800072c <__aeabi_ddiv>
 80066c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066cc:	e01b      	b.n	8006706 <_dtoa_r+0x3ae>
 80066ce:	2502      	movs	r5, #2
 80066d0:	e7a0      	b.n	8006614 <_dtoa_r+0x2bc>
 80066d2:	f000 80a4 	beq.w	800681e <_dtoa_r+0x4c6>
 80066d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80066da:	f1ca 0600 	rsb	r6, sl, #0
 80066de:	4ba0      	ldr	r3, [pc, #640]	; (8006960 <_dtoa_r+0x608>)
 80066e0:	f006 020f 	and.w	r2, r6, #15
 80066e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ec:	f7f9 fef4 	bl	80004d8 <__aeabi_dmul>
 80066f0:	2502      	movs	r5, #2
 80066f2:	2300      	movs	r3, #0
 80066f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f8:	4f9a      	ldr	r7, [pc, #616]	; (8006964 <_dtoa_r+0x60c>)
 80066fa:	1136      	asrs	r6, r6, #4
 80066fc:	2e00      	cmp	r6, #0
 80066fe:	f040 8083 	bne.w	8006808 <_dtoa_r+0x4b0>
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e0      	bne.n	80066c8 <_dtoa_r+0x370>
 8006706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 808a 	beq.w	8006822 <_dtoa_r+0x4ca>
 800670e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006712:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006716:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800671a:	2200      	movs	r2, #0
 800671c:	4b92      	ldr	r3, [pc, #584]	; (8006968 <_dtoa_r+0x610>)
 800671e:	f7fa f94d 	bl	80009bc <__aeabi_dcmplt>
 8006722:	2800      	cmp	r0, #0
 8006724:	d07d      	beq.n	8006822 <_dtoa_r+0x4ca>
 8006726:	f1b8 0f00 	cmp.w	r8, #0
 800672a:	d07a      	beq.n	8006822 <_dtoa_r+0x4ca>
 800672c:	9b04      	ldr	r3, [sp, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	dd36      	ble.n	80067a0 <_dtoa_r+0x448>
 8006732:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006736:	2200      	movs	r2, #0
 8006738:	4b8c      	ldr	r3, [pc, #560]	; (800696c <_dtoa_r+0x614>)
 800673a:	f7f9 fecd 	bl	80004d8 <__aeabi_dmul>
 800673e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006742:	9e04      	ldr	r6, [sp, #16]
 8006744:	f10a 37ff 	add.w	r7, sl, #4294967295	; 0xffffffff
 8006748:	3501      	adds	r5, #1
 800674a:	4628      	mov	r0, r5
 800674c:	f7f9 fe5a 	bl	8000404 <__aeabi_i2d>
 8006750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006754:	f7f9 fec0 	bl	80004d8 <__aeabi_dmul>
 8006758:	2200      	movs	r2, #0
 800675a:	4b85      	ldr	r3, [pc, #532]	; (8006970 <_dtoa_r+0x618>)
 800675c:	f7f9 fd06 	bl	800016c <__adddf3>
 8006760:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006764:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006768:	950b      	str	r5, [sp, #44]	; 0x2c
 800676a:	2e00      	cmp	r6, #0
 800676c:	d15c      	bne.n	8006828 <_dtoa_r+0x4d0>
 800676e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	4b7f      	ldr	r3, [pc, #508]	; (8006974 <_dtoa_r+0x61c>)
 8006776:	f7f9 fcf7 	bl	8000168 <__aeabi_dsub>
 800677a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800677c:	462b      	mov	r3, r5
 800677e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006782:	f7fa f939 	bl	80009f8 <__aeabi_dcmpgt>
 8006786:	2800      	cmp	r0, #0
 8006788:	f040 8281 	bne.w	8006c8e <_dtoa_r+0x936>
 800678c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006790:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006792:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006796:	f7fa f911 	bl	80009bc <__aeabi_dcmplt>
 800679a:	2800      	cmp	r0, #0
 800679c:	f040 8275 	bne.w	8006c8a <_dtoa_r+0x932>
 80067a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80067a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f2c0 814b 	blt.w	8006a46 <_dtoa_r+0x6ee>
 80067b0:	f1ba 0f0e 	cmp.w	sl, #14
 80067b4:	f300 8147 	bgt.w	8006a46 <_dtoa_r+0x6ee>
 80067b8:	4b69      	ldr	r3, [pc, #420]	; (8006960 <_dtoa_r+0x608>)
 80067ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f280 80d7 	bge.w	800697c <_dtoa_r+0x624>
 80067ce:	f1b8 0f00 	cmp.w	r8, #0
 80067d2:	f300 80d3 	bgt.w	800697c <_dtoa_r+0x624>
 80067d6:	f040 8257 	bne.w	8006c88 <_dtoa_r+0x930>
 80067da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067de:	2200      	movs	r2, #0
 80067e0:	4b64      	ldr	r3, [pc, #400]	; (8006974 <_dtoa_r+0x61c>)
 80067e2:	f7f9 fe79 	bl	80004d8 <__aeabi_dmul>
 80067e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067ea:	f7fa f8fb 	bl	80009e4 <__aeabi_dcmpge>
 80067ee:	4646      	mov	r6, r8
 80067f0:	4647      	mov	r7, r8
 80067f2:	2800      	cmp	r0, #0
 80067f4:	f040 822d 	bne.w	8006c52 <_dtoa_r+0x8fa>
 80067f8:	9b06      	ldr	r3, [sp, #24]
 80067fa:	9a06      	ldr	r2, [sp, #24]
 80067fc:	1c5d      	adds	r5, r3, #1
 80067fe:	2331      	movs	r3, #49	; 0x31
 8006800:	f10a 0a01 	add.w	sl, sl, #1
 8006804:	7013      	strb	r3, [r2, #0]
 8006806:	e228      	b.n	8006c5a <_dtoa_r+0x902>
 8006808:	07f2      	lsls	r2, r6, #31
 800680a:	d505      	bpl.n	8006818 <_dtoa_r+0x4c0>
 800680c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006810:	f7f9 fe62 	bl	80004d8 <__aeabi_dmul>
 8006814:	2301      	movs	r3, #1
 8006816:	3501      	adds	r5, #1
 8006818:	1076      	asrs	r6, r6, #1
 800681a:	3708      	adds	r7, #8
 800681c:	e76e      	b.n	80066fc <_dtoa_r+0x3a4>
 800681e:	2502      	movs	r5, #2
 8006820:	e771      	b.n	8006706 <_dtoa_r+0x3ae>
 8006822:	4657      	mov	r7, sl
 8006824:	4646      	mov	r6, r8
 8006826:	e790      	b.n	800674a <_dtoa_r+0x3f2>
 8006828:	4b4d      	ldr	r3, [pc, #308]	; (8006960 <_dtoa_r+0x608>)
 800682a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800682e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006834:	2b00      	cmp	r3, #0
 8006836:	d048      	beq.n	80068ca <_dtoa_r+0x572>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	2000      	movs	r0, #0
 800683e:	494e      	ldr	r1, [pc, #312]	; (8006978 <_dtoa_r+0x620>)
 8006840:	f7f9 ff74 	bl	800072c <__aeabi_ddiv>
 8006844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006848:	f7f9 fc8e 	bl	8000168 <__aeabi_dsub>
 800684c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006850:	9d06      	ldr	r5, [sp, #24]
 8006852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006856:	f7fa f8d9 	bl	8000a0c <__aeabi_d2iz>
 800685a:	9011      	str	r0, [sp, #68]	; 0x44
 800685c:	f7f9 fdd2 	bl	8000404 <__aeabi_i2d>
 8006860:	4602      	mov	r2, r0
 8006862:	460b      	mov	r3, r1
 8006864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006868:	f7f9 fc7e 	bl	8000168 <__aeabi_dsub>
 800686c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800686e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006872:	3330      	adds	r3, #48	; 0x30
 8006874:	f805 3b01 	strb.w	r3, [r5], #1
 8006878:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800687c:	f7fa f89e 	bl	80009bc <__aeabi_dcmplt>
 8006880:	2800      	cmp	r0, #0
 8006882:	d163      	bne.n	800694c <_dtoa_r+0x5f4>
 8006884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006888:	2000      	movs	r0, #0
 800688a:	4937      	ldr	r1, [pc, #220]	; (8006968 <_dtoa_r+0x610>)
 800688c:	f7f9 fc6c 	bl	8000168 <__aeabi_dsub>
 8006890:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006894:	f7fa f892 	bl	80009bc <__aeabi_dcmplt>
 8006898:	2800      	cmp	r0, #0
 800689a:	f040 80b5 	bne.w	8006a08 <_dtoa_r+0x6b0>
 800689e:	9b06      	ldr	r3, [sp, #24]
 80068a0:	1aeb      	subs	r3, r5, r3
 80068a2:	429e      	cmp	r6, r3
 80068a4:	f77f af7c 	ble.w	80067a0 <_dtoa_r+0x448>
 80068a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068ac:	2200      	movs	r2, #0
 80068ae:	4b2f      	ldr	r3, [pc, #188]	; (800696c <_dtoa_r+0x614>)
 80068b0:	f7f9 fe12 	bl	80004d8 <__aeabi_dmul>
 80068b4:	2200      	movs	r2, #0
 80068b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068be:	4b2b      	ldr	r3, [pc, #172]	; (800696c <_dtoa_r+0x614>)
 80068c0:	f7f9 fe0a 	bl	80004d8 <__aeabi_dmul>
 80068c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068c8:	e7c3      	b.n	8006852 <_dtoa_r+0x4fa>
 80068ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80068ce:	f7f9 fe03 	bl	80004d8 <__aeabi_dmul>
 80068d2:	9b06      	ldr	r3, [sp, #24]
 80068d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068d8:	199d      	adds	r5, r3, r6
 80068da:	461e      	mov	r6, r3
 80068dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068e0:	f7fa f894 	bl	8000a0c <__aeabi_d2iz>
 80068e4:	9011      	str	r0, [sp, #68]	; 0x44
 80068e6:	f7f9 fd8d 	bl	8000404 <__aeabi_i2d>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f2:	f7f9 fc39 	bl	8000168 <__aeabi_dsub>
 80068f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068fc:	3330      	adds	r3, #48	; 0x30
 80068fe:	f806 3b01 	strb.w	r3, [r6], #1
 8006902:	42ae      	cmp	r6, r5
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	d124      	bne.n	8006954 <_dtoa_r+0x5fc>
 800690a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800690e:	4b1a      	ldr	r3, [pc, #104]	; (8006978 <_dtoa_r+0x620>)
 8006910:	f7f9 fc2c 	bl	800016c <__adddf3>
 8006914:	4602      	mov	r2, r0
 8006916:	460b      	mov	r3, r1
 8006918:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691c:	f7fa f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8006920:	2800      	cmp	r0, #0
 8006922:	d171      	bne.n	8006a08 <_dtoa_r+0x6b0>
 8006924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006928:	2000      	movs	r0, #0
 800692a:	4913      	ldr	r1, [pc, #76]	; (8006978 <_dtoa_r+0x620>)
 800692c:	f7f9 fc1c 	bl	8000168 <__aeabi_dsub>
 8006930:	4602      	mov	r2, r0
 8006932:	460b      	mov	r3, r1
 8006934:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006938:	f7fa f840 	bl	80009bc <__aeabi_dcmplt>
 800693c:	2800      	cmp	r0, #0
 800693e:	f43f af2f 	beq.w	80067a0 <_dtoa_r+0x448>
 8006942:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006946:	1e6a      	subs	r2, r5, #1
 8006948:	2b30      	cmp	r3, #48	; 0x30
 800694a:	d001      	beq.n	8006950 <_dtoa_r+0x5f8>
 800694c:	46ba      	mov	sl, r7
 800694e:	e04a      	b.n	80069e6 <_dtoa_r+0x68e>
 8006950:	4615      	mov	r5, r2
 8006952:	e7f6      	b.n	8006942 <_dtoa_r+0x5ea>
 8006954:	4b05      	ldr	r3, [pc, #20]	; (800696c <_dtoa_r+0x614>)
 8006956:	f7f9 fdbf 	bl	80004d8 <__aeabi_dmul>
 800695a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800695e:	e7bd      	b.n	80068dc <_dtoa_r+0x584>
 8006960:	08007490 	.word	0x08007490
 8006964:	08007468 	.word	0x08007468
 8006968:	3ff00000 	.word	0x3ff00000
 800696c:	40240000 	.word	0x40240000
 8006970:	401c0000 	.word	0x401c0000
 8006974:	40140000 	.word	0x40140000
 8006978:	3fe00000 	.word	0x3fe00000
 800697c:	9d06      	ldr	r5, [sp, #24]
 800697e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	f7f9 fecf 	bl	800072c <__aeabi_ddiv>
 800698e:	f7fa f83d 	bl	8000a0c <__aeabi_d2iz>
 8006992:	4681      	mov	r9, r0
 8006994:	f7f9 fd36 	bl	8000404 <__aeabi_i2d>
 8006998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699c:	f7f9 fd9c 	bl	80004d8 <__aeabi_dmul>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4630      	mov	r0, r6
 80069a6:	4639      	mov	r1, r7
 80069a8:	f7f9 fbde 	bl	8000168 <__aeabi_dsub>
 80069ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80069b0:	f805 6b01 	strb.w	r6, [r5], #1
 80069b4:	9e06      	ldr	r6, [sp, #24]
 80069b6:	4602      	mov	r2, r0
 80069b8:	1bae      	subs	r6, r5, r6
 80069ba:	45b0      	cmp	r8, r6
 80069bc:	460b      	mov	r3, r1
 80069be:	d135      	bne.n	8006a2c <_dtoa_r+0x6d4>
 80069c0:	f7f9 fbd4 	bl	800016c <__adddf3>
 80069c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c8:	4606      	mov	r6, r0
 80069ca:	460f      	mov	r7, r1
 80069cc:	f7fa f814 	bl	80009f8 <__aeabi_dcmpgt>
 80069d0:	b9c8      	cbnz	r0, 8006a06 <_dtoa_r+0x6ae>
 80069d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d6:	4630      	mov	r0, r6
 80069d8:	4639      	mov	r1, r7
 80069da:	f7f9 ffe5 	bl	80009a8 <__aeabi_dcmpeq>
 80069de:	b110      	cbz	r0, 80069e6 <_dtoa_r+0x68e>
 80069e0:	f019 0f01 	tst.w	r9, #1
 80069e4:	d10f      	bne.n	8006a06 <_dtoa_r+0x6ae>
 80069e6:	4659      	mov	r1, fp
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff f8e3 	bl	8005bb4 <_Bfree>
 80069ee:	2300      	movs	r3, #0
 80069f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069f2:	702b      	strb	r3, [r5, #0]
 80069f4:	f10a 0301 	add.w	r3, sl, #1
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f43f acf3 	beq.w	80063e8 <_dtoa_r+0x90>
 8006a02:	601d      	str	r5, [r3, #0]
 8006a04:	e4f0      	b.n	80063e8 <_dtoa_r+0x90>
 8006a06:	4657      	mov	r7, sl
 8006a08:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006a0c:	1e6b      	subs	r3, r5, #1
 8006a0e:	2a39      	cmp	r2, #57	; 0x39
 8006a10:	d106      	bne.n	8006a20 <_dtoa_r+0x6c8>
 8006a12:	9a06      	ldr	r2, [sp, #24]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d107      	bne.n	8006a28 <_dtoa_r+0x6d0>
 8006a18:	2330      	movs	r3, #48	; 0x30
 8006a1a:	7013      	strb	r3, [r2, #0]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	3701      	adds	r7, #1
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	3201      	adds	r2, #1
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e791      	b.n	800694c <_dtoa_r+0x5f4>
 8006a28:	461d      	mov	r5, r3
 8006a2a:	e7ed      	b.n	8006a08 <_dtoa_r+0x6b0>
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	4b99      	ldr	r3, [pc, #612]	; (8006c94 <_dtoa_r+0x93c>)
 8006a30:	f7f9 fd52 	bl	80004d8 <__aeabi_dmul>
 8006a34:	2200      	movs	r2, #0
 8006a36:	2300      	movs	r3, #0
 8006a38:	4606      	mov	r6, r0
 8006a3a:	460f      	mov	r7, r1
 8006a3c:	f7f9 ffb4 	bl	80009a8 <__aeabi_dcmpeq>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d09e      	beq.n	8006982 <_dtoa_r+0x62a>
 8006a44:	e7cf      	b.n	80069e6 <_dtoa_r+0x68e>
 8006a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a48:	2a00      	cmp	r2, #0
 8006a4a:	f000 8088 	beq.w	8006b5e <_dtoa_r+0x806>
 8006a4e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a50:	2a01      	cmp	r2, #1
 8006a52:	dc6d      	bgt.n	8006b30 <_dtoa_r+0x7d8>
 8006a54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a56:	2a00      	cmp	r2, #0
 8006a58:	d066      	beq.n	8006b28 <_dtoa_r+0x7d0>
 8006a5a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a5e:	464d      	mov	r5, r9
 8006a60:	9e08      	ldr	r6, [sp, #32]
 8006a62:	9a07      	ldr	r2, [sp, #28]
 8006a64:	2101      	movs	r1, #1
 8006a66:	441a      	add	r2, r3
 8006a68:	4620      	mov	r0, r4
 8006a6a:	4499      	add	r9, r3
 8006a6c:	9207      	str	r2, [sp, #28]
 8006a6e:	f7ff f941 	bl	8005cf4 <__i2b>
 8006a72:	4607      	mov	r7, r0
 8006a74:	2d00      	cmp	r5, #0
 8006a76:	dd0b      	ble.n	8006a90 <_dtoa_r+0x738>
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dd08      	ble.n	8006a90 <_dtoa_r+0x738>
 8006a7e:	42ab      	cmp	r3, r5
 8006a80:	bfa8      	it	ge
 8006a82:	462b      	movge	r3, r5
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	eba9 0903 	sub.w	r9, r9, r3
 8006a8a:	1aed      	subs	r5, r5, r3
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	9307      	str	r3, [sp, #28]
 8006a90:	9b08      	ldr	r3, [sp, #32]
 8006a92:	b1eb      	cbz	r3, 8006ad0 <_dtoa_r+0x778>
 8006a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d065      	beq.n	8006b66 <_dtoa_r+0x80e>
 8006a9a:	b18e      	cbz	r6, 8006ac0 <_dtoa_r+0x768>
 8006a9c:	4639      	mov	r1, r7
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f7ff f9c5 	bl	8005e30 <__pow5mult>
 8006aa6:	465a      	mov	r2, fp
 8006aa8:	4601      	mov	r1, r0
 8006aaa:	4607      	mov	r7, r0
 8006aac:	4620      	mov	r0, r4
 8006aae:	f7ff f92a 	bl	8005d06 <__multiply>
 8006ab2:	4659      	mov	r1, fp
 8006ab4:	900a      	str	r0, [sp, #40]	; 0x28
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f7ff f87c 	bl	8005bb4 <_Bfree>
 8006abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006abe:	469b      	mov	fp, r3
 8006ac0:	9b08      	ldr	r3, [sp, #32]
 8006ac2:	1b9a      	subs	r2, r3, r6
 8006ac4:	d004      	beq.n	8006ad0 <_dtoa_r+0x778>
 8006ac6:	4659      	mov	r1, fp
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7ff f9b1 	bl	8005e30 <__pow5mult>
 8006ace:	4683      	mov	fp, r0
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f7ff f90e 	bl	8005cf4 <__i2b>
 8006ad8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ada:	4606      	mov	r6, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 81c6 	beq.w	8006e6e <_dtoa_r+0xb16>
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	4601      	mov	r1, r0
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff f9a2 	bl	8005e30 <__pow5mult>
 8006aec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006aee:	4606      	mov	r6, r0
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	dc3e      	bgt.n	8006b72 <_dtoa_r+0x81a>
 8006af4:	9b02      	ldr	r3, [sp, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d137      	bne.n	8006b6a <_dtoa_r+0x812>
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d134      	bne.n	8006b6e <_dtoa_r+0x816>
 8006b04:	9b03      	ldr	r3, [sp, #12]
 8006b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b0a:	0d1b      	lsrs	r3, r3, #20
 8006b0c:	051b      	lsls	r3, r3, #20
 8006b0e:	b12b      	cbz	r3, 8006b1c <_dtoa_r+0x7c4>
 8006b10:	9b07      	ldr	r3, [sp, #28]
 8006b12:	f109 0901 	add.w	r9, r9, #1
 8006b16:	3301      	adds	r3, #1
 8006b18:	9307      	str	r3, [sp, #28]
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	9308      	str	r3, [sp, #32]
 8006b1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d128      	bne.n	8006b76 <_dtoa_r+0x81e>
 8006b24:	2001      	movs	r0, #1
 8006b26:	e02e      	b.n	8006b86 <_dtoa_r+0x82e>
 8006b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b2e:	e796      	b.n	8006a5e <_dtoa_r+0x706>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 8006b36:	42b3      	cmp	r3, r6
 8006b38:	bfb7      	itett	lt
 8006b3a:	9b08      	ldrlt	r3, [sp, #32]
 8006b3c:	1b9e      	subge	r6, r3, r6
 8006b3e:	1af2      	sublt	r2, r6, r3
 8006b40:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006b42:	bfbf      	itttt	lt
 8006b44:	9608      	strlt	r6, [sp, #32]
 8006b46:	189b      	addlt	r3, r3, r2
 8006b48:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006b4a:	2600      	movlt	r6, #0
 8006b4c:	f1b8 0f00 	cmp.w	r8, #0
 8006b50:	bfb9      	ittee	lt
 8006b52:	eba9 0508 	sublt.w	r5, r9, r8
 8006b56:	2300      	movlt	r3, #0
 8006b58:	464d      	movge	r5, r9
 8006b5a:	4643      	movge	r3, r8
 8006b5c:	e781      	b.n	8006a62 <_dtoa_r+0x70a>
 8006b5e:	9e08      	ldr	r6, [sp, #32]
 8006b60:	464d      	mov	r5, r9
 8006b62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006b64:	e786      	b.n	8006a74 <_dtoa_r+0x71c>
 8006b66:	9a08      	ldr	r2, [sp, #32]
 8006b68:	e7ad      	b.n	8006ac6 <_dtoa_r+0x76e>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e7d6      	b.n	8006b1c <_dtoa_r+0x7c4>
 8006b6e:	9b02      	ldr	r3, [sp, #8]
 8006b70:	e7d4      	b.n	8006b1c <_dtoa_r+0x7c4>
 8006b72:	2300      	movs	r3, #0
 8006b74:	9308      	str	r3, [sp, #32]
 8006b76:	6933      	ldr	r3, [r6, #16]
 8006b78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b7c:	6918      	ldr	r0, [r3, #16]
 8006b7e:	f7ff f86b 	bl	8005c58 <__hi0bits>
 8006b82:	f1c0 0020 	rsb	r0, r0, #32
 8006b86:	9b07      	ldr	r3, [sp, #28]
 8006b88:	4418      	add	r0, r3
 8006b8a:	f010 001f 	ands.w	r0, r0, #31
 8006b8e:	d047      	beq.n	8006c20 <_dtoa_r+0x8c8>
 8006b90:	f1c0 0320 	rsb	r3, r0, #32
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	dd3b      	ble.n	8006c10 <_dtoa_r+0x8b8>
 8006b98:	9b07      	ldr	r3, [sp, #28]
 8006b9a:	f1c0 001c 	rsb	r0, r0, #28
 8006b9e:	4481      	add	r9, r0
 8006ba0:	4405      	add	r5, r0
 8006ba2:	4403      	add	r3, r0
 8006ba4:	9307      	str	r3, [sp, #28]
 8006ba6:	f1b9 0f00 	cmp.w	r9, #0
 8006baa:	dd05      	ble.n	8006bb8 <_dtoa_r+0x860>
 8006bac:	4659      	mov	r1, fp
 8006bae:	464a      	mov	r2, r9
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f7ff f98b 	bl	8005ecc <__lshift>
 8006bb6:	4683      	mov	fp, r0
 8006bb8:	9b07      	ldr	r3, [sp, #28]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	dd05      	ble.n	8006bca <_dtoa_r+0x872>
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	f7ff f982 	bl	8005ecc <__lshift>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bcc:	b353      	cbz	r3, 8006c24 <_dtoa_r+0x8cc>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4658      	mov	r0, fp
 8006bd2:	f7ff f9cf 	bl	8005f74 <__mcmp>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	da24      	bge.n	8006c24 <_dtoa_r+0x8cc>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4659      	mov	r1, fp
 8006bde:	220a      	movs	r2, #10
 8006be0:	4620      	mov	r0, r4
 8006be2:	f7fe fffe 	bl	8005be2 <__multadd>
 8006be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006bec:	4683      	mov	fp, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	f000 8144 	beq.w	8006e7c <_dtoa_r+0xb24>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f7fe fff1 	bl	8005be2 <__multadd>
 8006c00:	9b04      	ldr	r3, [sp, #16]
 8006c02:	4607      	mov	r7, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	dc4d      	bgt.n	8006ca4 <_dtoa_r+0x94c>
 8006c08:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	dd4a      	ble.n	8006ca4 <_dtoa_r+0x94c>
 8006c0e:	e011      	b.n	8006c34 <_dtoa_r+0x8dc>
 8006c10:	d0c9      	beq.n	8006ba6 <_dtoa_r+0x84e>
 8006c12:	9a07      	ldr	r2, [sp, #28]
 8006c14:	331c      	adds	r3, #28
 8006c16:	441a      	add	r2, r3
 8006c18:	4499      	add	r9, r3
 8006c1a:	441d      	add	r5, r3
 8006c1c:	4613      	mov	r3, r2
 8006c1e:	e7c1      	b.n	8006ba4 <_dtoa_r+0x84c>
 8006c20:	4603      	mov	r3, r0
 8006c22:	e7f6      	b.n	8006c12 <_dtoa_r+0x8ba>
 8006c24:	f1b8 0f00 	cmp.w	r8, #0
 8006c28:	dc36      	bgt.n	8006c98 <_dtoa_r+0x940>
 8006c2a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	dd33      	ble.n	8006c98 <_dtoa_r+0x940>
 8006c30:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c34:	9b04      	ldr	r3, [sp, #16]
 8006c36:	b963      	cbnz	r3, 8006c52 <_dtoa_r+0x8fa>
 8006c38:	4631      	mov	r1, r6
 8006c3a:	2205      	movs	r2, #5
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7fe ffd0 	bl	8005be2 <__multadd>
 8006c42:	4601      	mov	r1, r0
 8006c44:	4606      	mov	r6, r0
 8006c46:	4658      	mov	r0, fp
 8006c48:	f7ff f994 	bl	8005f74 <__mcmp>
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f73f add3 	bgt.w	80067f8 <_dtoa_r+0x4a0>
 8006c52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c54:	9d06      	ldr	r5, [sp, #24]
 8006c56:	ea6f 0a03 	mvn.w	sl, r3
 8006c5a:	f04f 0900 	mov.w	r9, #0
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7fe ffa7 	bl	8005bb4 <_Bfree>
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	f43f aebd 	beq.w	80069e6 <_dtoa_r+0x68e>
 8006c6c:	f1b9 0f00 	cmp.w	r9, #0
 8006c70:	d005      	beq.n	8006c7e <_dtoa_r+0x926>
 8006c72:	45b9      	cmp	r9, r7
 8006c74:	d003      	beq.n	8006c7e <_dtoa_r+0x926>
 8006c76:	4649      	mov	r1, r9
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f7fe ff9b 	bl	8005bb4 <_Bfree>
 8006c7e:	4639      	mov	r1, r7
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7fe ff97 	bl	8005bb4 <_Bfree>
 8006c86:	e6ae      	b.n	80069e6 <_dtoa_r+0x68e>
 8006c88:	2600      	movs	r6, #0
 8006c8a:	4637      	mov	r7, r6
 8006c8c:	e7e1      	b.n	8006c52 <_dtoa_r+0x8fa>
 8006c8e:	46ba      	mov	sl, r7
 8006c90:	4637      	mov	r7, r6
 8006c92:	e5b1      	b.n	80067f8 <_dtoa_r+0x4a0>
 8006c94:	40240000 	.word	0x40240000
 8006c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c9a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80f3 	beq.w	8006e8a <_dtoa_r+0xb32>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	dd05      	ble.n	8006cb4 <_dtoa_r+0x95c>
 8006ca8:	4639      	mov	r1, r7
 8006caa:	462a      	mov	r2, r5
 8006cac:	4620      	mov	r0, r4
 8006cae:	f7ff f90d 	bl	8005ecc <__lshift>
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	9b08      	ldr	r3, [sp, #32]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d04c      	beq.n	8006d54 <_dtoa_r+0x9fc>
 8006cba:	6879      	ldr	r1, [r7, #4]
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	f7fe ff45 	bl	8005b4c <_Balloc>
 8006cc2:	4605      	mov	r5, r0
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	f107 010c 	add.w	r1, r7, #12
 8006cca:	3202      	adds	r2, #2
 8006ccc:	0092      	lsls	r2, r2, #2
 8006cce:	300c      	adds	r0, #12
 8006cd0:	f000 f8fe 	bl	8006ed0 <memcpy>
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	4629      	mov	r1, r5
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f7ff f8f7 	bl	8005ecc <__lshift>
 8006cde:	46b9      	mov	r9, r7
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	9b06      	ldr	r3, [sp, #24]
 8006ce4:	9307      	str	r3, [sp, #28]
 8006ce6:	9b02      	ldr	r3, [sp, #8]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	9308      	str	r3, [sp, #32]
 8006cee:	4631      	mov	r1, r6
 8006cf0:	4658      	mov	r0, fp
 8006cf2:	f7ff faa3 	bl	800623c <quorem>
 8006cf6:	4649      	mov	r1, r9
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006cfe:	4658      	mov	r0, fp
 8006d00:	f7ff f938 	bl	8005f74 <__mcmp>
 8006d04:	463a      	mov	r2, r7
 8006d06:	9002      	str	r0, [sp, #8]
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	f7ff f94c 	bl	8005fa8 <__mdiff>
 8006d10:	68c3      	ldr	r3, [r0, #12]
 8006d12:	4602      	mov	r2, r0
 8006d14:	bb03      	cbnz	r3, 8006d58 <_dtoa_r+0xa00>
 8006d16:	4601      	mov	r1, r0
 8006d18:	9009      	str	r0, [sp, #36]	; 0x24
 8006d1a:	4658      	mov	r0, fp
 8006d1c:	f7ff f92a 	bl	8005f74 <__mcmp>
 8006d20:	4603      	mov	r3, r0
 8006d22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d24:	4611      	mov	r1, r2
 8006d26:	4620      	mov	r0, r4
 8006d28:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2a:	f7fe ff43 	bl	8005bb4 <_Bfree>
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	b9a3      	cbnz	r3, 8006d5c <_dtoa_r+0xa04>
 8006d32:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d34:	b992      	cbnz	r2, 8006d5c <_dtoa_r+0xa04>
 8006d36:	9a08      	ldr	r2, [sp, #32]
 8006d38:	b982      	cbnz	r2, 8006d5c <_dtoa_r+0xa04>
 8006d3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d3e:	d029      	beq.n	8006d94 <_dtoa_r+0xa3c>
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dd01      	ble.n	8006d4a <_dtoa_r+0x9f2>
 8006d46:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006d4a:	9b07      	ldr	r3, [sp, #28]
 8006d4c:	1c5d      	adds	r5, r3, #1
 8006d4e:	f883 8000 	strb.w	r8, [r3]
 8006d52:	e784      	b.n	8006c5e <_dtoa_r+0x906>
 8006d54:	4638      	mov	r0, r7
 8006d56:	e7c2      	b.n	8006cde <_dtoa_r+0x986>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e7e3      	b.n	8006d24 <_dtoa_r+0x9cc>
 8006d5c:	9a02      	ldr	r2, [sp, #8]
 8006d5e:	2a00      	cmp	r2, #0
 8006d60:	db04      	blt.n	8006d6c <_dtoa_r+0xa14>
 8006d62:	d123      	bne.n	8006dac <_dtoa_r+0xa54>
 8006d64:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006d66:	bb0a      	cbnz	r2, 8006dac <_dtoa_r+0xa54>
 8006d68:	9a08      	ldr	r2, [sp, #32]
 8006d6a:	b9fa      	cbnz	r2, 8006dac <_dtoa_r+0xa54>
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	ddec      	ble.n	8006d4a <_dtoa_r+0x9f2>
 8006d70:	4659      	mov	r1, fp
 8006d72:	2201      	movs	r2, #1
 8006d74:	4620      	mov	r0, r4
 8006d76:	f7ff f8a9 	bl	8005ecc <__lshift>
 8006d7a:	4631      	mov	r1, r6
 8006d7c:	4683      	mov	fp, r0
 8006d7e:	f7ff f8f9 	bl	8005f74 <__mcmp>
 8006d82:	2800      	cmp	r0, #0
 8006d84:	dc03      	bgt.n	8006d8e <_dtoa_r+0xa36>
 8006d86:	d1e0      	bne.n	8006d4a <_dtoa_r+0x9f2>
 8006d88:	f018 0f01 	tst.w	r8, #1
 8006d8c:	d0dd      	beq.n	8006d4a <_dtoa_r+0x9f2>
 8006d8e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d92:	d1d8      	bne.n	8006d46 <_dtoa_r+0x9ee>
 8006d94:	9b07      	ldr	r3, [sp, #28]
 8006d96:	9a07      	ldr	r2, [sp, #28]
 8006d98:	1c5d      	adds	r5, r3, #1
 8006d9a:	2339      	movs	r3, #57	; 0x39
 8006d9c:	7013      	strb	r3, [r2, #0]
 8006d9e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006da2:	1e6a      	subs	r2, r5, #1
 8006da4:	2b39      	cmp	r3, #57	; 0x39
 8006da6:	d04d      	beq.n	8006e44 <_dtoa_r+0xaec>
 8006da8:	3301      	adds	r3, #1
 8006daa:	e052      	b.n	8006e52 <_dtoa_r+0xafa>
 8006dac:	9a07      	ldr	r2, [sp, #28]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f102 0501 	add.w	r5, r2, #1
 8006db4:	dd06      	ble.n	8006dc4 <_dtoa_r+0xa6c>
 8006db6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006dba:	d0eb      	beq.n	8006d94 <_dtoa_r+0xa3c>
 8006dbc:	f108 0801 	add.w	r8, r8, #1
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	e7c4      	b.n	8006d4e <_dtoa_r+0x9f6>
 8006dc4:	9b06      	ldr	r3, [sp, #24]
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	1aeb      	subs	r3, r5, r3
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006dd0:	d021      	beq.n	8006e16 <_dtoa_r+0xabe>
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	220a      	movs	r2, #10
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f7fe ff02 	bl	8005be2 <__multadd>
 8006dde:	45b9      	cmp	r9, r7
 8006de0:	4683      	mov	fp, r0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	f04f 020a 	mov.w	r2, #10
 8006dea:	4649      	mov	r1, r9
 8006dec:	4620      	mov	r0, r4
 8006dee:	d105      	bne.n	8006dfc <_dtoa_r+0xaa4>
 8006df0:	f7fe fef7 	bl	8005be2 <__multadd>
 8006df4:	4681      	mov	r9, r0
 8006df6:	4607      	mov	r7, r0
 8006df8:	9507      	str	r5, [sp, #28]
 8006dfa:	e778      	b.n	8006cee <_dtoa_r+0x996>
 8006dfc:	f7fe fef1 	bl	8005be2 <__multadd>
 8006e00:	4639      	mov	r1, r7
 8006e02:	4681      	mov	r9, r0
 8006e04:	2300      	movs	r3, #0
 8006e06:	220a      	movs	r2, #10
 8006e08:	4620      	mov	r0, r4
 8006e0a:	f7fe feea 	bl	8005be2 <__multadd>
 8006e0e:	4607      	mov	r7, r0
 8006e10:	e7f2      	b.n	8006df8 <_dtoa_r+0xaa0>
 8006e12:	f04f 0900 	mov.w	r9, #0
 8006e16:	4659      	mov	r1, fp
 8006e18:	2201      	movs	r2, #1
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff f856 	bl	8005ecc <__lshift>
 8006e20:	4631      	mov	r1, r6
 8006e22:	4683      	mov	fp, r0
 8006e24:	f7ff f8a6 	bl	8005f74 <__mcmp>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	dcb8      	bgt.n	8006d9e <_dtoa_r+0xa46>
 8006e2c:	d102      	bne.n	8006e34 <_dtoa_r+0xadc>
 8006e2e:	f018 0f01 	tst.w	r8, #1
 8006e32:	d1b4      	bne.n	8006d9e <_dtoa_r+0xa46>
 8006e34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e38:	1e6a      	subs	r2, r5, #1
 8006e3a:	2b30      	cmp	r3, #48	; 0x30
 8006e3c:	f47f af0f 	bne.w	8006c5e <_dtoa_r+0x906>
 8006e40:	4615      	mov	r5, r2
 8006e42:	e7f7      	b.n	8006e34 <_dtoa_r+0xadc>
 8006e44:	9b06      	ldr	r3, [sp, #24]
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d105      	bne.n	8006e56 <_dtoa_r+0xafe>
 8006e4a:	2331      	movs	r3, #49	; 0x31
 8006e4c:	9a06      	ldr	r2, [sp, #24]
 8006e4e:	f10a 0a01 	add.w	sl, sl, #1
 8006e52:	7013      	strb	r3, [r2, #0]
 8006e54:	e703      	b.n	8006c5e <_dtoa_r+0x906>
 8006e56:	4615      	mov	r5, r2
 8006e58:	e7a1      	b.n	8006d9e <_dtoa_r+0xa46>
 8006e5a:	4b17      	ldr	r3, [pc, #92]	; (8006eb8 <_dtoa_r+0xb60>)
 8006e5c:	f7ff bae1 	b.w	8006422 <_dtoa_r+0xca>
 8006e60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f47f aabb 	bne.w	80063de <_dtoa_r+0x86>
 8006e68:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <_dtoa_r+0xb64>)
 8006e6a:	f7ff bada 	b.w	8006422 <_dtoa_r+0xca>
 8006e6e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	f77f ae3f 	ble.w	8006af4 <_dtoa_r+0x79c>
 8006e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e78:	9308      	str	r3, [sp, #32]
 8006e7a:	e653      	b.n	8006b24 <_dtoa_r+0x7cc>
 8006e7c:	9b04      	ldr	r3, [sp, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	dc03      	bgt.n	8006e8a <_dtoa_r+0xb32>
 8006e82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	f73f aed5 	bgt.w	8006c34 <_dtoa_r+0x8dc>
 8006e8a:	9d06      	ldr	r5, [sp, #24]
 8006e8c:	4631      	mov	r1, r6
 8006e8e:	4658      	mov	r0, fp
 8006e90:	f7ff f9d4 	bl	800623c <quorem>
 8006e94:	9b06      	ldr	r3, [sp, #24]
 8006e96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e9a:	f805 8b01 	strb.w	r8, [r5], #1
 8006e9e:	9a04      	ldr	r2, [sp, #16]
 8006ea0:	1aeb      	subs	r3, r5, r3
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	ddb5      	ble.n	8006e12 <_dtoa_r+0xaba>
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	220a      	movs	r2, #10
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7fe fe98 	bl	8005be2 <__multadd>
 8006eb2:	4683      	mov	fp, r0
 8006eb4:	e7ea      	b.n	8006e8c <_dtoa_r+0xb34>
 8006eb6:	bf00      	nop
 8006eb8:	08007571 	.word	0x08007571
 8006ebc:	08007564 	.word	0x08007564

08006ec0 <malloc>:
 8006ec0:	4b02      	ldr	r3, [pc, #8]	; (8006ecc <malloc+0xc>)
 8006ec2:	4601      	mov	r1, r0
 8006ec4:	6818      	ldr	r0, [r3, #0]
 8006ec6:	f7ff b947 	b.w	8006158 <_malloc_r>
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c

08006ed0 <memcpy>:
 8006ed0:	b510      	push	{r4, lr}
 8006ed2:	1e43      	subs	r3, r0, #1
 8006ed4:	440a      	add	r2, r1
 8006ed6:	4291      	cmp	r1, r2
 8006ed8:	d100      	bne.n	8006edc <memcpy+0xc>
 8006eda:	bd10      	pop	{r4, pc}
 8006edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee4:	e7f7      	b.n	8006ed6 <memcpy+0x6>

08006ee6 <__malloc_lock>:
 8006ee6:	4770      	bx	lr

08006ee8 <__malloc_unlock>:
 8006ee8:	4770      	bx	lr

08006eea <atan2>:
 8006eea:	f000 b801 	b.w	8006ef0 <__ieee754_atan2>
	...

08006ef0 <__ieee754_atan2>:
 8006ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	4256      	negs	r6, r2
 8006ef6:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8006efa:	4316      	orrs	r6, r2
 8006efc:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 80070a8 <__ieee754_atan2+0x1b8>
 8006f00:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 8006f04:	454e      	cmp	r6, r9
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	469e      	mov	lr, r3
 8006f0c:	d808      	bhi.n	8006f20 <__ieee754_atan2+0x30>
 8006f0e:	4246      	negs	r6, r0
 8006f10:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006f14:	4306      	orrs	r6, r0
 8006f16:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006f1a:	454e      	cmp	r6, r9
 8006f1c:	4688      	mov	r8, r1
 8006f1e:	d906      	bls.n	8006f2e <__ieee754_atan2+0x3e>
 8006f20:	4620      	mov	r0, r4
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 f922 	bl	800016c <__adddf3>
 8006f28:	4604      	mov	r4, r0
 8006f2a:	460d      	mov	r5, r1
 8006f2c:	e030      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006f2e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006f32:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006f36:	4316      	orrs	r6, r2
 8006f38:	d103      	bne.n	8006f42 <__ieee754_atan2+0x52>
 8006f3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3e:	f000 b8b7 	b.w	80070b0 <atan>
 8006f42:	179e      	asrs	r6, r3, #30
 8006f44:	f006 0602 	and.w	r6, r6, #2
 8006f48:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006f4c:	ea57 0100 	orrs.w	r1, r7, r0
 8006f50:	d107      	bne.n	8006f62 <__ieee754_atan2+0x72>
 8006f52:	2e02      	cmp	r6, #2
 8006f54:	d079      	beq.n	800704a <__ieee754_atan2+0x15a>
 8006f56:	2e03      	cmp	r6, #3
 8006f58:	d11a      	bne.n	8006f90 <__ieee754_atan2+0xa0>
 8006f5a:	a541      	add	r5, pc, #260	; (adr r5, 8007060 <__ieee754_atan2+0x170>)
 8006f5c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f60:	e016      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006f62:	ea5c 0102 	orrs.w	r1, ip, r2
 8006f66:	d106      	bne.n	8006f76 <__ieee754_atan2+0x86>
 8006f68:	f1b8 0f00 	cmp.w	r8, #0
 8006f6c:	da71      	bge.n	8007052 <__ieee754_atan2+0x162>
 8006f6e:	a53e      	add	r5, pc, #248	; (adr r5, 8007068 <__ieee754_atan2+0x178>)
 8006f70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f74:	e00c      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006f76:	45cc      	cmp	ip, r9
 8006f78:	d123      	bne.n	8006fc2 <__ieee754_atan2+0xd2>
 8006f7a:	4567      	cmp	r7, ip
 8006f7c:	d114      	bne.n	8006fa8 <__ieee754_atan2+0xb8>
 8006f7e:	2e02      	cmp	r6, #2
 8006f80:	d00a      	beq.n	8006f98 <__ieee754_atan2+0xa8>
 8006f82:	2e03      	cmp	r6, #3
 8006f84:	d00c      	beq.n	8006fa0 <__ieee754_atan2+0xb0>
 8006f86:	2e01      	cmp	r6, #1
 8006f88:	d15b      	bne.n	8007042 <__ieee754_atan2+0x152>
 8006f8a:	a539      	add	r5, pc, #228	; (adr r5, 8007070 <__ieee754_atan2+0x180>)
 8006f8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f90:	4620      	mov	r0, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	a537      	add	r5, pc, #220	; (adr r5, 8007078 <__ieee754_atan2+0x188>)
 8006f9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f9e:	e7f7      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006fa0:	a537      	add	r5, pc, #220	; (adr r5, 8007080 <__ieee754_atan2+0x190>)
 8006fa2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006fa6:	e7f3      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006fa8:	2e02      	cmp	r6, #2
 8006faa:	d04e      	beq.n	800704a <__ieee754_atan2+0x15a>
 8006fac:	2e03      	cmp	r6, #3
 8006fae:	d0d4      	beq.n	8006f5a <__ieee754_atan2+0x6a>
 8006fb0:	2e01      	cmp	r6, #1
 8006fb2:	f04f 0400 	mov.w	r4, #0
 8006fb6:	d102      	bne.n	8006fbe <__ieee754_atan2+0xce>
 8006fb8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006fbc:	e7e8      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006fbe:	2500      	movs	r5, #0
 8006fc0:	e7e6      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8006fc2:	454f      	cmp	r7, r9
 8006fc4:	d0d0      	beq.n	8006f68 <__ieee754_atan2+0x78>
 8006fc6:	eba7 070c 	sub.w	r7, r7, ip
 8006fca:	153f      	asrs	r7, r7, #20
 8006fcc:	2f3c      	cmp	r7, #60	; 0x3c
 8006fce:	dc1e      	bgt.n	800700e <__ieee754_atan2+0x11e>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da01      	bge.n	8006fd8 <__ieee754_atan2+0xe8>
 8006fd4:	373c      	adds	r7, #60	; 0x3c
 8006fd6:	db1e      	blt.n	8007016 <__ieee754_atan2+0x126>
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4629      	mov	r1, r5
 8006fdc:	f7f9 fba6 	bl	800072c <__aeabi_ddiv>
 8006fe0:	f000 f9f0 	bl	80073c4 <fabs>
 8006fe4:	f000 f864 	bl	80070b0 <atan>
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	2e01      	cmp	r6, #1
 8006fee:	d015      	beq.n	800701c <__ieee754_atan2+0x12c>
 8006ff0:	2e02      	cmp	r6, #2
 8006ff2:	d017      	beq.n	8007024 <__ieee754_atan2+0x134>
 8006ff4:	2e00      	cmp	r6, #0
 8006ff6:	d0cb      	beq.n	8006f90 <__ieee754_atan2+0xa0>
 8006ff8:	a323      	add	r3, pc, #140	; (adr r3, 8007088 <__ieee754_atan2+0x198>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	4620      	mov	r0, r4
 8007000:	4629      	mov	r1, r5
 8007002:	f7f9 f8b1 	bl	8000168 <__aeabi_dsub>
 8007006:	a322      	add	r3, pc, #136	; (adr r3, 8007090 <__ieee754_atan2+0x1a0>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	e016      	b.n	800703c <__ieee754_atan2+0x14c>
 800700e:	a522      	add	r5, pc, #136	; (adr r5, 8007098 <__ieee754_atan2+0x1a8>)
 8007010:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007014:	e7ea      	b.n	8006fec <__ieee754_atan2+0xfc>
 8007016:	2400      	movs	r4, #0
 8007018:	2500      	movs	r5, #0
 800701a:	e7e7      	b.n	8006fec <__ieee754_atan2+0xfc>
 800701c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007020:	461d      	mov	r5, r3
 8007022:	e7b5      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8007024:	a318      	add	r3, pc, #96	; (adr r3, 8007088 <__ieee754_atan2+0x198>)
 8007026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702a:	4620      	mov	r0, r4
 800702c:	4629      	mov	r1, r5
 800702e:	f7f9 f89b 	bl	8000168 <__aeabi_dsub>
 8007032:	4602      	mov	r2, r0
 8007034:	460b      	mov	r3, r1
 8007036:	a116      	add	r1, pc, #88	; (adr r1, 8007090 <__ieee754_atan2+0x1a0>)
 8007038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800703c:	f7f9 f894 	bl	8000168 <__aeabi_dsub>
 8007040:	e772      	b.n	8006f28 <__ieee754_atan2+0x38>
 8007042:	a517      	add	r5, pc, #92	; (adr r5, 80070a0 <__ieee754_atan2+0x1b0>)
 8007044:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007048:	e7a2      	b.n	8006f90 <__ieee754_atan2+0xa0>
 800704a:	a511      	add	r5, pc, #68	; (adr r5, 8007090 <__ieee754_atan2+0x1a0>)
 800704c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007050:	e79e      	b.n	8006f90 <__ieee754_atan2+0xa0>
 8007052:	a511      	add	r5, pc, #68	; (adr r5, 8007098 <__ieee754_atan2+0x1a8>)
 8007054:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007058:	e79a      	b.n	8006f90 <__ieee754_atan2+0xa0>
 800705a:	bf00      	nop
 800705c:	f3af 8000 	nop.w
 8007060:	54442d18 	.word	0x54442d18
 8007064:	c00921fb 	.word	0xc00921fb
 8007068:	54442d18 	.word	0x54442d18
 800706c:	bff921fb 	.word	0xbff921fb
 8007070:	54442d18 	.word	0x54442d18
 8007074:	bfe921fb 	.word	0xbfe921fb
 8007078:	7f3321d2 	.word	0x7f3321d2
 800707c:	4002d97c 	.word	0x4002d97c
 8007080:	7f3321d2 	.word	0x7f3321d2
 8007084:	c002d97c 	.word	0xc002d97c
 8007088:	33145c07 	.word	0x33145c07
 800708c:	3ca1a626 	.word	0x3ca1a626
 8007090:	54442d18 	.word	0x54442d18
 8007094:	400921fb 	.word	0x400921fb
 8007098:	54442d18 	.word	0x54442d18
 800709c:	3ff921fb 	.word	0x3ff921fb
 80070a0:	54442d18 	.word	0x54442d18
 80070a4:	3fe921fb 	.word	0x3fe921fb
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	00000000 	.word	0x00000000

080070b0 <atan>:
 80070b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4bb6      	ldr	r3, [pc, #728]	; (8007390 <atan+0x2e0>)
 80070b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80070ba:	429e      	cmp	r6, r3
 80070bc:	4604      	mov	r4, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	468b      	mov	fp, r1
 80070c2:	dd17      	ble.n	80070f4 <atan+0x44>
 80070c4:	4bb3      	ldr	r3, [pc, #716]	; (8007394 <atan+0x2e4>)
 80070c6:	429e      	cmp	r6, r3
 80070c8:	dc01      	bgt.n	80070ce <atan+0x1e>
 80070ca:	d109      	bne.n	80070e0 <atan+0x30>
 80070cc:	b140      	cbz	r0, 80070e0 <atan+0x30>
 80070ce:	4622      	mov	r2, r4
 80070d0:	462b      	mov	r3, r5
 80070d2:	4620      	mov	r0, r4
 80070d4:	4629      	mov	r1, r5
 80070d6:	f7f9 f849 	bl	800016c <__adddf3>
 80070da:	4604      	mov	r4, r0
 80070dc:	460d      	mov	r5, r1
 80070de:	e005      	b.n	80070ec <atan+0x3c>
 80070e0:	f1bb 0f00 	cmp.w	fp, #0
 80070e4:	4cac      	ldr	r4, [pc, #688]	; (8007398 <atan+0x2e8>)
 80070e6:	f340 8121 	ble.w	800732c <atan+0x27c>
 80070ea:	4dac      	ldr	r5, [pc, #688]	; (800739c <atan+0x2ec>)
 80070ec:	4620      	mov	r0, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f4:	4baa      	ldr	r3, [pc, #680]	; (80073a0 <atan+0x2f0>)
 80070f6:	429e      	cmp	r6, r3
 80070f8:	dc11      	bgt.n	800711e <atan+0x6e>
 80070fa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80070fe:	429e      	cmp	r6, r3
 8007100:	dc0a      	bgt.n	8007118 <atan+0x68>
 8007102:	a38b      	add	r3, pc, #556	; (adr r3, 8007330 <atan+0x280>)
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f7f9 f830 	bl	800016c <__adddf3>
 800710c:	2200      	movs	r2, #0
 800710e:	4ba5      	ldr	r3, [pc, #660]	; (80073a4 <atan+0x2f4>)
 8007110:	f7f9 fc72 	bl	80009f8 <__aeabi_dcmpgt>
 8007114:	2800      	cmp	r0, #0
 8007116:	d1e9      	bne.n	80070ec <atan+0x3c>
 8007118:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800711c:	e027      	b.n	800716e <atan+0xbe>
 800711e:	f000 f951 	bl	80073c4 <fabs>
 8007122:	4ba1      	ldr	r3, [pc, #644]	; (80073a8 <atan+0x2f8>)
 8007124:	4604      	mov	r4, r0
 8007126:	429e      	cmp	r6, r3
 8007128:	460d      	mov	r5, r1
 800712a:	f300 80b8 	bgt.w	800729e <atan+0x1ee>
 800712e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007132:	429e      	cmp	r6, r3
 8007134:	f300 809c 	bgt.w	8007270 <atan+0x1c0>
 8007138:	4602      	mov	r2, r0
 800713a:	460b      	mov	r3, r1
 800713c:	f7f9 f816 	bl	800016c <__adddf3>
 8007140:	2200      	movs	r2, #0
 8007142:	4b98      	ldr	r3, [pc, #608]	; (80073a4 <atan+0x2f4>)
 8007144:	f7f9 f810 	bl	8000168 <__aeabi_dsub>
 8007148:	2200      	movs	r2, #0
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007152:	4620      	mov	r0, r4
 8007154:	4629      	mov	r1, r5
 8007156:	f7f9 f809 	bl	800016c <__adddf3>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4630      	mov	r0, r6
 8007160:	4639      	mov	r1, r7
 8007162:	f7f9 fae3 	bl	800072c <__aeabi_ddiv>
 8007166:	f04f 0a00 	mov.w	sl, #0
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	4622      	mov	r2, r4
 8007170:	462b      	mov	r3, r5
 8007172:	4620      	mov	r0, r4
 8007174:	4629      	mov	r1, r5
 8007176:	f7f9 f9af 	bl	80004d8 <__aeabi_dmul>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4680      	mov	r8, r0
 8007180:	4689      	mov	r9, r1
 8007182:	f7f9 f9a9 	bl	80004d8 <__aeabi_dmul>
 8007186:	a36c      	add	r3, pc, #432	; (adr r3, 8007338 <atan+0x288>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	f7f9 f9a2 	bl	80004d8 <__aeabi_dmul>
 8007194:	a36a      	add	r3, pc, #424	; (adr r3, 8007340 <atan+0x290>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f8 ffe7 	bl	800016c <__adddf3>
 800719e:	4632      	mov	r2, r6
 80071a0:	463b      	mov	r3, r7
 80071a2:	f7f9 f999 	bl	80004d8 <__aeabi_dmul>
 80071a6:	a368      	add	r3, pc, #416	; (adr r3, 8007348 <atan+0x298>)
 80071a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ac:	f7f8 ffde 	bl	800016c <__adddf3>
 80071b0:	4632      	mov	r2, r6
 80071b2:	463b      	mov	r3, r7
 80071b4:	f7f9 f990 	bl	80004d8 <__aeabi_dmul>
 80071b8:	a365      	add	r3, pc, #404	; (adr r3, 8007350 <atan+0x2a0>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f8 ffd5 	bl	800016c <__adddf3>
 80071c2:	4632      	mov	r2, r6
 80071c4:	463b      	mov	r3, r7
 80071c6:	f7f9 f987 	bl	80004d8 <__aeabi_dmul>
 80071ca:	a363      	add	r3, pc, #396	; (adr r3, 8007358 <atan+0x2a8>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f8 ffcc 	bl	800016c <__adddf3>
 80071d4:	4632      	mov	r2, r6
 80071d6:	463b      	mov	r3, r7
 80071d8:	f7f9 f97e 	bl	80004d8 <__aeabi_dmul>
 80071dc:	a360      	add	r3, pc, #384	; (adr r3, 8007360 <atan+0x2b0>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f8 ffc3 	bl	800016c <__adddf3>
 80071e6:	4642      	mov	r2, r8
 80071e8:	464b      	mov	r3, r9
 80071ea:	f7f9 f975 	bl	80004d8 <__aeabi_dmul>
 80071ee:	a35e      	add	r3, pc, #376	; (adr r3, 8007368 <atan+0x2b8>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	4680      	mov	r8, r0
 80071f6:	4689      	mov	r9, r1
 80071f8:	4630      	mov	r0, r6
 80071fa:	4639      	mov	r1, r7
 80071fc:	f7f9 f96c 	bl	80004d8 <__aeabi_dmul>
 8007200:	a35b      	add	r3, pc, #364	; (adr r3, 8007370 <atan+0x2c0>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f8 ffaf 	bl	8000168 <__aeabi_dsub>
 800720a:	4632      	mov	r2, r6
 800720c:	463b      	mov	r3, r7
 800720e:	f7f9 f963 	bl	80004d8 <__aeabi_dmul>
 8007212:	a359      	add	r3, pc, #356	; (adr r3, 8007378 <atan+0x2c8>)
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f7f8 ffa6 	bl	8000168 <__aeabi_dsub>
 800721c:	4632      	mov	r2, r6
 800721e:	463b      	mov	r3, r7
 8007220:	f7f9 f95a 	bl	80004d8 <__aeabi_dmul>
 8007224:	a356      	add	r3, pc, #344	; (adr r3, 8007380 <atan+0x2d0>)
 8007226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722a:	f7f8 ff9d 	bl	8000168 <__aeabi_dsub>
 800722e:	4632      	mov	r2, r6
 8007230:	463b      	mov	r3, r7
 8007232:	f7f9 f951 	bl	80004d8 <__aeabi_dmul>
 8007236:	a354      	add	r3, pc, #336	; (adr r3, 8007388 <atan+0x2d8>)
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f8 ff94 	bl	8000168 <__aeabi_dsub>
 8007240:	4632      	mov	r2, r6
 8007242:	463b      	mov	r3, r7
 8007244:	f7f9 f948 	bl	80004d8 <__aeabi_dmul>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f8 ff8c 	bl	800016c <__adddf3>
 8007254:	4622      	mov	r2, r4
 8007256:	462b      	mov	r3, r5
 8007258:	f7f9 f93e 	bl	80004d8 <__aeabi_dmul>
 800725c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	d144      	bne.n	80072f0 <atan+0x240>
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f8 ff7d 	bl	8000168 <__aeabi_dsub>
 800726e:	e734      	b.n	80070da <atan+0x2a>
 8007270:	2200      	movs	r2, #0
 8007272:	4b4c      	ldr	r3, [pc, #304]	; (80073a4 <atan+0x2f4>)
 8007274:	f7f8 ff78 	bl	8000168 <__aeabi_dsub>
 8007278:	2200      	movs	r2, #0
 800727a:	4606      	mov	r6, r0
 800727c:	460f      	mov	r7, r1
 800727e:	4b49      	ldr	r3, [pc, #292]	; (80073a4 <atan+0x2f4>)
 8007280:	4620      	mov	r0, r4
 8007282:	4629      	mov	r1, r5
 8007284:	f7f8 ff72 	bl	800016c <__adddf3>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4630      	mov	r0, r6
 800728e:	4639      	mov	r1, r7
 8007290:	f7f9 fa4c 	bl	800072c <__aeabi_ddiv>
 8007294:	f04f 0a01 	mov.w	sl, #1
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	e767      	b.n	800716e <atan+0xbe>
 800729e:	4b43      	ldr	r3, [pc, #268]	; (80073ac <atan+0x2fc>)
 80072a0:	429e      	cmp	r6, r3
 80072a2:	dc1a      	bgt.n	80072da <atan+0x22a>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4b42      	ldr	r3, [pc, #264]	; (80073b0 <atan+0x300>)
 80072a8:	f7f8 ff5e 	bl	8000168 <__aeabi_dsub>
 80072ac:	2200      	movs	r2, #0
 80072ae:	4606      	mov	r6, r0
 80072b0:	460f      	mov	r7, r1
 80072b2:	4b3f      	ldr	r3, [pc, #252]	; (80073b0 <atan+0x300>)
 80072b4:	4620      	mov	r0, r4
 80072b6:	4629      	mov	r1, r5
 80072b8:	f7f9 f90e 	bl	80004d8 <__aeabi_dmul>
 80072bc:	2200      	movs	r2, #0
 80072be:	4b39      	ldr	r3, [pc, #228]	; (80073a4 <atan+0x2f4>)
 80072c0:	f7f8 ff54 	bl	800016c <__adddf3>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f9 fa2e 	bl	800072c <__aeabi_ddiv>
 80072d0:	f04f 0a02 	mov.w	sl, #2
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	e749      	b.n	800716e <atan+0xbe>
 80072da:	4602      	mov	r2, r0
 80072dc:	460b      	mov	r3, r1
 80072de:	2000      	movs	r0, #0
 80072e0:	4934      	ldr	r1, [pc, #208]	; (80073b4 <atan+0x304>)
 80072e2:	f7f9 fa23 	bl	800072c <__aeabi_ddiv>
 80072e6:	f04f 0a03 	mov.w	sl, #3
 80072ea:	4604      	mov	r4, r0
 80072ec:	460d      	mov	r5, r1
 80072ee:	e73e      	b.n	800716e <atan+0xbe>
 80072f0:	4b31      	ldr	r3, [pc, #196]	; (80073b8 <atan+0x308>)
 80072f2:	4e32      	ldr	r6, [pc, #200]	; (80073bc <atan+0x30c>)
 80072f4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80072f8:	4456      	add	r6, sl
 80072fa:	449a      	add	sl, r3
 80072fc:	e9da 2300 	ldrd	r2, r3, [sl]
 8007300:	f7f8 ff32 	bl	8000168 <__aeabi_dsub>
 8007304:	4622      	mov	r2, r4
 8007306:	462b      	mov	r3, r5
 8007308:	f7f8 ff2e 	bl	8000168 <__aeabi_dsub>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007314:	f7f8 ff28 	bl	8000168 <__aeabi_dsub>
 8007318:	f1bb 0f00 	cmp.w	fp, #0
 800731c:	4604      	mov	r4, r0
 800731e:	460d      	mov	r5, r1
 8007320:	f6bf aee4 	bge.w	80070ec <atan+0x3c>
 8007324:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007328:	461d      	mov	r5, r3
 800732a:	e6df      	b.n	80070ec <atan+0x3c>
 800732c:	4d24      	ldr	r5, [pc, #144]	; (80073c0 <atan+0x310>)
 800732e:	e6dd      	b.n	80070ec <atan+0x3c>
 8007330:	8800759c 	.word	0x8800759c
 8007334:	7e37e43c 	.word	0x7e37e43c
 8007338:	e322da11 	.word	0xe322da11
 800733c:	3f90ad3a 	.word	0x3f90ad3a
 8007340:	24760deb 	.word	0x24760deb
 8007344:	3fa97b4b 	.word	0x3fa97b4b
 8007348:	a0d03d51 	.word	0xa0d03d51
 800734c:	3fb10d66 	.word	0x3fb10d66
 8007350:	c54c206e 	.word	0xc54c206e
 8007354:	3fb745cd 	.word	0x3fb745cd
 8007358:	920083ff 	.word	0x920083ff
 800735c:	3fc24924 	.word	0x3fc24924
 8007360:	5555550d 	.word	0x5555550d
 8007364:	3fd55555 	.word	0x3fd55555
 8007368:	2c6a6c2f 	.word	0x2c6a6c2f
 800736c:	bfa2b444 	.word	0xbfa2b444
 8007370:	52defd9a 	.word	0x52defd9a
 8007374:	3fadde2d 	.word	0x3fadde2d
 8007378:	af749a6d 	.word	0xaf749a6d
 800737c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007380:	fe231671 	.word	0xfe231671
 8007384:	3fbc71c6 	.word	0x3fbc71c6
 8007388:	9998ebc4 	.word	0x9998ebc4
 800738c:	3fc99999 	.word	0x3fc99999
 8007390:	440fffff 	.word	0x440fffff
 8007394:	7ff00000 	.word	0x7ff00000
 8007398:	54442d18 	.word	0x54442d18
 800739c:	3ff921fb 	.word	0x3ff921fb
 80073a0:	3fdbffff 	.word	0x3fdbffff
 80073a4:	3ff00000 	.word	0x3ff00000
 80073a8:	3ff2ffff 	.word	0x3ff2ffff
 80073ac:	40037fff 	.word	0x40037fff
 80073b0:	3ff80000 	.word	0x3ff80000
 80073b4:	bff00000 	.word	0xbff00000
 80073b8:	08007598 	.word	0x08007598
 80073bc:	08007578 	.word	0x08007578
 80073c0:	bff921fb 	.word	0xbff921fb

080073c4 <fabs>:
 80073c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80073c8:	4619      	mov	r1, r3
 80073ca:	4770      	bx	lr

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
